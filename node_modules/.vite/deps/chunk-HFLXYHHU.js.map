{
  "version": 3,
  "sources": ["../../src/togglebutton/style/ToggleButtonStyle.js", "../../src/togglebutton/BaseToggleButton.vue", "../../src/togglebutton/ToggleButton.vue", "../../src/togglebutton/ToggleButton.vue?vue&type=template&id=545fc28a&lang.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nconst theme = ({ dt }) => `\n.p-togglebutton {\n    display: inline-flex;\n    cursor: pointer;\n    user-select: none;\n    align-items: center;\n    justify-content: center;\n    overflow: hidden;\n    position: relative;\n    color: ${dt('togglebutton.color')};\n    background: ${dt('togglebutton.background')};\n    border: 1px solid ${dt('togglebutton.border.color')};\n    padding: ${dt('togglebutton.padding')};\n    font-size: 1rem;\n    font-family: inherit;\n    font-feature-settings: inherit;\n    transition: background ${dt('togglebutton.transition.duration')}, color ${dt('togglebutton.transition.duration')}, border-color ${dt('togglebutton.transition.duration')},\n        outline-color ${dt('togglebutton.transition.duration')}, box-shadow ${dt('togglebutton.transition.duration')};\n    border-radius: ${dt('togglebutton.border.radius')};\n    outline-color: transparent;\n    font-weight: ${dt('togglebutton.font.weight')};\n}\n\n.p-togglebutton-content {\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: ${dt('togglebutton.gap')};\n}\n\n.p-togglebutton-label,\n.p-togglebutton-icon {\n    position: relative;\n    transition: none;\n}\n\n.p-togglebutton::before {\n    content: \"\";\n    background: transparent;\n    transition: background ${dt('togglebutton.transition.duration')}, color ${dt('togglebutton.transition.duration')}, border-color ${dt('togglebutton.transition.duration')},\n            outline-color ${dt('togglebutton.transition.duration')}, box-shadow ${dt('togglebutton.transition.duration')};\n    position: absolute;\n    left: ${dt('togglebutton.content.left')};\n    top: ${dt('togglebutton.content.top')};\n    width: calc(100% - calc(2 *  ${dt('togglebutton.content.left')}));\n    height: calc(100% - calc(2 *  ${dt('togglebutton.content.top')}));\n    border-radius: ${dt('togglebutton.border.radius')};\n}\n\n.p-togglebutton.p-togglebutton-checked::before {\n    background: ${dt('togglebutton.content.checked.background')};\n    box-shadow: ${dt('togglebutton.content.checked.shadow')};\n}\n\n.p-togglebutton:not(:disabled):not(.p-togglebutton-checked):hover {\n    background: ${dt('togglebutton.hover.background')};\n    color: ${dt('togglebutton.hover.color')};\n}\n\n.p-togglebutton.p-togglebutton-checked {\n    background: ${dt('togglebutton.checked.background')};\n    border-color: ${dt('togglebutton.checked.border.color')};\n    color: ${dt('togglebutton.checked.color')};\n}\n\n.p-togglebutton:focus-visible {\n    box-shadow: ${dt('togglebutton.focus.ring.shadow')};\n    outline: ${dt('togglebutton.focus.ring.width')} ${dt('togglebutton.focus.ring.style')} ${dt('togglebutton.focus.ring.color')};\n    outline-offset: ${dt('togglebutton.focus.ring.offset')};\n}\n\n.p-togglebutton.p-invalid {\n    border-color: ${dt('togglebutton.invalid.border.color')};\n}\n\n.p-togglebutton:disabled {\n    opacity: 1;\n    cursor: default;\n    background: ${dt('togglebutton.disabled.background')};\n    border-color: ${dt('togglebutton.disabled.border.color')};\n    color: ${dt('togglebutton.disabled.color')};\n}\n\n.p-togglebutton-icon {\n    color: ${dt('togglebutton.icon.color')};\n}\n\n.p-togglebutton:not(:disabled):not(.p-togglebutton-checked):hover .p-togglebutton-icon {\n    color: ${dt('togglebutton.icon.hover.color')};\n}\n\n.p-togglebutton.p-togglebutton-checked .p-togglebutton-icon {\n    color: ${dt('togglebutton.icon.checked.color')};\n}\n\n.p-togglebutton:disabled .p-togglebutton-icon {\n    color: ${dt('togglebutton.icon.disabled.color')};\n}\n`;\n\nconst classes = {\n    root: ({ instance, props }) => [\n        'p-togglebutton p-component',\n        {\n            'p-togglebutton-checked': instance.active,\n            'p-invalid': props.invalid\n        }\n    ],\n    content: 'p-togglebutton-content',\n    icon: 'p-togglebutton-icon',\n    label: 'p-togglebutton-label'\n};\n\nexport default BaseStyle.extend({\n    name: 'togglebutton',\n    theme,\n    classes\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport ToggleButtonStyle from 'primevue/togglebutton/style';\n\nexport default {\n    name: 'BaseToggleButton',\n    extends: BaseComponent,\n    props: {\n        modelValue: Boolean,\n        onIcon: String,\n        offIcon: String,\n        onLabel: {\n            type: String,\n            default: 'Yes'\n        },\n        offLabel: {\n            type: String,\n            default: 'No'\n        },\n        iconPos: {\n            type: String,\n            default: 'left'\n        },\n        invalid: {\n            type: Boolean,\n            default: false\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        tabindex: {\n            type: Number,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        }\n    },\n    style: ToggleButtonStyle,\n    provide() {\n        return {\n            $pcToggleButton: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <button v-ripple type=\"button\" :class=\"cx('root')\" :tabindex=\"tabindex\" :disabled=\"disabled\" :aria-pressed=\"modelValue\" @click=\"onChange\" v-bind=\"getPTOptions('root')\" :data-p-checked=\"active\" :data-p-disabled=\"disabled\">\n        <span :class=\"cx('content')\" v-bind=\"getPTOptions('content')\">\n            <slot>\n                <slot name=\"icon\" :value=\"modelValue\" :class=\"cx('icon')\">\n                    <span v-if=\"onIcon || offIcon\" :class=\"[cx('icon'), modelValue ? onIcon : offIcon]\" v-bind=\"getPTOptions('icon')\" />\n                </slot>\n                <span :class=\"cx('label')\" v-bind=\"getPTOptions('label')\">{{ label }}</span>\n            </slot>\n        </span>\n    </button>\n</template>\n\n<script>\nimport { isNotEmpty } from '@primeuix/utils/object';\nimport Ripple from 'primevue/ripple';\nimport BaseToggleButton from './BaseToggleButton.vue';\n\nexport default {\n    name: 'ToggleButton',\n    extends: BaseToggleButton,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'change'],\n    methods: {\n        getPTOptions(key) {\n            const _ptm = key === 'root' ? this.ptmi : this.ptm;\n\n            return _ptm(key, {\n                context: {\n                    active: this.active,\n                    disabled: this.disabled\n                }\n            });\n        },\n        onChange(event) {\n            if (!this.disabled && !this.readonly) {\n                this.$emit('update:modelValue', !this.modelValue);\n                this.$emit('change', event);\n            }\n        }\n    },\n    computed: {\n        active() {\n            return this.modelValue === true;\n        },\n        hasLabel() {\n            return isNotEmpty(this.onLabel) && isNotEmpty(this.offLabel);\n        },\n        label() {\n            return this.hasLabel ? (this.modelValue ? this.onLabel : this.offLabel) : '&nbsp;';\n        }\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n", "<template>\n    <button v-ripple type=\"button\" :class=\"cx('root')\" :tabindex=\"tabindex\" :disabled=\"disabled\" :aria-pressed=\"modelValue\" @click=\"onChange\" v-bind=\"getPTOptions('root')\" :data-p-checked=\"active\" :data-p-disabled=\"disabled\">\n        <span :class=\"cx('content')\" v-bind=\"getPTOptions('content')\">\n            <slot>\n                <slot name=\"icon\" :value=\"modelValue\" :class=\"cx('icon')\">\n                    <span v-if=\"onIcon || offIcon\" :class=\"[cx('icon'), modelValue ? onIcon : offIcon]\" v-bind=\"getPTOptions('icon')\" />\n                </slot>\n                <span :class=\"cx('label')\" v-bind=\"getPTOptions('label')\">{{ label }}</span>\n            </slot>\n        </span>\n    </button>\n</template>\n\n<script>\nimport { isNotEmpty } from '@primeuix/utils/object';\nimport Ripple from 'primevue/ripple';\nimport BaseToggleButton from './BaseToggleButton.vue';\n\nexport default {\n    name: 'ToggleButton',\n    extends: BaseToggleButton,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'change'],\n    methods: {\n        getPTOptions(key) {\n            const _ptm = key === 'root' ? this.ptmi : this.ptm;\n\n            return _ptm(key, {\n                context: {\n                    active: this.active,\n                    disabled: this.disabled\n                }\n            });\n        },\n        onChange(event) {\n            if (!this.disabled && !this.readonly) {\n                this.$emit('update:modelValue', !this.modelValue);\n                this.$emit('change', event);\n            }\n        }\n    },\n    computed: {\n        active() {\n            return this.modelValue === true;\n        },\n        hasLabel() {\n            return isNotEmpty(this.onLabel) && isNotEmpty(this.offLabel);\n        },\n        label() {\n            return this.hasLabel ? (this.modelValue ? this.onLabel : this.offLabel) : '&nbsp;';\n        }\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["theme", "_ref", "dt", "concat", "classes", "root", "_ref2", "instance", "props", "active", "invalid", "content", "icon", "label", "BaseStyle", "extend", "name", "name", "BaseComponent", "props", "modelValue", "Boolean", "onIcon", "String", "offIcon", "onLabel", "type", "offLabel", "iconPos", "invalid", "disabled", "readonly", "tabindex", "Number", "ariaLabelledby", "ariaLabel", "style", "ToggleButtonStyle", "provide", "$pcToggleButton", "$parentInstance", "script", "BaseToggleButton", "inheritAttrs", "emits", "methods", "getPTOptions", "key", "_ptm", "ptmi", "ptm", "context", "active", "onChange", "event", "$emit", "computed", "hasLabel", "isNotEmpty", "label", "directives", "ripple", "Ripple", "_withDirectives", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "onClick", "$options", "apply", "arguments", "_createElementVNode", "_renderSlot", "$slots", "value"]
}
