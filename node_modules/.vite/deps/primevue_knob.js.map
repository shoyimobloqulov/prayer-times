{
  "version": 3,
  "sources": ["../../src/knob/style/KnobStyle.js", "../../src/knob/BaseKnob.vue", "../../src/knob/Knob.vue", "../../src/knob/Knob.vue?vue&type=template&id=2041ede6&lang.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nconst theme = ({ dt }) => `\n.p-knob-range {\n    fill: none;\n    transition: stroke 0.1s ease-in;\n}\n\n.p-knob-value {\n    animation-name: p-knob-dash-frame;\n    animation-fill-mode: forwards;\n    fill: none;\n}\n\n.p-knob-text {\n    font-size: 1.3rem;\n    text-align: center;\n}\n\n.p-knob svg {\n    border-radius: 50%;\n    outline-color: transparent;\n    transition: background ${dt('knob.transition.duration')}, color ${dt('knob.transition.duration')}, outline-color ${dt('knob.transition.duration')}, box-shadow ${dt('knob.transition.duration')};\n}\n\n.p-knob svg:focus-visible {\n    box-shadow: ${dt('knob.focus.ring.shadow')};\n    outline: ${dt('knob.focus.ring.width')} ${dt('knob.focus.ring.style')} ${dt('knob.focus.ring.color')};\n    outline-offset: ${dt('knob.focus.ring.offset')};\n}\n\n@keyframes p-knob-dash-frame {\n    100% {\n        stroke-dashoffset: 0;\n    }\n}\n`;\n\nconst classes = {\n    root: ({ props }) => ['p-knob p-component', { 'p-disabled': props.disabled }],\n    range: 'p-knob-range',\n    value: 'p-knob-value',\n    text: 'p-knob-text'\n};\n\nexport default BaseStyle.extend({\n    name: 'knob',\n    theme,\n    classes\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { $dt } from '@primeuix/styled';\nimport KnobStyle from 'primevue/knob/style';\n\nexport default {\n    name: 'BaseKnob',\n    extends: BaseComponent,\n    props: {\n        modelValue: {\n            type: Number,\n            default: null\n        },\n        size: {\n            type: Number,\n            default: 100\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        step: {\n            type: Number,\n            default: 1\n        },\n        min: {\n            type: Number,\n            default: 0\n        },\n        max: {\n            type: Number,\n            default: 100\n        },\n        valueColor: {\n            type: String,\n            default: () => {\n                return $dt('knob.value.background').variable;\n            }\n        },\n        rangeColor: {\n            type: String,\n            default: () => {\n                return $dt('knob.range.background').variable;\n            }\n        },\n        textColor: {\n            type: String,\n            default: () => {\n                return $dt('knob.text.color').variable;\n            }\n        },\n        strokeWidth: {\n            type: Number,\n            default: 14\n        },\n        showValue: {\n            type: Boolean,\n            default: true\n        },\n        valueTemplate: {\n            type: [String, Function],\n            default: '{value}'\n        },\n        tabindex: {\n            type: Number,\n            default: 0\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        }\n    },\n    style: KnobStyle,\n    provide() {\n        return {\n            $pcKnob: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <svg\n            viewBox=\"0 0 100 100\"\n            role=\"slider\"\n            :width=\"size\"\n            :height=\"size\"\n            :tabindex=\"readonly || disabled ? -1 : tabindex\"\n            :aria-valuemin=\"min\"\n            :aria-valuemax=\"max\"\n            :aria-valuenow=\"modelValue\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-label=\"ariaLabel\"\n            @click=\"onClick\"\n            @keydown=\"onKeyDown\"\n            @mousedown=\"onMouseDown\"\n            @mouseup=\"onMouseUp\"\n            @touchstart.passive=\"onTouchStart\"\n            @touchend=\"onTouchEnd\"\n            v-bind=\"ptm('svg')\"\n        >\n            <path :d=\"rangePath\" :stroke-width=\"strokeWidth\" :stroke=\"rangeColor\" :class=\"cx('range')\" v-bind=\"ptm('range')\"></path>\n            <path :d=\"valuePath\" :stroke-width=\"strokeWidth\" :stroke=\"valueColor\" :class=\"cx('value')\" v-bind=\"ptm('value')\"></path>\n            <text v-if=\"showValue\" :x=\"50\" :y=\"57\" text-anchor=\"middle\" :fill=\"textColor\" :class=\"cx('text')\" v-bind=\"ptm('text')\">{{ valueToDisplay }}</text>\n        </svg>\n    </div>\n</template>\n\n<script>\nimport BaseKnob from './BaseKnob.vue';\n\n// Set fix value for SSR.\nconst Math_PI = 3.14159265358979;\n\nexport default {\n    name: 'Knob',\n    extends: BaseKnob,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'change'],\n    data() {\n        return {\n            radius: 40,\n            midX: 50,\n            midY: 50,\n            minRadians: (4 * Math_PI) / 3,\n            maxRadians: -Math_PI / 3\n        };\n    },\n    methods: {\n        updateValue(offsetX, offsetY) {\n            let dx = offsetX - this.size / 2;\n            let dy = this.size / 2 - offsetY;\n            let angle = Math.atan2(dy, dx);\n            let start = -Math_PI / 2 - Math_PI / 6;\n\n            this.updateModel(angle, start);\n        },\n        updateModel(angle, start) {\n            let mappedValue;\n\n            if (angle > this.maxRadians) mappedValue = this.mapRange(angle, this.minRadians, this.maxRadians, this.min, this.max);\n            else if (angle < start) mappedValue = this.mapRange(angle + 2 * Math_PI, this.minRadians, this.maxRadians, this.min, this.max);\n            else return;\n\n            let newValue = Math.round((mappedValue - this.min) / this.step) * this.step + this.min;\n\n            this.$emit('update:modelValue', newValue);\n            this.$emit('change', newValue);\n        },\n        updateModelValue(newValue) {\n            if (newValue > this.max) this.$emit('update:modelValue', this.max);\n            else if (newValue < this.min) this.$emit('update:modelValue', this.min);\n            else this.$emit('update:modelValue', newValue);\n        },\n        mapRange(x, inMin, inMax, outMin, outMax) {\n            return ((x - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\n        },\n        onClick(event) {\n            if (!this.disabled && !this.readonly) {\n                this.updateValue(event.offsetX, event.offsetY);\n            }\n        },\n        onMouseDown(event) {\n            if (!this.disabled && !this.readonly) {\n                window.addEventListener('mousemove', this.onMouseMove);\n                window.addEventListener('mouseup', this.onMouseUp);\n                event.preventDefault();\n            }\n        },\n        onMouseUp(event) {\n            if (!this.disabled && !this.readonly) {\n                window.removeEventListener('mousemove', this.onMouseMove);\n                window.removeEventListener('mouseup', this.onMouseUp);\n                event.preventDefault();\n            }\n        },\n        onTouchStart(event) {\n            if (!this.disabled && !this.readonly) {\n                window.addEventListener('touchmove', this.onTouchMove);\n                window.addEventListener('touchend', this.onTouchEnd);\n                event.preventDefault();\n            }\n        },\n        onTouchEnd(event) {\n            if (!this.disabled && !this.readonly) {\n                window.removeEventListener('touchmove', this.onTouchMove);\n                window.removeEventListener('touchend', this.onTouchEnd);\n                event.preventDefault();\n            }\n        },\n        onMouseMove(event) {\n            if (!this.disabled && !this.readonly) {\n                this.updateValue(event.offsetX, event.offsetY);\n                event.preventDefault();\n            }\n        },\n        onTouchMove(event) {\n            if (!this.disabled && !this.readonly && event.touches.length == 1) {\n                const rect = this.$el.getBoundingClientRect();\n                const touch = event.targetTouches.item(0);\n                const offsetX = touch.clientX - rect.left;\n                const offsetY = touch.clientY - rect.top;\n\n                this.updateValue(offsetX, offsetY);\n            }\n        },\n        onKeyDown(event) {\n            if (!this.disabled && !this.readonly) {\n                switch (event.code) {\n                    case 'ArrowRight':\n\n                    case 'ArrowUp': {\n                        event.preventDefault();\n                        this.updateModelValue(this.modelValue + this.step);\n                        break;\n                    }\n\n                    case 'ArrowLeft':\n\n                    case 'ArrowDown': {\n                        event.preventDefault();\n                        this.updateModelValue(this.modelValue - this.step);\n                        break;\n                    }\n\n                    case 'Home': {\n                        event.preventDefault();\n                        this.$emit('update:modelValue', this.min);\n                        break;\n                    }\n\n                    case 'End': {\n                        event.preventDefault();\n                        this.$emit('update:modelValue', this.max);\n                        break;\n                    }\n\n                    case 'PageUp': {\n                        event.preventDefault();\n                        this.updateModelValue(this.modelValue + 10);\n                        break;\n                    }\n\n                    case 'PageDown': {\n                        event.preventDefault();\n                        this.updateModelValue(this.modelValue - 10);\n                        break;\n                    }\n                }\n            }\n        }\n    },\n    computed: {\n        rangePath() {\n            return `M ${this.minX} ${this.minY} A ${this.radius} ${this.radius} 0 1 1 ${this.maxX} ${this.maxY}`;\n        },\n        valuePath() {\n            return `M ${this.zeroX} ${this.zeroY} A ${this.radius} ${this.radius} 0 ${this.largeArc} ${this.sweep} ${this.valueX} ${this.valueY}`;\n        },\n        zeroRadians() {\n            if (this.min > 0 && this.max > 0) return this.mapRange(this.min, this.min, this.max, this.minRadians, this.maxRadians);\n            else return this.mapRange(0, this.min, this.max, this.minRadians, this.maxRadians);\n        },\n        valueRadians() {\n            return this.mapRange(this.modelValue, this.min, this.max, this.minRadians, this.maxRadians);\n        },\n        minX() {\n            return this.midX + Math.cos(this.minRadians) * this.radius;\n        },\n        minY() {\n            return this.midY - Math.sin(this.minRadians) * this.radius;\n        },\n        maxX() {\n            return this.midX + Math.cos(this.maxRadians) * this.radius;\n        },\n        maxY() {\n            return this.midY - Math.sin(this.maxRadians) * this.radius;\n        },\n        zeroX() {\n            return this.midX + Math.cos(this.zeroRadians) * this.radius;\n        },\n        zeroY() {\n            return this.midY - Math.sin(this.zeroRadians) * this.radius;\n        },\n        valueX() {\n            return this.midX + Math.cos(this.valueRadians) * this.radius;\n        },\n        valueY() {\n            return this.midY - Math.sin(this.valueRadians) * this.radius;\n        },\n        largeArc() {\n            return Math.abs(this.zeroRadians - this.valueRadians) < Math_PI ? 0 : 1;\n        },\n        sweep() {\n            return this.valueRadians > this.zeroRadians ? 0 : 1;\n        },\n        valueToDisplay() {\n            if (typeof this.valueTemplate === 'string') {\n                return this.valueTemplate.replace(/{value}/g, this.modelValue);\n            } else {\n                return this.valueTemplate(this.modelValue);\n            }\n        }\n    }\n};\n//Derived and forked from https://github.com/kramer99/vue-knob-control\n</script>\n", "<template>\n    <div :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <svg\n            viewBox=\"0 0 100 100\"\n            role=\"slider\"\n            :width=\"size\"\n            :height=\"size\"\n            :tabindex=\"readonly || disabled ? -1 : tabindex\"\n            :aria-valuemin=\"min\"\n            :aria-valuemax=\"max\"\n            :aria-valuenow=\"modelValue\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-label=\"ariaLabel\"\n            @click=\"onClick\"\n            @keydown=\"onKeyDown\"\n            @mousedown=\"onMouseDown\"\n            @mouseup=\"onMouseUp\"\n            @touchstart.passive=\"onTouchStart\"\n            @touchend=\"onTouchEnd\"\n            v-bind=\"ptm('svg')\"\n        >\n            <path :d=\"rangePath\" :stroke-width=\"strokeWidth\" :stroke=\"rangeColor\" :class=\"cx('range')\" v-bind=\"ptm('range')\"></path>\n            <path :d=\"valuePath\" :stroke-width=\"strokeWidth\" :stroke=\"valueColor\" :class=\"cx('value')\" v-bind=\"ptm('value')\"></path>\n            <text v-if=\"showValue\" :x=\"50\" :y=\"57\" text-anchor=\"middle\" :fill=\"textColor\" :class=\"cx('text')\" v-bind=\"ptm('text')\">{{ valueToDisplay }}</text>\n        </svg>\n    </div>\n</template>\n\n<script>\nimport BaseKnob from './BaseKnob.vue';\n\n// Set fix value for SSR.\nconst Math_PI = 3.14159265358979;\n\nexport default {\n    name: 'Knob',\n    extends: BaseKnob,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'change'],\n    data() {\n        return {\n            radius: 40,\n            midX: 50,\n            midY: 50,\n            minRadians: (4 * Math_PI) / 3,\n            maxRadians: -Math_PI / 3\n        };\n    },\n    methods: {\n        updateValue(offsetX, offsetY) {\n            let dx = offsetX - this.size / 2;\n            let dy = this.size / 2 - offsetY;\n            let angle = Math.atan2(dy, dx);\n            let start = -Math_PI / 2 - Math_PI / 6;\n\n            this.updateModel(angle, start);\n        },\n        updateModel(angle, start) {\n            let mappedValue;\n\n            if (angle > this.maxRadians) mappedValue = this.mapRange(angle, this.minRadians, this.maxRadians, this.min, this.max);\n            else if (angle < start) mappedValue = this.mapRange(angle + 2 * Math_PI, this.minRadians, this.maxRadians, this.min, this.max);\n            else return;\n\n            let newValue = Math.round((mappedValue - this.min) / this.step) * this.step + this.min;\n\n            this.$emit('update:modelValue', newValue);\n            this.$emit('change', newValue);\n        },\n        updateModelValue(newValue) {\n            if (newValue > this.max) this.$emit('update:modelValue', this.max);\n            else if (newValue < this.min) this.$emit('update:modelValue', this.min);\n            else this.$emit('update:modelValue', newValue);\n        },\n        mapRange(x, inMin, inMax, outMin, outMax) {\n            return ((x - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\n        },\n        onClick(event) {\n            if (!this.disabled && !this.readonly) {\n                this.updateValue(event.offsetX, event.offsetY);\n            }\n        },\n        onMouseDown(event) {\n            if (!this.disabled && !this.readonly) {\n                window.addEventListener('mousemove', this.onMouseMove);\n                window.addEventListener('mouseup', this.onMouseUp);\n                event.preventDefault();\n            }\n        },\n        onMouseUp(event) {\n            if (!this.disabled && !this.readonly) {\n                window.removeEventListener('mousemove', this.onMouseMove);\n                window.removeEventListener('mouseup', this.onMouseUp);\n                event.preventDefault();\n            }\n        },\n        onTouchStart(event) {\n            if (!this.disabled && !this.readonly) {\n                window.addEventListener('touchmove', this.onTouchMove);\n                window.addEventListener('touchend', this.onTouchEnd);\n                event.preventDefault();\n            }\n        },\n        onTouchEnd(event) {\n            if (!this.disabled && !this.readonly) {\n                window.removeEventListener('touchmove', this.onTouchMove);\n                window.removeEventListener('touchend', this.onTouchEnd);\n                event.preventDefault();\n            }\n        },\n        onMouseMove(event) {\n            if (!this.disabled && !this.readonly) {\n                this.updateValue(event.offsetX, event.offsetY);\n                event.preventDefault();\n            }\n        },\n        onTouchMove(event) {\n            if (!this.disabled && !this.readonly && event.touches.length == 1) {\n                const rect = this.$el.getBoundingClientRect();\n                const touch = event.targetTouches.item(0);\n                const offsetX = touch.clientX - rect.left;\n                const offsetY = touch.clientY - rect.top;\n\n                this.updateValue(offsetX, offsetY);\n            }\n        },\n        onKeyDown(event) {\n            if (!this.disabled && !this.readonly) {\n                switch (event.code) {\n                    case 'ArrowRight':\n\n                    case 'ArrowUp': {\n                        event.preventDefault();\n                        this.updateModelValue(this.modelValue + this.step);\n                        break;\n                    }\n\n                    case 'ArrowLeft':\n\n                    case 'ArrowDown': {\n                        event.preventDefault();\n                        this.updateModelValue(this.modelValue - this.step);\n                        break;\n                    }\n\n                    case 'Home': {\n                        event.preventDefault();\n                        this.$emit('update:modelValue', this.min);\n                        break;\n                    }\n\n                    case 'End': {\n                        event.preventDefault();\n                        this.$emit('update:modelValue', this.max);\n                        break;\n                    }\n\n                    case 'PageUp': {\n                        event.preventDefault();\n                        this.updateModelValue(this.modelValue + 10);\n                        break;\n                    }\n\n                    case 'PageDown': {\n                        event.preventDefault();\n                        this.updateModelValue(this.modelValue - 10);\n                        break;\n                    }\n                }\n            }\n        }\n    },\n    computed: {\n        rangePath() {\n            return `M ${this.minX} ${this.minY} A ${this.radius} ${this.radius} 0 1 1 ${this.maxX} ${this.maxY}`;\n        },\n        valuePath() {\n            return `M ${this.zeroX} ${this.zeroY} A ${this.radius} ${this.radius} 0 ${this.largeArc} ${this.sweep} ${this.valueX} ${this.valueY}`;\n        },\n        zeroRadians() {\n            if (this.min > 0 && this.max > 0) return this.mapRange(this.min, this.min, this.max, this.minRadians, this.maxRadians);\n            else return this.mapRange(0, this.min, this.max, this.minRadians, this.maxRadians);\n        },\n        valueRadians() {\n            return this.mapRange(this.modelValue, this.min, this.max, this.minRadians, this.maxRadians);\n        },\n        minX() {\n            return this.midX + Math.cos(this.minRadians) * this.radius;\n        },\n        minY() {\n            return this.midY - Math.sin(this.minRadians) * this.radius;\n        },\n        maxX() {\n            return this.midX + Math.cos(this.maxRadians) * this.radius;\n        },\n        maxY() {\n            return this.midY - Math.sin(this.maxRadians) * this.radius;\n        },\n        zeroX() {\n            return this.midX + Math.cos(this.zeroRadians) * this.radius;\n        },\n        zeroY() {\n            return this.midY - Math.sin(this.zeroRadians) * this.radius;\n        },\n        valueX() {\n            return this.midX + Math.cos(this.valueRadians) * this.radius;\n        },\n        valueY() {\n            return this.midY - Math.sin(this.valueRadians) * this.radius;\n        },\n        largeArc() {\n            return Math.abs(this.zeroRadians - this.valueRadians) < Math_PI ? 0 : 1;\n        },\n        sweep() {\n            return this.valueRadians > this.zeroRadians ? 0 : 1;\n        },\n        valueToDisplay() {\n            if (typeof this.valueTemplate === 'string') {\n                return this.valueTemplate.replace(/{value}/g, this.modelValue);\n            } else {\n                return this.valueTemplate(this.modelValue);\n            }\n        }\n    }\n};\n//Derived and forked from https://github.com/kramer99/vue-knob-control\n</script>\n"],
  "mappings": "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",
  "names": ["theme", "_ref", "dt", "concat", "classes", "root", "_ref2", "props", "disabled", "range", "value", "text", "BaseStyle", "extend", "name", "name", "BaseComponent", "props", "modelValue", "type", "Number", "size", "disabled", "Boolean", "readonly", "step", "min", "max", "valueColor", "String", "_default", "$dt", "variable", "rangeColor", "textColor", "strokeWidth", "showValue", "valueTemplate", "Function", "tabindex", "ariaLabelledby", "ariaLabel", "style", "KnobStyle", "provide", "$pcKnob", "$parentInstance", "Math_PI", "script", "BaseKnob", "inheritAttrs", "emits", "data", "radius", "midX", "midY", "minRadians", "maxRadians", "methods", "updateValue", "offsetX", "offsetY", "dx", "dy", "angle", "Math", "atan2", "start", "updateModel", "mappedValue", "mapRange", "newValue", "round", "$emit", "updateModelValue", "x", "inMin", "inMax", "outMin", "outMax", "onClick", "event", "onMouseDown", "window", "addEventListener", "onMouseMove", "onMouseUp", "preventDefault", "removeEventListener", "onTouchStart", "onTouchMove", "onTouchEnd", "touches", "length", "rect", "$el", "getBoundingClientRect", "touch", "targetTouches", "item", "clientX", "left", "clientY", "top", "onKeyDown", "code", "computed", "rangePath", "concat", "minX", "minY", "maxX", "maxY", "valuePath", "zeroX", "zeroY", "largeArc", "sweep", "valueX", "valueY", "zeroRadians", "valueRadians", "cos", "sin", "abs", "valueToDisplay", "replace", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "ptmi", "viewBox", "role", "width", "height", "$options", "apply", "arguments", "onKeydown", "onMousedown", "onMouseup", "onTouchend", "ptm", "_createElementVNode", "d", "stroke", "_hoisted_2", "_hoisted_3", "y", "fill", "_hoisted_4"]
}
