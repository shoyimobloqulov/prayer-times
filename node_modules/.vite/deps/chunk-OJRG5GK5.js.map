{
  "version": 3,
  "sources": ["../../src/inputchips/style/InputChipsStyle.js", "../../src/inputchips/BaseInputChips.vue", "../../src/inputchips/InputChips.vue", "../../src/inputchips/InputChips.vue?vue&type=template&id=c47b2d1a&lang.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nconst theme = ({ dt }) => `\n.p-inputchips {\n    display: inline-flex;\n}\n\n.p-inputchips-input {\n    margin: 0;\n    list-style-type: none;\n    cursor: text;\n    overflow: hidden;\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap;\n    padding: calc(${dt('inputchips.padding.y')} / 2) ${dt('inputchips.padding.x')};\n    gap: calc(${dt('inputchips.padding.y')} / 2);\n    color: ${dt('inputchips.color')};\n    background: ${dt('inputchips.background')};\n    border: 1px solid ${dt('inputchips.border.color')};\n    border-radius: ${dt('inputchips.border.radius')};\n    width: 100%;\n    transition: background ${dt('inputchips.transition.duration')}, color ${dt('inputchips.transition.duration')}, border-color ${dt('inputchips.transition.duration')}, outline-color ${dt('inputchips.transition.duration')}, box-shadow ${dt(\n    'inputchips.transition.duration'\n)};\n    outline-color: transparent;\n    box-shadow: ${dt('inputchips.shadow')};\n}\n\n.p-inputchips:not(.p-disabled):hover .p-inputchips-input {\n    border-color: ${dt('inputchips.hover.border.color')};\n}\n\n.p-inputchips:not(.p-disabled).p-focus .p-inputchips-input {\n    border-color: ${dt('inputchips.focus.border.color')};\n    box-shadow: ${dt('inputchips.focus.ring.shadow')};\n    outline: ${dt('inputchips.focus.ring.width')} ${dt('inputchips.focus.ring.style')} ${dt('inputchips.focus.ring.color')};\n    outline-offset: ${dt('inputchips.focus.ring.offset')};\n}\n\n.p-inputchips.p-invalid .p-inputchips-input {\n    border-color: ${dt('inputchips.invalid.border.color')};\n}\n\n.p-variant-filled.p-inputchips-input {\n    background: ${dt('inputchips.filled.background')};\n}\n\n.p-inputchips:not(.p-disabled).p-focus .p-variant-filled.p-inputchips-input  {\n    background: ${dt('inputchips.filled.focus.background')};\n}\n\n.p-inputchips.p-disabled .p-inputchips-input {\n    opacity: 1;\n    background: ${dt('inputchips.disabled.background')};\n    color: ${dt('inputchips.disabled.color')};\n}\n\n.p-inputchips-chip.p-chip {\n    padding-top: calc(${dt('inputchips.padding.y')} / 2);\n    padding-bottom: calc(${dt('inputchips.padding.y')} / 2);\n    border-radius: ${dt('inputchips.chip.border.radius')};\n    transition: background ${dt('inputchips.transition.duration')}, color ${dt('inputchips.transition.duration')};\n}\n\n.p-inputchips-chip-item.p-focus .p-inputchips-chip {\n    background: ${dt('inputchips.chip.focus.background')};\n    color: ${dt('inputchips.chip.focus.color')};\n}\n\n.p-inputchips-input:has(.p-inputchips-chip) {\n    padding-left: calc(${dt('inputchips.padding.y')} / 2);\n    padding-right: calc(${dt('inputchips.padding.y')} / 2);\n}\n\n.p-inputchips-input-item {\n    flex: 1 1 auto;\n    display: inline-flex;\n    padding-top: calc(${dt('inputchips.padding.y')} / 2);\n    padding-bottom: calc(${dt('inputchips.padding.y')} / 2);\n}\n\n.p-inputchips-input-item input {\n    border: 0 none;\n    outline: 0 none;\n    background: transparent;\n    margin: 0;\n    padding: 0;\n    box-shadow: none;\n    border-radius: 0;\n    width: 100%;\n    font-family: inherit;\n    font-feature-settings: inherit;\n    font-size: 1rem;\n    color: inherit;\n}\n\n.p-inputchips-input-item input::placeholder {\n    color: ${dt('inputchips.placeholder.color')};\n}\n`;\n\nconst classes = {\n    root: ({ instance, props }) => [\n        'p-inputchips p-component p-inputwrapper',\n        {\n            'p-disabled': props.disabled,\n            'p-invalid': props.invalid,\n            'p-focus': instance.focused,\n            'p-inputwrapper-filled': (props.modelValue && props.modelValue.length) || (instance.inputValue && instance.inputValue.length),\n            'p-inputwrapper-focus': instance.focused\n        }\n    ],\n    input: ({ props, instance }) => [\n        'p-inputchips-input',\n        {\n            'p-variant-filled': props.variant ? props.variant === 'filled' : instance.$primevue.config.inputStyle === 'filled' || instance.$primevue.config.inputVariant === 'filled'\n        }\n    ],\n    chipItem: ({ state, index }) => ['p-inputchips-chip-item', { 'p-focus': state.focusedIndex === index }],\n    pcChip: 'p-inputchips-chip',\n    chipIcon: 'p-inputchips-chip-icon',\n    inputItem: 'p-inputchips-input-item'\n};\n\nexport default BaseStyle.extend({\n    name: 'inputchips',\n    theme,\n    classes\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport InputChipsStyle from 'primevue/inputchips/style';\n\nexport default {\n    name: 'BaseInputChips',\n    extends: BaseComponent,\n    props: {\n        modelValue: {\n            type: Array,\n            default: null\n        },\n        max: {\n            type: Number,\n            default: null\n        },\n        separator: {\n            type: [String, Object],\n            default: null\n        },\n        addOnBlur: {\n            type: Boolean,\n            default: null\n        },\n        allowDuplicate: {\n            type: Boolean,\n            default: true\n        },\n        placeholder: {\n            type: String,\n            default: null\n        },\n        variant: {\n            type: String,\n            default: null\n        },\n        invalid: {\n            type: Boolean,\n            default: false\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        inputId: {\n            type: String,\n            default: null\n        },\n        inputClass: {\n            type: [String, Object],\n            default: null\n        },\n        inputStyle: {\n            type: Object,\n            default: null\n        },\n        inputProps: {\n            type: null,\n            default: null\n        },\n        removeTokenIcon: {\n            type: String,\n            default: undefined\n        },\n        chipIcon: {\n            type: String,\n            default: undefined\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        }\n    },\n    style: InputChipsStyle,\n    provide() {\n        return {\n            $pcInputChips: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <ul\n            ref=\"container\"\n            :class=\"cx('input')\"\n            tabindex=\"-1\"\n            role=\"listbox\"\n            aria-orientation=\"horizontal\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-label=\"ariaLabel\"\n            :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n            @click=\"onWrapperClick()\"\n            @focus=\"onContainerFocus\"\n            @blur=\"onContainerBlur\"\n            @keydown=\"onContainerKeyDown\"\n            v-bind=\"ptm('input')\"\n        >\n            <li\n                v-for=\"(val, i) of modelValue\"\n                :key=\"`${i}_${val}`\"\n                :id=\"id + '_inputchips_item_' + i\"\n                role=\"option\"\n                :class=\"cx('chipItem', { index: i })\"\n                :aria-label=\"val\"\n                :aria-selected=\"true\"\n                :aria-setsize=\"modelValue.length\"\n                :aria-posinset=\"i + 1\"\n                v-bind=\"ptm('chipItem')\"\n                :data-p-focused=\"focusedIndex === i\"\n            >\n                <slot name=\"chip\" :class=\"cx('pcChip')\" :index=\"i\" :value=\"val\" :removeCallback=\"(event) => removeOption(event, i)\">\n                    <!-- TODO: removetokenicon and removeTokenIcon  deprecated since v4.0. Use chipicon slot and chipIcon prop-->\n                    <Chip :class=\"cx('pcChip')\" :label=\"val\" :removeIcon=\"chipIcon || removeTokenIcon\" removable :unstyled=\"unstyled\" @remove=\"removeItem($event, i)\" :pt=\"ptm('pcChip')\">\n                        <template #removeicon>\n                            <slot :name=\"$slots.chipicon ? 'chipicon' : 'removetokenicon'\" :class=\"cx('chipIcon')\" :index=\"i\" :removeCallback=\"(event) => removeItem(event, i)\" />\n                        </template>\n                    </Chip>\n                </slot>\n            </li>\n            <li :class=\"cx('inputItem')\" role=\"option\" v-bind=\"ptm('inputItem')\">\n                <input\n                    ref=\"input\"\n                    :id=\"inputId\"\n                    type=\"text\"\n                    :class=\"inputClass\"\n                    :style=\"inputStyle\"\n                    :disabled=\"disabled || maxedOut\"\n                    :placeholder=\"placeholder\"\n                    :aria-invalid=\"invalid || undefined\"\n                    @focus=\"onFocus($event)\"\n                    @blur=\"onBlur($event)\"\n                    @input=\"onInput\"\n                    @keydown=\"onKeyDown($event)\"\n                    @paste=\"onPaste($event)\"\n                    v-bind=\"{ ...inputProps, ...ptm('inputItemField') }\"\n                />\n            </li>\n        </ul>\n    </div>\n</template>\n\n<script>\nimport { UniqueComponentId } from '@primevue/core/utils';\nimport Chip from 'primevue/chip';\nimport BaseInputChips from './BaseInputChips.vue';\n\nexport default {\n    name: 'InputChips',\n    extends: BaseInputChips,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'add', 'remove', 'focus', 'blur'],\n    data() {\n        return {\n            id: this.$attrs.id,\n            inputValue: null,\n            focused: false,\n            focusedIndex: null\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        }\n    },\n    mounted() {\n        console.warn('Deprecated since v4. Use AutoComplete component instead with its typeahead property.');\n        this.id = this.id || UniqueComponentId();\n    },\n    methods: {\n        onWrapperClick() {\n            this.$refs.input.focus();\n        },\n        onInput(event) {\n            this.inputValue = event.target.value;\n            this.focusedIndex = null;\n        },\n        onFocus(event) {\n            this.focused = true;\n            this.focusedIndex = null;\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.focused = false;\n            this.focusedIndex = null;\n\n            if (this.addOnBlur) {\n                this.addItem(event, event.target.value, false);\n            }\n\n            this.$emit('blur', event);\n        },\n        onKeyDown(event) {\n            const inputValue = event.target.value;\n\n            switch (event.code) {\n                case 'Backspace':\n                    if (inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n                        if (this.focusedIndex !== null) {\n                            this.removeItem(event, this.focusedIndex);\n                        } else this.removeItem(event, this.modelValue.length - 1);\n                    }\n\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    if (inputValue && inputValue.trim().length && !this.maxedOut) {\n                        this.addItem(event, inputValue, true);\n                    }\n\n                    break;\n\n                case 'ArrowLeft':\n                    if (inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n                        this.$refs.container.focus();\n                    }\n\n                    break;\n\n                case 'ArrowRight':\n                    event.stopPropagation();\n                    break;\n\n                default:\n                    if (this.separator) {\n                        if (this.separator === event.key || event.key.match(this.separator)) {\n                            this.addItem(event, inputValue, true);\n                        }\n                    }\n\n                    break;\n            }\n        },\n        onPaste(event) {\n            if (this.separator) {\n                let separator = this.separator.replace('\\\\n', '\\n').replace('\\\\r', '\\r').replace('\\\\t', '\\t');\n                let pastedData = (event.clipboardData || window['clipboardData']).getData('Text');\n\n                if (pastedData) {\n                    let value = this.modelValue || [];\n                    let pastedValues = pastedData.split(separator);\n\n                    pastedValues = pastedValues.filter((val) => this.allowDuplicate || value.indexOf(val) === -1);\n                    value = [...value, ...pastedValues];\n                    this.updateModel(event, value, true);\n                }\n            }\n        },\n        onContainerFocus() {\n            this.focused = true;\n        },\n        onContainerBlur() {\n            this.focusedIndex = -1;\n            this.focused = false;\n        },\n        onContainerKeyDown(event) {\n            switch (event.code) {\n                case 'ArrowLeft':\n                    this.onArrowLeftKeyOn(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKeyOn(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKeyOn(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowLeftKeyOn() {\n            if (this.inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n                this.focusedIndex = this.focusedIndex === null ? this.modelValue.length - 1 : this.focusedIndex - 1;\n                if (this.focusedIndex < 0) this.focusedIndex = 0;\n            }\n        },\n        onArrowRightKeyOn() {\n            if (this.inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n                if (this.focusedIndex === this.modelValue.length - 1) {\n                    this.focusedIndex = null;\n                    this.$refs.input.focus();\n                } else {\n                    this.focusedIndex++;\n                }\n            }\n        },\n        onBackspaceKeyOn(event) {\n            if (this.focusedIndex !== null) {\n                this.removeItem(event, this.focusedIndex);\n            }\n        },\n        updateModel(event, value, preventDefault) {\n            this.$emit('update:modelValue', value);\n            this.$emit('add', {\n                originalEvent: event,\n                value: value\n            });\n            this.$refs.input.value = '';\n            this.inputValue = '';\n\n            setTimeout(() => {\n                this.maxedOut && (this.focused = false);\n            }, 0);\n\n            if (preventDefault) {\n                event.preventDefault();\n            }\n        },\n        addItem(event, item, preventDefault) {\n            if (item && item.trim().length) {\n                let value = this.modelValue ? [...this.modelValue] : [];\n\n                if (this.allowDuplicate || value.indexOf(item) === -1) {\n                    value.push(item);\n                    this.updateModel(event, value, preventDefault);\n                }\n            }\n        },\n        removeItem(event, index) {\n            if (this.disabled) {\n                return;\n            }\n\n            let values = [...this.modelValue];\n            const removedItem = values.splice(index, 1);\n\n            this.focusedIndex = null;\n            this.$refs.input.focus();\n            this.$emit('update:modelValue', values);\n            this.$emit('remove', {\n                originalEvent: event,\n                value: removedItem\n            });\n        }\n    },\n    computed: {\n        maxedOut() {\n            return this.max && this.modelValue && this.max === this.modelValue.length;\n        },\n        focusedOptionId() {\n            return this.focusedIndex !== null ? `${this.id}_inputchips_item_${this.focusedIndex}` : null;\n        }\n    },\n    components: {\n        Chip\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <ul\n            ref=\"container\"\n            :class=\"cx('input')\"\n            tabindex=\"-1\"\n            role=\"listbox\"\n            aria-orientation=\"horizontal\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-label=\"ariaLabel\"\n            :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n            @click=\"onWrapperClick()\"\n            @focus=\"onContainerFocus\"\n            @blur=\"onContainerBlur\"\n            @keydown=\"onContainerKeyDown\"\n            v-bind=\"ptm('input')\"\n        >\n            <li\n                v-for=\"(val, i) of modelValue\"\n                :key=\"`${i}_${val}`\"\n                :id=\"id + '_inputchips_item_' + i\"\n                role=\"option\"\n                :class=\"cx('chipItem', { index: i })\"\n                :aria-label=\"val\"\n                :aria-selected=\"true\"\n                :aria-setsize=\"modelValue.length\"\n                :aria-posinset=\"i + 1\"\n                v-bind=\"ptm('chipItem')\"\n                :data-p-focused=\"focusedIndex === i\"\n            >\n                <slot name=\"chip\" :class=\"cx('pcChip')\" :index=\"i\" :value=\"val\" :removeCallback=\"(event) => removeOption(event, i)\">\n                    <!-- TODO: removetokenicon and removeTokenIcon  deprecated since v4.0. Use chipicon slot and chipIcon prop-->\n                    <Chip :class=\"cx('pcChip')\" :label=\"val\" :removeIcon=\"chipIcon || removeTokenIcon\" removable :unstyled=\"unstyled\" @remove=\"removeItem($event, i)\" :pt=\"ptm('pcChip')\">\n                        <template #removeicon>\n                            <slot :name=\"$slots.chipicon ? 'chipicon' : 'removetokenicon'\" :class=\"cx('chipIcon')\" :index=\"i\" :removeCallback=\"(event) => removeItem(event, i)\" />\n                        </template>\n                    </Chip>\n                </slot>\n            </li>\n            <li :class=\"cx('inputItem')\" role=\"option\" v-bind=\"ptm('inputItem')\">\n                <input\n                    ref=\"input\"\n                    :id=\"inputId\"\n                    type=\"text\"\n                    :class=\"inputClass\"\n                    :style=\"inputStyle\"\n                    :disabled=\"disabled || maxedOut\"\n                    :placeholder=\"placeholder\"\n                    :aria-invalid=\"invalid || undefined\"\n                    @focus=\"onFocus($event)\"\n                    @blur=\"onBlur($event)\"\n                    @input=\"onInput\"\n                    @keydown=\"onKeyDown($event)\"\n                    @paste=\"onPaste($event)\"\n                    v-bind=\"{ ...inputProps, ...ptm('inputItemField') }\"\n                />\n            </li>\n        </ul>\n    </div>\n</template>\n\n<script>\nimport { UniqueComponentId } from '@primevue/core/utils';\nimport Chip from 'primevue/chip';\nimport BaseInputChips from './BaseInputChips.vue';\n\nexport default {\n    name: 'InputChips',\n    extends: BaseInputChips,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'add', 'remove', 'focus', 'blur'],\n    data() {\n        return {\n            id: this.$attrs.id,\n            inputValue: null,\n            focused: false,\n            focusedIndex: null\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        }\n    },\n    mounted() {\n        console.warn('Deprecated since v4. Use AutoComplete component instead with its typeahead property.');\n        this.id = this.id || UniqueComponentId();\n    },\n    methods: {\n        onWrapperClick() {\n            this.$refs.input.focus();\n        },\n        onInput(event) {\n            this.inputValue = event.target.value;\n            this.focusedIndex = null;\n        },\n        onFocus(event) {\n            this.focused = true;\n            this.focusedIndex = null;\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.focused = false;\n            this.focusedIndex = null;\n\n            if (this.addOnBlur) {\n                this.addItem(event, event.target.value, false);\n            }\n\n            this.$emit('blur', event);\n        },\n        onKeyDown(event) {\n            const inputValue = event.target.value;\n\n            switch (event.code) {\n                case 'Backspace':\n                    if (inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n                        if (this.focusedIndex !== null) {\n                            this.removeItem(event, this.focusedIndex);\n                        } else this.removeItem(event, this.modelValue.length - 1);\n                    }\n\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    if (inputValue && inputValue.trim().length && !this.maxedOut) {\n                        this.addItem(event, inputValue, true);\n                    }\n\n                    break;\n\n                case 'ArrowLeft':\n                    if (inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n                        this.$refs.container.focus();\n                    }\n\n                    break;\n\n                case 'ArrowRight':\n                    event.stopPropagation();\n                    break;\n\n                default:\n                    if (this.separator) {\n                        if (this.separator === event.key || event.key.match(this.separator)) {\n                            this.addItem(event, inputValue, true);\n                        }\n                    }\n\n                    break;\n            }\n        },\n        onPaste(event) {\n            if (this.separator) {\n                let separator = this.separator.replace('\\\\n', '\\n').replace('\\\\r', '\\r').replace('\\\\t', '\\t');\n                let pastedData = (event.clipboardData || window['clipboardData']).getData('Text');\n\n                if (pastedData) {\n                    let value = this.modelValue || [];\n                    let pastedValues = pastedData.split(separator);\n\n                    pastedValues = pastedValues.filter((val) => this.allowDuplicate || value.indexOf(val) === -1);\n                    value = [...value, ...pastedValues];\n                    this.updateModel(event, value, true);\n                }\n            }\n        },\n        onContainerFocus() {\n            this.focused = true;\n        },\n        onContainerBlur() {\n            this.focusedIndex = -1;\n            this.focused = false;\n        },\n        onContainerKeyDown(event) {\n            switch (event.code) {\n                case 'ArrowLeft':\n                    this.onArrowLeftKeyOn(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKeyOn(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKeyOn(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowLeftKeyOn() {\n            if (this.inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n                this.focusedIndex = this.focusedIndex === null ? this.modelValue.length - 1 : this.focusedIndex - 1;\n                if (this.focusedIndex < 0) this.focusedIndex = 0;\n            }\n        },\n        onArrowRightKeyOn() {\n            if (this.inputValue.length === 0 && this.modelValue && this.modelValue.length > 0) {\n                if (this.focusedIndex === this.modelValue.length - 1) {\n                    this.focusedIndex = null;\n                    this.$refs.input.focus();\n                } else {\n                    this.focusedIndex++;\n                }\n            }\n        },\n        onBackspaceKeyOn(event) {\n            if (this.focusedIndex !== null) {\n                this.removeItem(event, this.focusedIndex);\n            }\n        },\n        updateModel(event, value, preventDefault) {\n            this.$emit('update:modelValue', value);\n            this.$emit('add', {\n                originalEvent: event,\n                value: value\n            });\n            this.$refs.input.value = '';\n            this.inputValue = '';\n\n            setTimeout(() => {\n                this.maxedOut && (this.focused = false);\n            }, 0);\n\n            if (preventDefault) {\n                event.preventDefault();\n            }\n        },\n        addItem(event, item, preventDefault) {\n            if (item && item.trim().length) {\n                let value = this.modelValue ? [...this.modelValue] : [];\n\n                if (this.allowDuplicate || value.indexOf(item) === -1) {\n                    value.push(item);\n                    this.updateModel(event, value, preventDefault);\n                }\n            }\n        },\n        removeItem(event, index) {\n            if (this.disabled) {\n                return;\n            }\n\n            let values = [...this.modelValue];\n            const removedItem = values.splice(index, 1);\n\n            this.focusedIndex = null;\n            this.$refs.input.focus();\n            this.$emit('update:modelValue', values);\n            this.$emit('remove', {\n                originalEvent: event,\n                value: removedItem\n            });\n        }\n    },\n    computed: {\n        maxedOut() {\n            return this.max && this.modelValue && this.max === this.modelValue.length;\n        },\n        focusedOptionId() {\n            return this.focusedIndex !== null ? `${this.id}_inputchips_item_${this.focusedIndex}` : null;\n        }\n    },\n    components: {\n        Chip\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["theme", "_ref", "dt", "concat", "classes", "root", "_ref2", "instance", "props", "disabled", "invalid", "focused", "modelValue", "length", "inputValue", "input", "_ref3", "variant", "$primevue", "config", "inputStyle", "inputVariant", "chipItem", "_ref4", "state", "index", "focusedIndex", "pcChip", "chipIcon", "inputItem", "BaseStyle", "extend", "name", "name", "BaseComponent", "props", "modelValue", "type", "Array", "max", "Number", "separator", "String", "Object", "addOnBlur", "Boolean", "allowDuplicate", "placeholder", "variant", "invalid", "disabled", "inputId", "inputClass", "inputStyle", "inputProps", "removeTokenIcon", "undefined", "chipIcon", "ariaLabelledby", "ariaLabel", "style", "InputChipsStyle", "provide", "$pcInputChips", "$parentInstance", "script", "BaseInputChips", "inheritAttrs", "emits", "data", "id", "$attrs", "inputValue", "focused", "focusedIndex", "watch", "$attrsId", "newValue", "UniqueComponentId", "mounted", "console", "warn", "methods", "onWrapperClick", "$refs", "input", "focus", "onInput", "event", "target", "value", "onFocus", "$emit", "onBlur", "addItem", "onKeyDown", "code", "length", "removeItem", "trim", "maxedOut", "container", "stopPropagation", "key", "match", "onPaste", "_this", "replace", "pastedData", "clipboardData", "window", "getData", "pastedValues", "split", "filter", "val", "indexOf", "concat", "_toConsumableArray", "updateModel", "onContainerFocus", "onContainerBlur", "onContainerKeyDown", "onArrowLeftKeyOn", "onArrowRightKeyOn", "onBackspaceKeyOn", "preventDefault", "_this2", "originalEvent", "setTimeout", "item", "push", "index", "values", "removedItem", "splice", "computed", "focusedOptionId", "components", "Chip", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "ptmi", "_createElementVNode", "ref", "tabindex", "role", "$data", "$options", "onClick", "apply", "arguments", "onKeydown", "ptm", "_Fragment", "_renderList", "i", "_renderSlot", "$slots", "removeCallback", "_createVNode", "_component_Chip", "label", "removeIcon", "removable", "unstyled", "onRemove", "$event", "pt", "removeicon", "chipicon", "_cache", "_objectSpread", "_hoisted_3"]
}
