{
  "version": 3,
  "sources": ["../../src/animateonscroll/style/AnimateOnScrollStyle.js", "../../src/animateonscroll/BaseAnimateOnScroll.js", "../../src/animateonscroll/AnimateOnScroll.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nexport default BaseStyle.extend({\n    name: 'animateonscroll-directive'\n});\n", "import BaseDirective from '@primevue/core/basedirective';\nimport AnimateOnScrollStyle from 'primevue/animateonscroll/style';\n\nconst BaseAnimateOnScroll = BaseDirective.extend({\n    style: AnimateOnScrollStyle\n});\n\nexport default BaseAnimateOnScroll;\n", "import { addClass, removeClass } from '@primeuix/utils/dom';\nimport BaseAnimateOnScroll from './BaseAnimateOnScroll';\n\nconst AnimateOnScroll = BaseAnimateOnScroll.extend('animateonscroll', {\n    created() {\n        this.$value = this.$value || {};\n        this.$el.style.opacity = this.$value.enterClass ? '0' : '';\n    },\n    mounted() {\n        this.$el.setAttribute('data-pd-animateonscroll', true);\n\n        this.bindIntersectionObserver();\n    },\n    unmounted() {\n        this.unbindAnimationEvents();\n        this.unbindIntersectionObserver();\n    },\n    observer: undefined,\n    resetObserver: undefined,\n    isObserverActive: false,\n    animationState: undefined,\n    animationEndListener: undefined,\n    methods: {\n        bindAnimationEvents() {\n            if (!this.animationEndListener) {\n                this.animationEndListener = () => {\n                    removeClass(this.$el, [this.$value.enterClass, this.$value.leaveClass]);\n                    !this.$modifiers.once && this.resetObserver.observe(this.$el);\n                    this.unbindAnimationEvents();\n                };\n\n                this.$el.addEventListener('animationend', this.animationEndListener);\n            }\n        },\n        bindIntersectionObserver() {\n            const { root, rootMargin, threshold = 0.5 } = this.$value;\n            const options = { root, rootMargin, threshold };\n\n            // States\n            this.observer = new IntersectionObserver(([entry]) => {\n                if (this.isObserverActive) {\n                    if (entry.boundingClientRect.top > 0) {\n                        entry.isIntersecting ? this.enter() : this.leave();\n                    }\n                } else if (entry.isIntersecting) {\n                    this.enter();\n                }\n\n                this.isObserverActive = true;\n            }, options);\n\n            setTimeout(() => this.observer.observe(this.$el), 0);\n\n            // Reset\n            this.resetObserver = new IntersectionObserver(\n                ([entry]) => {\n                    if (entry.boundingClientRect.top > 0 && !entry.isIntersecting) {\n                        this.$el.style.opacity = this.$value.enterClass ? '0' : '';\n                        removeClass(this.$el, [this.$value.enterClass, this.$value.leaveClass]);\n\n                        this.resetObserver.unobserve(this.$el);\n                    }\n\n                    this.animationState = undefined;\n                },\n                { ...options, threshold: 0 }\n            );\n        },\n        enter() {\n            if (this.animationState !== 'enter' && this.$value.enterClass) {\n                this.$el.style.opacity = '';\n                removeClass(this.$el, this.$value.leaveClass);\n                addClass(this.$el, this.$value.enterClass);\n\n                this.$modifiers.once && this.unbindIntersectionObserver(this.$el);\n\n                this.bindAnimationEvents();\n                this.animationState = 'enter';\n            }\n        },\n        leave() {\n            if (this.animationState !== 'leave' && this.$value.leaveClass) {\n                this.$el.style.opacity = this.$value.enterClass ? '0' : '';\n                removeClass(this.$el, this.$value.enterClass);\n                addClass(this.$el, this.$value.leaveClass);\n\n                this.bindAnimationEvents();\n                this.animationState = 'leave';\n            }\n        },\n        unbindAnimationEvents() {\n            if (this.animationEndListener) {\n                this.$el.removeEventListener('animationend', this.animationEndListener);\n                this.animationEndListener = undefined;\n            }\n        },\n        unbindIntersectionObserver() {\n            this.observer?.unobserve(this.$el);\n            this.resetObserver?.unobserve(this.$el);\n            this.isObserverActive = false;\n        }\n    }\n});\n\nexport default AnimateOnScroll;\n"],
  "mappings": "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",
  "names": ["BaseStyle", "extend", "name", "BaseAnimateOnScroll", "BaseDirective", "extend", "style", "AnimateOnScrollStyle", "AnimateOnScroll", "created", "$value", "$el", "opacity", "enterClass", "mounted", "setAttribute", "bindIntersectionObserver", "unmounted", "unbindAnimationEvents", "unbindIntersectionObserver", "observer", "undefined", "resetObserver", "isObserverActive", "animationState", "animationEndListener", "methods", "bindAnimationEvents", "_this", "removeClass", "leaveClass", "$modifiers", "once", "observe", "addEventListener", "_this2", "_this$$value", "root", "rootMargin", "_this$$value$threshol", "threshold", "options", "IntersectionObserver", "_ref", "_ref2", "_slicedToArray", "entry", "boundingClientRect", "top", "isIntersecting", "enter", "leave", "setTimeout", "_ref3", "_ref4", "unobserve", "_objectSpread", "addClass", "removeEventListener", "_this$observer", "_this$resetObserver"]
}
