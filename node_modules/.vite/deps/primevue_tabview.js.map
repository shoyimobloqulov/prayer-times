{
  "version": 3,
  "sources": ["../../src/tabview/style/TabViewStyle.js", "../../src/tabview/BaseTabView.vue", "../../src/tabview/TabView.vue", "../../src/tabview/TabView.vue?vue&type=template&id=0ec101ee&lang.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nconst theme = ({ dt }) => `\n.p-tabview-tablist-container {\n    position: relative;\n}\n\n.p-tabview-scrollable > .p-tabview-tablist-container {\n    overflow: hidden;\n}\n\n.p-tabview-tablist-scroll-container {\n    overflow-x: auto;\n    overflow-y: hidden;\n    scroll-behavior: smooth;\n    scrollbar-width: none;\n    overscroll-behavior: contain auto;\n}\n\n.p-tabview-tablist-scroll-container::-webkit-scrollbar {\n    display: none;\n}\n\n.p-tabview-tablist {\n    display: flex;\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n    flex: 1 1 auto;\n    background: ${dt('tabview.tab.list.background')};\n    border: 1px solid ${dt('tabview.tab.list.border.color')};\n    border-width: 0 0 1px 0;\n    position: relative;\n}\n\n.p-tabview-tab-header {\n    cursor: pointer;\n    user-select: none;\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    position: relative;\n    overflow: hidden;\n    border-style: solid;\n    border-width: 0 0 1px 0;\n    border-color: transparent transparent ${dt('tabview.tab.border.color')} transparent;\n    color: ${dt('tabview.tab.color')};\n    padding: 1rem 1.125rem;\n    font-weight: 600;\n    border-top-right-radius: ${dt('border.radius.md')};\n    border-top-left-radius: ${dt('border.radius.md')};\n    transition: color ${dt('tabview.transition.duration')}, outline-color ${dt('tabview.transition.duration')};\n    margin: 0 0 -1px 0;\n    outline-color: transparent;\n}\n\n.p-tabview-tablist-item:not(.p-disabled) .p-tabview-tab-header:focus-visible {\n    outline: ${dt('focus.ring.width')} ${dt('focus.ring.style')} ${dt('focus.ring.color')};\n    outline-offset: -1px;\n}\n\n.p-tabview-tablist-item:not(.p-highlight):not(.p-disabled):hover > .p-tabview-tab-header {\n    color: ${dt('tabview.tab.hover.color')};\n}\n\n.p-tabview-tablist-item.p-highlight > .p-tabview-tab-header {\n    color: ${dt('tabview.tab.active.color')};\n}\n\n.p-tabview-tab-title {\n    line-height: 1;\n    white-space: nowrap;\n}\n\n.p-tabview-next-button,\n.p-tabview-prev-button {\n    position: absolute;\n    top: 0;\n    margin: 0;\n    padding: 0;\n    z-index: 2;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: ${dt('tabview.nav.button.background')};\n    color: ${dt('tabview.nav.button.color')};\n    width: 2.5rem;\n    border-radius: 0;\n    outline-color: transparent;\n    transition: color ${dt('tabview.transition.duration')}, outline-color ${dt('tabview.transition.duration')};\n    box-shadow: ${dt('tabview.nav.button.shadow')};\n    border: none;\n    cursor: pointer;\n    user-select: none;\n}\n\n.p-tabview-next-button:focus-visible,\n.p-tabview-prev-button:focus-visible {\n    outline: ${dt('focus.ring.width')} ${dt('focus.ring.style')} ${dt('focus.ring.color')};\n    outline-offset: ${dt('focus.ring.offset')};\n}\n\n.p-tabview-next-button:hover,\n.p-tabview-prev-button:hover {\n    color: ${dt('tabview.nav.button.hover.color')};\n}\n\n.p-tabview-prev-button {\n    left: 0;\n}\n\n.p-tabview-next-button {\n    right: 0;\n}\n\n.p-tabview-panels {\n    background: ${dt('tabview.tab.panel.background')};\n    color: ${dt('tabview.tab.panel.color')};\n    padding: 0.875rem 1.125rem 1.125rem 1.125rem;\n}\n\n.p-tabview-ink-bar {\n    z-index: 1;\n    display: block;\n    position: absolute;\n    bottom: -1px;\n    height: 1px;\n    background: ${dt('tabview.tab.active.border.color')};\n    transition: 250ms cubic-bezier(0.35, 0, 0.25, 1);\n}\n`;\n\nconst classes = {\n    root: ({ props }) => [\n        'p-tabview p-component',\n        {\n            'p-tabview-scrollable': props.scrollable\n        }\n    ],\n    navContainer: 'p-tabview-tablist-container',\n    prevButton: 'p-tabview-prev-button',\n    navContent: 'p-tabview-tablist-scroll-container',\n    nav: 'p-tabview-tablist',\n    tab: {\n        header: ({ instance, tab, index }) => [\n            'p-tabview-tablist-item',\n            instance.getTabProp(tab, 'headerClass'),\n            {\n                'p-tabview-tablist-item-active': instance.d_activeIndex === index,\n                'p-disabled': instance.getTabProp(tab, 'disabled')\n            }\n        ],\n        headerAction: 'p-tabview-tab-header',\n        headerTitle: 'p-tabview-tab-title',\n        content: ({ instance, tab }) => ['p-tabview-panel', instance.getTabProp(tab, 'contentClass')]\n    },\n    inkbar: 'p-tabview-ink-bar',\n    nextButton: 'p-tabview-next-button',\n    panelContainer: 'p-tabview-panels'\n};\n\nexport default BaseStyle.extend({\n    name: 'tabview',\n    theme,\n    classes\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TabViewStyle from 'primevue/tabview/style';\n\nexport default {\n    name: 'BaseTabView',\n    extends: BaseComponent,\n    props: {\n        activeIndex: {\n            type: Number,\n            default: 0\n        },\n        lazy: {\n            type: Boolean,\n            default: false\n        },\n        scrollable: {\n            type: Boolean,\n            default: false\n        },\n        tabindex: {\n            type: Number,\n            default: 0\n        },\n        selectOnFocus: {\n            type: Boolean,\n            default: false\n        },\n        prevButtonProps: {\n            type: null,\n            default: null\n        },\n        nextButtonProps: {\n            type: null,\n            default: null\n        },\n        prevIcon: {\n            type: String,\n            default: undefined\n        },\n        nextIcon: {\n            type: String,\n            default: undefined\n        }\n    },\n    style: TabViewStyle,\n    provide() {\n        return {\n            $pcTabs: undefined, // Backwards compatible to prevent <TabPanel> component from breaking\n            $pcTabView: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" role=\"tablist\" v-bind=\"ptmi('root')\">\n        <div :class=\"cx('navContainer')\" v-bind=\"ptm('navContainer')\">\n            <button\n                v-if=\"scrollable && !isPrevButtonDisabled\"\n                ref=\"prevBtn\"\n                v-ripple\n                type=\"button\"\n                :class=\"cx('prevButton')\"\n                :tabindex=\"tabindex\"\n                :aria-label=\"prevButtonAriaLabel\"\n                @click=\"onPrevButtonClick\"\n                v-bind=\"{ ...prevButtonProps, ...ptm('prevButton') }\"\n                data-pc-group-section=\"navbutton\"\n            >\n                <slot name=\"previcon\">\n                    <component :is=\"prevIcon ? 'span' : 'ChevronLeftIcon'\" aria-hidden=\"true\" :class=\"prevIcon\" v-bind=\"ptm('prevIcon')\" />\n                </slot>\n            </button>\n            <div ref=\"content\" :class=\"cx('navContent')\" @scroll=\"onScroll\" v-bind=\"ptm('navContent')\">\n                <ul ref=\"nav\" :class=\"cx('nav')\" v-bind=\"ptm('nav')\">\n                    <li\n                        v-for=\"(tab, index) of tabs\"\n                        :key=\"getKey(tab, index)\"\n                        :style=\"getTabProp(tab, 'headerStyle')\"\n                        :class=\"cx('tab.header', { tab, index })\"\n                        role=\"presentation\"\n                        v-bind=\"{ ...getTabProp(tab, 'headerProps'), ...getTabPT(tab, 'root', index), ...getTabPT(tab, 'header', index) }\"\n                        data-pc-name=\"tabpanel\"\n                        :data-p-active=\"d_activeIndex === index\"\n                        :data-p-disabled=\"getTabProp(tab, 'disabled')\"\n                        :data-pc-index=\"index\"\n                    >\n                        <a\n                            :id=\"getTabHeaderActionId(index)\"\n                            v-ripple\n                            :class=\"cx('tab.headerAction')\"\n                            :tabindex=\"getTabProp(tab, 'disabled') || !isTabActive(index) ? -1 : tabindex\"\n                            role=\"tab\"\n                            :aria-disabled=\"getTabProp(tab, 'disabled')\"\n                            :aria-selected=\"isTabActive(index)\"\n                            :aria-controls=\"getTabContentId(index)\"\n                            @click=\"onTabClick($event, tab, index)\"\n                            @keydown=\"onTabKeyDown($event, tab, index)\"\n                            v-bind=\"{ ...getTabProp(tab, 'headerActionProps'), ...getTabPT(tab, 'headerAction', index) }\"\n                        >\n                            <span v-if=\"tab.props && tab.props.header\" :class=\"cx('tab.headerTitle')\" v-bind=\"getTabPT(tab, 'headerTitle', index)\">{{ tab.props.header }}</span>\n                            <component v-if=\"tab.children && tab.children.header\" :is=\"tab.children.header\"></component>\n                        </a>\n                    </li>\n                    <li ref=\"inkbar\" :class=\"cx('inkbar')\" role=\"presentation\" aria-hidden=\"true\" v-bind=\"ptm('inkbar')\"></li>\n                </ul>\n            </div>\n            <button\n                v-if=\"scrollable && !isNextButtonDisabled\"\n                ref=\"nextBtn\"\n                v-ripple\n                type=\"button\"\n                :class=\"cx('nextButton')\"\n                :tabindex=\"tabindex\"\n                :aria-label=\"nextButtonAriaLabel\"\n                @click=\"onNextButtonClick\"\n                v-bind=\"{ ...nextButtonProps, ...ptm('nextButton') }\"\n                data-pc-group-section=\"navbutton\"\n            >\n                <slot name=\"nexticon\">\n                    <component :is=\"nextIcon ? 'span' : 'ChevronRightIcon'\" aria-hidden=\"true\" :class=\"nextIcon\" v-bind=\"ptm('nextIcon')\" />\n                </slot>\n            </button>\n        </div>\n        <div :class=\"cx('panelContainer')\" v-bind=\"ptm('panelContainer')\">\n            <template v-for=\"(tab, index) of tabs\" :key=\"getKey(tab, index)\">\n                <div\n                    v-if=\"lazy ? isTabActive(index) : true\"\n                    v-show=\"lazy ? true : isTabActive(index)\"\n                    :id=\"getTabContentId(index)\"\n                    :style=\"getTabProp(tab, 'contentStyle')\"\n                    :class=\"cx('tab.content', { tab })\"\n                    role=\"tabpanel\"\n                    :aria-labelledby=\"getTabHeaderActionId(index)\"\n                    v-bind=\"{ ...getTabProp(tab, 'contentProps'), ...getTabPT(tab, 'root', index), ...getTabPT(tab, 'content', index) }\"\n                    data-pc-name=\"tabpanel\"\n                    :data-pc-index=\"index\"\n                    :data-p-active=\"d_activeIndex === index\"\n                >\n                    <component :is=\"tab\"></component>\n                </div>\n            </template>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { UniqueComponentId } from '@primevue/core/utils';\nimport { getWidth, getAttribute, findSingle, focus, getOffset } from '@primeuix/utils/dom';\nimport ChevronLeftIcon from '@primevue/icons/chevronleft';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport Ripple from 'primevue/ripple';\nimport { mergeProps } from 'vue';\nimport BaseTabView from './BaseTabView.vue';\n\nexport default {\n    name: 'TabView',\n    extends: BaseTabView,\n    inheritAttrs: false,\n    emits: ['update:activeIndex', 'tab-change', 'tab-click'],\n    data() {\n        return {\n            id: this.$attrs.id,\n            d_activeIndex: this.activeIndex,\n            isPrevButtonDisabled: true,\n            isNextButtonDisabled: false\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        activeIndex(newValue) {\n            this.d_activeIndex = newValue;\n\n            this.scrollInView({ index: newValue });\n        }\n    },\n    mounted() {\n        console.warn('Deprecated since v4. Use Tabs component instead.');\n\n        this.id = this.id || UniqueComponentId();\n        this.updateInkBar();\n        this.scrollable && this.updateButtonState();\n    },\n    updated() {\n        this.updateInkBar();\n        this.scrollable && this.updateButtonState();\n    },\n    methods: {\n        isTabPanel(child) {\n            return child.type.name === 'TabPanel';\n        },\n        isTabActive(index) {\n            return this.d_activeIndex === index;\n        },\n        getTabProp(tab, name) {\n            return tab.props ? tab.props[name] : undefined;\n        },\n        getKey(tab, index) {\n            return this.getTabProp(tab, 'header') || index;\n        },\n        getTabHeaderActionId(index) {\n            return `${this.id}_${index}_header_action`;\n        },\n        getTabContentId(index) {\n            return `${this.id}_${index}_content`;\n        },\n        getTabPT(tab, key, index) {\n            const count = this.tabs.length;\n            const tabMetaData = {\n                props: tab.props,\n                parent: {\n                    instance: this,\n                    props: this.$props,\n                    state: this.$data\n                },\n                context: {\n                    index,\n                    count,\n                    first: index === 0,\n                    last: index === count - 1,\n                    active: this.isTabActive(index)\n                }\n            };\n\n            return mergeProps(this.ptm(`tabpanel.${key}`, { tabpanel: tabMetaData }), this.ptm(`tabpanel.${key}`, tabMetaData), this.ptmo(this.getTabProp(tab, 'pt'), key, tabMetaData));\n        },\n        onScroll(event) {\n            this.scrollable && this.updateButtonState();\n\n            event.preventDefault();\n        },\n        onPrevButtonClick() {\n            const content = this.$refs.content;\n            const width = getWidth(content);\n            const pos = content.scrollLeft - width;\n\n            content.scrollLeft = pos <= 0 ? 0 : pos;\n        },\n        onNextButtonClick() {\n            const content = this.$refs.content;\n            const width = getWidth(content) - this.getVisibleButtonWidths();\n            const pos = content.scrollLeft + width;\n            const lastPos = content.scrollWidth - width;\n\n            content.scrollLeft = pos >= lastPos ? lastPos : pos;\n        },\n        onTabClick(event, tab, index) {\n            this.changeActiveIndex(event, tab, index);\n            this.$emit('tab-click', { originalEvent: event, index });\n        },\n        onTabKeyDown(event, tab, index) {\n            switch (event.code) {\n                case 'ArrowLeft':\n                    this.onTabArrowLeftKey(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onTabArrowRightKey(event);\n                    break;\n\n                case 'Home':\n                    this.onTabHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onTabEndKey(event);\n                    break;\n\n                case 'PageDown':\n                    this.onPageDownKey(event);\n                    break;\n\n                case 'PageUp':\n                    this.onPageUpKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    this.onTabEnterKey(event, tab, index);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onTabArrowRightKey(event) {\n            const nextHeaderAction = this.findNextHeaderAction(event.target.parentElement);\n\n            nextHeaderAction ? this.changeFocusedTab(event, nextHeaderAction) : this.onTabHomeKey(event);\n            event.preventDefault();\n        },\n        onTabArrowLeftKey(event) {\n            const prevHeaderAction = this.findPrevHeaderAction(event.target.parentElement);\n\n            prevHeaderAction ? this.changeFocusedTab(event, prevHeaderAction) : this.onTabEndKey(event);\n            event.preventDefault();\n        },\n        onTabHomeKey(event) {\n            const firstHeaderAction = this.findFirstHeaderAction();\n\n            this.changeFocusedTab(event, firstHeaderAction);\n            event.preventDefault();\n        },\n        onTabEndKey(event) {\n            const lastHeaderAction = this.findLastHeaderAction();\n\n            this.changeFocusedTab(event, lastHeaderAction);\n            event.preventDefault();\n        },\n        onPageDownKey(event) {\n            this.scrollInView({ index: this.$refs.nav.children.length - 2 });\n            event.preventDefault();\n        },\n        onPageUpKey(event) {\n            this.scrollInView({ index: 0 });\n            event.preventDefault();\n        },\n        onTabEnterKey(event, tab, index) {\n            this.changeActiveIndex(event, tab, index);\n\n            event.preventDefault();\n        },\n        findNextHeaderAction(tabElement, selfCheck = false) {\n            const headerElement = selfCheck ? tabElement : tabElement.nextElementSibling;\n\n            return headerElement\n                ? getAttribute(headerElement, 'data-p-disabled') || getAttribute(headerElement, 'data-pc-section') === 'inkbar'\n                    ? this.findNextHeaderAction(headerElement)\n                    : findSingle(headerElement, '[data-pc-section=\"headeraction\"]')\n                : null;\n        },\n        findPrevHeaderAction(tabElement, selfCheck = false) {\n            const headerElement = selfCheck ? tabElement : tabElement.previousElementSibling;\n\n            return headerElement\n                ? getAttribute(headerElement, 'data-p-disabled') || getAttribute(headerElement, 'data-pc-section') === 'inkbar'\n                    ? this.findPrevHeaderAction(headerElement)\n                    : findSingle(headerElement, '[data-pc-section=\"headeraction\"]')\n                : null;\n        },\n        findFirstHeaderAction() {\n            return this.findNextHeaderAction(this.$refs.nav.firstElementChild, true);\n        },\n        findLastHeaderAction() {\n            return this.findPrevHeaderAction(this.$refs.nav.lastElementChild, true);\n        },\n        changeActiveIndex(event, tab, index) {\n            if (!this.getTabProp(tab, 'disabled') && this.d_activeIndex !== index) {\n                this.d_activeIndex = index;\n\n                this.$emit('update:activeIndex', index);\n                this.$emit('tab-change', { originalEvent: event, index });\n\n                this.scrollInView({ index });\n            }\n        },\n        changeFocusedTab(event, element) {\n            if (element) {\n                focus(element);\n                this.scrollInView({ element });\n\n                if (this.selectOnFocus) {\n                    const index = parseInt(element.parentElement.dataset.pcIndex, 10);\n                    const tab = this.tabs[index];\n\n                    this.changeActiveIndex(event, tab, index);\n                }\n            }\n        },\n        scrollInView({ element, index = -1 }) {\n            const currentElement = element || this.$refs.nav.children[index];\n\n            if (currentElement) {\n                currentElement.scrollIntoView && currentElement.scrollIntoView({ block: 'nearest' });\n            }\n        },\n        updateInkBar() {\n            let tabHeader = this.$refs.nav.children[this.d_activeIndex];\n\n            this.$refs.inkbar.style.width = getWidth(tabHeader) + 'px';\n            this.$refs.inkbar.style.left = getOffset(tabHeader).left - getOffset(this.$refs.nav).left + 'px';\n        },\n        updateButtonState() {\n            const content = this.$refs.content;\n            const { scrollLeft, scrollWidth } = content;\n            const width = getWidth(content);\n\n            this.isPrevButtonDisabled = scrollLeft === 0;\n            this.isNextButtonDisabled = parseInt(scrollLeft) === scrollWidth - width;\n        },\n        getVisibleButtonWidths() {\n            const { prevBtn, nextBtn } = this.$refs;\n\n            return [prevBtn, nextBtn].reduce((acc, el) => (el ? acc + getWidth(el) : acc), 0);\n        }\n    },\n    computed: {\n        tabs() {\n            return this.$slots.default().reduce((tabs, child) => {\n                if (this.isTabPanel(child)) {\n                    tabs.push(child);\n                } else if (child.children && child.children instanceof Array) {\n                    child.children.forEach((nestedChild) => {\n                        if (this.isTabPanel(nestedChild)) {\n                            tabs.push(nestedChild);\n                        }\n                    });\n                }\n\n                return tabs;\n            }, []);\n        },\n        prevButtonAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.previous : undefined;\n        },\n        nextButtonAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.next : undefined;\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        ChevronLeftIcon,\n        ChevronRightIcon\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" role=\"tablist\" v-bind=\"ptmi('root')\">\n        <div :class=\"cx('navContainer')\" v-bind=\"ptm('navContainer')\">\n            <button\n                v-if=\"scrollable && !isPrevButtonDisabled\"\n                ref=\"prevBtn\"\n                v-ripple\n                type=\"button\"\n                :class=\"cx('prevButton')\"\n                :tabindex=\"tabindex\"\n                :aria-label=\"prevButtonAriaLabel\"\n                @click=\"onPrevButtonClick\"\n                v-bind=\"{ ...prevButtonProps, ...ptm('prevButton') }\"\n                data-pc-group-section=\"navbutton\"\n            >\n                <slot name=\"previcon\">\n                    <component :is=\"prevIcon ? 'span' : 'ChevronLeftIcon'\" aria-hidden=\"true\" :class=\"prevIcon\" v-bind=\"ptm('prevIcon')\" />\n                </slot>\n            </button>\n            <div ref=\"content\" :class=\"cx('navContent')\" @scroll=\"onScroll\" v-bind=\"ptm('navContent')\">\n                <ul ref=\"nav\" :class=\"cx('nav')\" v-bind=\"ptm('nav')\">\n                    <li\n                        v-for=\"(tab, index) of tabs\"\n                        :key=\"getKey(tab, index)\"\n                        :style=\"getTabProp(tab, 'headerStyle')\"\n                        :class=\"cx('tab.header', { tab, index })\"\n                        role=\"presentation\"\n                        v-bind=\"{ ...getTabProp(tab, 'headerProps'), ...getTabPT(tab, 'root', index), ...getTabPT(tab, 'header', index) }\"\n                        data-pc-name=\"tabpanel\"\n                        :data-p-active=\"d_activeIndex === index\"\n                        :data-p-disabled=\"getTabProp(tab, 'disabled')\"\n                        :data-pc-index=\"index\"\n                    >\n                        <a\n                            :id=\"getTabHeaderActionId(index)\"\n                            v-ripple\n                            :class=\"cx('tab.headerAction')\"\n                            :tabindex=\"getTabProp(tab, 'disabled') || !isTabActive(index) ? -1 : tabindex\"\n                            role=\"tab\"\n                            :aria-disabled=\"getTabProp(tab, 'disabled')\"\n                            :aria-selected=\"isTabActive(index)\"\n                            :aria-controls=\"getTabContentId(index)\"\n                            @click=\"onTabClick($event, tab, index)\"\n                            @keydown=\"onTabKeyDown($event, tab, index)\"\n                            v-bind=\"{ ...getTabProp(tab, 'headerActionProps'), ...getTabPT(tab, 'headerAction', index) }\"\n                        >\n                            <span v-if=\"tab.props && tab.props.header\" :class=\"cx('tab.headerTitle')\" v-bind=\"getTabPT(tab, 'headerTitle', index)\">{{ tab.props.header }}</span>\n                            <component v-if=\"tab.children && tab.children.header\" :is=\"tab.children.header\"></component>\n                        </a>\n                    </li>\n                    <li ref=\"inkbar\" :class=\"cx('inkbar')\" role=\"presentation\" aria-hidden=\"true\" v-bind=\"ptm('inkbar')\"></li>\n                </ul>\n            </div>\n            <button\n                v-if=\"scrollable && !isNextButtonDisabled\"\n                ref=\"nextBtn\"\n                v-ripple\n                type=\"button\"\n                :class=\"cx('nextButton')\"\n                :tabindex=\"tabindex\"\n                :aria-label=\"nextButtonAriaLabel\"\n                @click=\"onNextButtonClick\"\n                v-bind=\"{ ...nextButtonProps, ...ptm('nextButton') }\"\n                data-pc-group-section=\"navbutton\"\n            >\n                <slot name=\"nexticon\">\n                    <component :is=\"nextIcon ? 'span' : 'ChevronRightIcon'\" aria-hidden=\"true\" :class=\"nextIcon\" v-bind=\"ptm('nextIcon')\" />\n                </slot>\n            </button>\n        </div>\n        <div :class=\"cx('panelContainer')\" v-bind=\"ptm('panelContainer')\">\n            <template v-for=\"(tab, index) of tabs\" :key=\"getKey(tab, index)\">\n                <div\n                    v-if=\"lazy ? isTabActive(index) : true\"\n                    v-show=\"lazy ? true : isTabActive(index)\"\n                    :id=\"getTabContentId(index)\"\n                    :style=\"getTabProp(tab, 'contentStyle')\"\n                    :class=\"cx('tab.content', { tab })\"\n                    role=\"tabpanel\"\n                    :aria-labelledby=\"getTabHeaderActionId(index)\"\n                    v-bind=\"{ ...getTabProp(tab, 'contentProps'), ...getTabPT(tab, 'root', index), ...getTabPT(tab, 'content', index) }\"\n                    data-pc-name=\"tabpanel\"\n                    :data-pc-index=\"index\"\n                    :data-p-active=\"d_activeIndex === index\"\n                >\n                    <component :is=\"tab\"></component>\n                </div>\n            </template>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { UniqueComponentId } from '@primevue/core/utils';\nimport { getWidth, getAttribute, findSingle, focus, getOffset } from '@primeuix/utils/dom';\nimport ChevronLeftIcon from '@primevue/icons/chevronleft';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport Ripple from 'primevue/ripple';\nimport { mergeProps } from 'vue';\nimport BaseTabView from './BaseTabView.vue';\n\nexport default {\n    name: 'TabView',\n    extends: BaseTabView,\n    inheritAttrs: false,\n    emits: ['update:activeIndex', 'tab-change', 'tab-click'],\n    data() {\n        return {\n            id: this.$attrs.id,\n            d_activeIndex: this.activeIndex,\n            isPrevButtonDisabled: true,\n            isNextButtonDisabled: false\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        activeIndex(newValue) {\n            this.d_activeIndex = newValue;\n\n            this.scrollInView({ index: newValue });\n        }\n    },\n    mounted() {\n        console.warn('Deprecated since v4. Use Tabs component instead.');\n\n        this.id = this.id || UniqueComponentId();\n        this.updateInkBar();\n        this.scrollable && this.updateButtonState();\n    },\n    updated() {\n        this.updateInkBar();\n        this.scrollable && this.updateButtonState();\n    },\n    methods: {\n        isTabPanel(child) {\n            return child.type.name === 'TabPanel';\n        },\n        isTabActive(index) {\n            return this.d_activeIndex === index;\n        },\n        getTabProp(tab, name) {\n            return tab.props ? tab.props[name] : undefined;\n        },\n        getKey(tab, index) {\n            return this.getTabProp(tab, 'header') || index;\n        },\n        getTabHeaderActionId(index) {\n            return `${this.id}_${index}_header_action`;\n        },\n        getTabContentId(index) {\n            return `${this.id}_${index}_content`;\n        },\n        getTabPT(tab, key, index) {\n            const count = this.tabs.length;\n            const tabMetaData = {\n                props: tab.props,\n                parent: {\n                    instance: this,\n                    props: this.$props,\n                    state: this.$data\n                },\n                context: {\n                    index,\n                    count,\n                    first: index === 0,\n                    last: index === count - 1,\n                    active: this.isTabActive(index)\n                }\n            };\n\n            return mergeProps(this.ptm(`tabpanel.${key}`, { tabpanel: tabMetaData }), this.ptm(`tabpanel.${key}`, tabMetaData), this.ptmo(this.getTabProp(tab, 'pt'), key, tabMetaData));\n        },\n        onScroll(event) {\n            this.scrollable && this.updateButtonState();\n\n            event.preventDefault();\n        },\n        onPrevButtonClick() {\n            const content = this.$refs.content;\n            const width = getWidth(content);\n            const pos = content.scrollLeft - width;\n\n            content.scrollLeft = pos <= 0 ? 0 : pos;\n        },\n        onNextButtonClick() {\n            const content = this.$refs.content;\n            const width = getWidth(content) - this.getVisibleButtonWidths();\n            const pos = content.scrollLeft + width;\n            const lastPos = content.scrollWidth - width;\n\n            content.scrollLeft = pos >= lastPos ? lastPos : pos;\n        },\n        onTabClick(event, tab, index) {\n            this.changeActiveIndex(event, tab, index);\n            this.$emit('tab-click', { originalEvent: event, index });\n        },\n        onTabKeyDown(event, tab, index) {\n            switch (event.code) {\n                case 'ArrowLeft':\n                    this.onTabArrowLeftKey(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onTabArrowRightKey(event);\n                    break;\n\n                case 'Home':\n                    this.onTabHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onTabEndKey(event);\n                    break;\n\n                case 'PageDown':\n                    this.onPageDownKey(event);\n                    break;\n\n                case 'PageUp':\n                    this.onPageUpKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    this.onTabEnterKey(event, tab, index);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onTabArrowRightKey(event) {\n            const nextHeaderAction = this.findNextHeaderAction(event.target.parentElement);\n\n            nextHeaderAction ? this.changeFocusedTab(event, nextHeaderAction) : this.onTabHomeKey(event);\n            event.preventDefault();\n        },\n        onTabArrowLeftKey(event) {\n            const prevHeaderAction = this.findPrevHeaderAction(event.target.parentElement);\n\n            prevHeaderAction ? this.changeFocusedTab(event, prevHeaderAction) : this.onTabEndKey(event);\n            event.preventDefault();\n        },\n        onTabHomeKey(event) {\n            const firstHeaderAction = this.findFirstHeaderAction();\n\n            this.changeFocusedTab(event, firstHeaderAction);\n            event.preventDefault();\n        },\n        onTabEndKey(event) {\n            const lastHeaderAction = this.findLastHeaderAction();\n\n            this.changeFocusedTab(event, lastHeaderAction);\n            event.preventDefault();\n        },\n        onPageDownKey(event) {\n            this.scrollInView({ index: this.$refs.nav.children.length - 2 });\n            event.preventDefault();\n        },\n        onPageUpKey(event) {\n            this.scrollInView({ index: 0 });\n            event.preventDefault();\n        },\n        onTabEnterKey(event, tab, index) {\n            this.changeActiveIndex(event, tab, index);\n\n            event.preventDefault();\n        },\n        findNextHeaderAction(tabElement, selfCheck = false) {\n            const headerElement = selfCheck ? tabElement : tabElement.nextElementSibling;\n\n            return headerElement\n                ? getAttribute(headerElement, 'data-p-disabled') || getAttribute(headerElement, 'data-pc-section') === 'inkbar'\n                    ? this.findNextHeaderAction(headerElement)\n                    : findSingle(headerElement, '[data-pc-section=\"headeraction\"]')\n                : null;\n        },\n        findPrevHeaderAction(tabElement, selfCheck = false) {\n            const headerElement = selfCheck ? tabElement : tabElement.previousElementSibling;\n\n            return headerElement\n                ? getAttribute(headerElement, 'data-p-disabled') || getAttribute(headerElement, 'data-pc-section') === 'inkbar'\n                    ? this.findPrevHeaderAction(headerElement)\n                    : findSingle(headerElement, '[data-pc-section=\"headeraction\"]')\n                : null;\n        },\n        findFirstHeaderAction() {\n            return this.findNextHeaderAction(this.$refs.nav.firstElementChild, true);\n        },\n        findLastHeaderAction() {\n            return this.findPrevHeaderAction(this.$refs.nav.lastElementChild, true);\n        },\n        changeActiveIndex(event, tab, index) {\n            if (!this.getTabProp(tab, 'disabled') && this.d_activeIndex !== index) {\n                this.d_activeIndex = index;\n\n                this.$emit('update:activeIndex', index);\n                this.$emit('tab-change', { originalEvent: event, index });\n\n                this.scrollInView({ index });\n            }\n        },\n        changeFocusedTab(event, element) {\n            if (element) {\n                focus(element);\n                this.scrollInView({ element });\n\n                if (this.selectOnFocus) {\n                    const index = parseInt(element.parentElement.dataset.pcIndex, 10);\n                    const tab = this.tabs[index];\n\n                    this.changeActiveIndex(event, tab, index);\n                }\n            }\n        },\n        scrollInView({ element, index = -1 }) {\n            const currentElement = element || this.$refs.nav.children[index];\n\n            if (currentElement) {\n                currentElement.scrollIntoView && currentElement.scrollIntoView({ block: 'nearest' });\n            }\n        },\n        updateInkBar() {\n            let tabHeader = this.$refs.nav.children[this.d_activeIndex];\n\n            this.$refs.inkbar.style.width = getWidth(tabHeader) + 'px';\n            this.$refs.inkbar.style.left = getOffset(tabHeader).left - getOffset(this.$refs.nav).left + 'px';\n        },\n        updateButtonState() {\n            const content = this.$refs.content;\n            const { scrollLeft, scrollWidth } = content;\n            const width = getWidth(content);\n\n            this.isPrevButtonDisabled = scrollLeft === 0;\n            this.isNextButtonDisabled = parseInt(scrollLeft) === scrollWidth - width;\n        },\n        getVisibleButtonWidths() {\n            const { prevBtn, nextBtn } = this.$refs;\n\n            return [prevBtn, nextBtn].reduce((acc, el) => (el ? acc + getWidth(el) : acc), 0);\n        }\n    },\n    computed: {\n        tabs() {\n            return this.$slots.default().reduce((tabs, child) => {\n                if (this.isTabPanel(child)) {\n                    tabs.push(child);\n                } else if (child.children && child.children instanceof Array) {\n                    child.children.forEach((nestedChild) => {\n                        if (this.isTabPanel(nestedChild)) {\n                            tabs.push(nestedChild);\n                        }\n                    });\n                }\n\n                return tabs;\n            }, []);\n        },\n        prevButtonAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.previous : undefined;\n        },\n        nextButtonAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.next : undefined;\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        ChevronLeftIcon,\n        ChevronRightIcon\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["theme", "_ref", "dt", "concat", "classes", "root", "_ref2", "props", "scrollable", "navContainer", "prevButton", "navContent", "nav", "tab", "header", "_ref3", "instance", "index", "getTabProp", "d_activeIndex", "headerAction", "headerTitle", "content", "_ref4", "inkbar", "nextButton", "panelContainer", "BaseStyle", "extend", "name", "name", "BaseComponent", "props", "activeIndex", "type", "Number", "lazy", "Boolean", "scrollable", "tabindex", "selectOnFocus", "prevButtonProps", "nextButtonProps", "prevIcon", "String", "undefined", "nextIcon", "style", "TabViewStyle", "provide", "$pcTabs", "$pcTabView", "$parentInstance", "script", "BaseTabView", "inheritAttrs", "emits", "data", "id", "$attrs", "d_activeIndex", "isPrevButtonDisabled", "isNextButtonDisabled", "watch", "$attrsId", "newValue", "UniqueComponentId", "scrollInView", "index", "mounted", "console", "warn", "updateInkBar", "updateButtonState", "updated", "methods", "isTabPanel", "child", "isTabActive", "getTabProp", "tab", "getKey", "getTabHeaderActionId", "concat", "getTabContentId", "getTabPT", "key", "count", "tabs", "length", "tabMetaData", "parent", "instance", "$props", "state", "$data", "context", "first", "last", "active", "mergeProps", "ptm", "tabpanel", "ptmo", "onScroll", "event", "preventDefault", "onPrevButtonClick", "content", "$refs", "width", "getWidth", "pos", "scrollLeft", "onNextButtonClick", "getVisibleButtonWidths", "lastPos", "scrollWidth", "onTabClick", "changeActiveIndex", "$emit", "originalEvent", "onTabKeyDown", "code", "onTabArrowLeftKey", "onTabArrowRightKey", "onTabHomeKey", "onTabEndKey", "onPageDownKey", "onPageUpKey", "onTabEnterKey", "nextHeaderAction", "findNextHeaderAction", "target", "parentElement", "changeFocusedTab", "prevHeaderAction", "findPrevHeaderAction", "firstHeaderAction", "findFirstHeaderAction", "lastHeaderAction", "findLastHeaderAction", "nav", "children", "tabElement", "selfCheck", "arguments", "headerElement", "nextElementSibling", "getAttribute", "findSingle", "previousElementSibling", "firstElementChild", "lastElementChild", "element", "focus", "parseInt", "dataset", "pcIndex", "_ref", "_ref$index", "currentElement", "scrollIntoView", "block", "tabHeader", "inkbar", "left", "getOffset", "_this$$refs", "prevBtn", "nextBtn", "reduce", "acc", "el", "computed", "_this", "$slots", "push", "Array", "forEach", "nestedChild", "prevButtonAriaLabel", "$primevue", "config", "locale", "aria", "previous", "nextButtonAriaLabel", "next", "directives", "ripple", "Ripple", "components", "ChevronLeftIcon", "ChevronRightIcon", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "role", "ptmi", "_createElementVNode", "_withDirectives", "ref", "$options", "onClick", "apply", "_objectSpread", "_renderSlot", "_createBlock", "_resolveDynamicComponent", "_Fragment", "_renderList", "$event", "onKeydown", "header"]
}
