{
  "version": 3,
  "sources": ["../../src/fieldset/style/FieldsetStyle.js", "../../src/fieldset/BaseFieldset.vue", "../../src/fieldset/Fieldset.vue", "../../src/fieldset/Fieldset.vue?vue&type=template&id=7155738a&lang.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nconst theme = ({ dt }) => `\n.p-fieldset {\n    background: ${dt('fieldset.background')};\n    border: 1px solid ${dt('fieldset.border.color')};\n    border-radius: ${dt('fieldset.border.radius')};\n    color: ${dt('fieldset.color')};\n    padding:  ${dt('fieldset.padding')};\n    margin: 0;\n}\n\n.p-fieldset-legend {\n    background: ${dt('fieldset.legend.background')};\n    border-radius: ${dt('fieldset.legend.border.radius')};\n    border-width: ${dt('fieldset.legend.border.width')};\n    border-style: solid;\n    border-color: ${dt('fieldset.legend.border.color')};\n    padding: ${dt('fieldset.legend.padding')};\n    transition: background ${dt('fieldset.transition.duration')}, color ${dt('fieldset.transition.duration')}, outline-color ${dt('fieldset.transition.duration')}, box-shadow ${dt('fieldset.transition.duration')};\n}\n\n.p-fieldset-toggleable > .p-fieldset-legend {\n    padding: 0;\n}\n\n.p-fieldset-toggle-button {\n    cursor: pointer;\n    user-select: none;\n    overflow: hidden;\n    position: relative;\n    text-decoration: none;\n    display: flex;\n    gap: ${dt('fieldset.legend.gap')};\n    align-items: center;\n    justify-content: center;\n    padding: ${dt('fieldset.legend.padding')};\n    background: transparent;\n    border: 0 none;\n    border-radius: ${dt('fieldset.legend.border.radius')};\n    transition: background ${dt('fieldset.transition.duration')}, color ${dt('fieldset.transition.duration')}, outline-color ${dt('fieldset.transition.duration')}, box-shadow ${dt('fieldset.transition.duration')};\n    outline-color: transparent;\n}\n\n.p-fieldset-legend-label {\n    font-weight: ${dt('fieldset.legend.font.weight')};\n}\n\n.p-fieldset-toggle-button:focus-visible {\n    box-shadow: ${dt('fieldset.legend.focus.ring.shadow')};\n    outline: ${dt('fieldset.legend.focus.ring.width')} ${dt('fieldset.legend.focus.ring.style')} ${dt('fieldset.legend.focus.ring.color')};\n    outline-offset: ${dt('fieldset.legend.focus.ring.offset')};\n}\n\n.p-fieldset-toggleable > .p-fieldset-legend:hover {\n    color: ${dt('fieldset.legend.hover.color')};\n    background: ${dt('fieldset.legend.hover.background')};\n}\n\n.p-fieldset-toggle-icon {\n    color: ${dt('fieldset.toggle.icon.color')};\n    transition: color ${dt('fieldset.transition.duration')};\n}\n\n.p-fieldset-toggleable > .p-fieldset-legend:hover .p-fieldset-toggle-icon {\n    color: ${dt('fieldset.toggle.icon.hover.color')};\n}\n\n.p-fieldset .p-fieldset-content {\n    padding: ${dt('fieldset.content.padding')};\n}\n`;\n\nconst classes = {\n    root: ({ props }) => [\n        'p-fieldset p-component',\n        {\n            'p-fieldset-toggleable': props.toggleable\n        }\n    ],\n    legend: 'p-fieldset-legend',\n    legendLabel: 'p-fieldset-legend-label',\n    toggleButton: 'p-fieldset-toggle-button',\n    toggleIcon: 'p-fieldset-toggle-icon',\n    contentContainer: 'p-fieldset-content-container',\n    content: 'p-fieldset-content'\n};\n\nexport default BaseStyle.extend({\n    name: 'fieldset',\n    theme,\n    classes\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport FieldsetStyle from 'primevue/fieldset/style';\n\nexport default {\n    name: 'BaseFieldset',\n    extends: BaseComponent,\n    props: {\n        legend: String,\n        toggleable: Boolean,\n        collapsed: Boolean,\n        toggleButtonProps: {\n            type: null,\n            default: null\n        }\n    },\n    style: FieldsetStyle,\n    provide() {\n        return {\n            $pcFieldset: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <fieldset :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <legend :class=\"cx('legend')\" v-bind=\"ptm('legend')\">\n            <slot name=\"legend\" :toggleCallback=\"toggle\">\n                <span v-if=\"!toggleable\" :id=\"id + '_header'\" :class=\"cx('legendLabel')\" v-bind=\"ptm('legendLabel')\">{{ legend }}</span>\n                <button\n                    v-if=\"toggleable\"\n                    :id=\"id + '_header'\"\n                    v-ripple\n                    type=\"button\"\n                    :aria-controls=\"id + '_content'\"\n                    :aria-expanded=\"!d_collapsed\"\n                    :aria-label=\"buttonAriaLabel\"\n                    :class=\"cx('toggleButton')\"\n                    @click=\"toggle\"\n                    @keydown=\"onKeyDown\"\n                    v-bind=\"{ ...toggleButtonProps, ...ptm('toggleButton') }\"\n                >\n                    <!--TODO: togglericon deprecated since v4.0-->\n                    <slot :name=\"$slots.toggleicon ? 'toggleicon' : 'togglericon'\" :collapsed=\"d_collapsed\">\n                        <component :is=\"d_collapsed ? 'PlusIcon' : 'MinusIcon'\" :class=\"cx('toggleIcon')\" v-bind=\"ptm('toggleIcon')\" />\n                    </slot>\n                    <span :class=\"cx('legendLabel')\" v-bind=\"ptm('legendLabel')\">{{ legend }}</span>\n                </button>\n            </slot>\n        </legend>\n        <transition name=\"p-toggleable-content\" v-bind=\"ptm('transition')\">\n            <div v-show=\"!d_collapsed\" :id=\"id + '_content'\" :class=\"cx('contentContainer')\" role=\"region\" :aria-labelledby=\"id + '_header'\" v-bind=\"ptm('contentContainer')\">\n                <div :class=\"cx('content')\" v-bind=\"ptm('content')\">\n                    <slot></slot>\n                </div>\n            </div>\n        </transition>\n    </fieldset>\n</template>\n\n<script>\nimport { UniqueComponentId } from '@primevue/core/utils';\nimport MinusIcon from '@primevue/icons/minus';\nimport PlusIcon from '@primevue/icons/plus';\nimport Ripple from 'primevue/ripple';\nimport BaseFieldset from './BaseFieldset.vue';\n\nexport default {\n    name: 'Fieldset',\n    extends: BaseFieldset,\n    inheritAttrs: false,\n    emits: ['update:collapsed', 'toggle'],\n    data() {\n        return {\n            id: this.$attrs.id,\n            d_collapsed: this.collapsed\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        collapsed(newValue) {\n            this.d_collapsed = newValue;\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n    },\n    methods: {\n        toggle(event) {\n            this.d_collapsed = !this.d_collapsed;\n            this.$emit('update:collapsed', this.d_collapsed);\n            this.$emit('toggle', {\n                originalEvent: event,\n                value: this.d_collapsed\n            });\n        },\n        onKeyDown(event) {\n            if (event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') {\n                this.toggle(event);\n                event.preventDefault();\n            }\n        }\n    },\n    computed: {\n        buttonAriaLabel() {\n            return this.toggleButtonProps && this.toggleButtonProps.ariaLabel ? this.toggleButtonProps.ariaLabel : this.legend;\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        PlusIcon,\n        MinusIcon\n    }\n};\n</script>\n", "<template>\n    <fieldset :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <legend :class=\"cx('legend')\" v-bind=\"ptm('legend')\">\n            <slot name=\"legend\" :toggleCallback=\"toggle\">\n                <span v-if=\"!toggleable\" :id=\"id + '_header'\" :class=\"cx('legendLabel')\" v-bind=\"ptm('legendLabel')\">{{ legend }}</span>\n                <button\n                    v-if=\"toggleable\"\n                    :id=\"id + '_header'\"\n                    v-ripple\n                    type=\"button\"\n                    :aria-controls=\"id + '_content'\"\n                    :aria-expanded=\"!d_collapsed\"\n                    :aria-label=\"buttonAriaLabel\"\n                    :class=\"cx('toggleButton')\"\n                    @click=\"toggle\"\n                    @keydown=\"onKeyDown\"\n                    v-bind=\"{ ...toggleButtonProps, ...ptm('toggleButton') }\"\n                >\n                    <!--TODO: togglericon deprecated since v4.0-->\n                    <slot :name=\"$slots.toggleicon ? 'toggleicon' : 'togglericon'\" :collapsed=\"d_collapsed\">\n                        <component :is=\"d_collapsed ? 'PlusIcon' : 'MinusIcon'\" :class=\"cx('toggleIcon')\" v-bind=\"ptm('toggleIcon')\" />\n                    </slot>\n                    <span :class=\"cx('legendLabel')\" v-bind=\"ptm('legendLabel')\">{{ legend }}</span>\n                </button>\n            </slot>\n        </legend>\n        <transition name=\"p-toggleable-content\" v-bind=\"ptm('transition')\">\n            <div v-show=\"!d_collapsed\" :id=\"id + '_content'\" :class=\"cx('contentContainer')\" role=\"region\" :aria-labelledby=\"id + '_header'\" v-bind=\"ptm('contentContainer')\">\n                <div :class=\"cx('content')\" v-bind=\"ptm('content')\">\n                    <slot></slot>\n                </div>\n            </div>\n        </transition>\n    </fieldset>\n</template>\n\n<script>\nimport { UniqueComponentId } from '@primevue/core/utils';\nimport MinusIcon from '@primevue/icons/minus';\nimport PlusIcon from '@primevue/icons/plus';\nimport Ripple from 'primevue/ripple';\nimport BaseFieldset from './BaseFieldset.vue';\n\nexport default {\n    name: 'Fieldset',\n    extends: BaseFieldset,\n    inheritAttrs: false,\n    emits: ['update:collapsed', 'toggle'],\n    data() {\n        return {\n            id: this.$attrs.id,\n            d_collapsed: this.collapsed\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        collapsed(newValue) {\n            this.d_collapsed = newValue;\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n    },\n    methods: {\n        toggle(event) {\n            this.d_collapsed = !this.d_collapsed;\n            this.$emit('update:collapsed', this.d_collapsed);\n            this.$emit('toggle', {\n                originalEvent: event,\n                value: this.d_collapsed\n            });\n        },\n        onKeyDown(event) {\n            if (event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') {\n                this.toggle(event);\n                event.preventDefault();\n            }\n        }\n    },\n    computed: {\n        buttonAriaLabel() {\n            return this.toggleButtonProps && this.toggleButtonProps.ariaLabel ? this.toggleButtonProps.ariaLabel : this.legend;\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        PlusIcon,\n        MinusIcon\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["theme", "_ref", "dt", "concat", "classes", "root", "_ref2", "props", "toggleable", "legend", "legendLabel", "toggleButton", "toggleIcon", "contentContainer", "content", "BaseStyle", "extend", "name", "name", "BaseComponent", "props", "legend", "String", "toggleable", "Boolean", "collapsed", "toggleButtonProps", "type", "style", "FieldsetStyle", "provide", "$pcFieldset", "$parentInstance", "script", "BaseFieldset", "inheritAttrs", "emits", "data", "id", "$attrs", "d_collapsed", "watch", "$attrsId", "newValue", "UniqueComponentId", "mounted", "methods", "toggle", "event", "$emit", "originalEvent", "value", "onKeyDown", "code", "preventDefault", "computed", "buttonAriaLabel", "ariaLabel", "directives", "ripple", "Ripple", "components", "PlusIcon", "MinusIcon", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "ptmi", "_createElementVNode", "ptm", "_renderSlot", "$slots", "toggleCallback", "$options", "$data", "_hoisted_1", "_withDirectives", "onClick", "apply", "arguments", "onKeydown", "_objectSpread", "toggleicon", "_createBlock", "_resolveDynamicComponent", "_createVNode", "_Transition", "role"]
}
