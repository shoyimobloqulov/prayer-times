{
  "version": 3,
  "sources": ["../../src/dynamicdialog/style/DynamicDialogStyle.js", "../../src/dynamicdialog/BaseDynamicDialog.vue", "../../src/dynamicdialog/DynamicDialog.vue", "../../src/dynamicdialog/DynamicDialog.vue?vue&type=template&id=d61378aa&lang.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nexport default BaseStyle.extend({\n    name: 'dynamicdialog'\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport DynamicDialogStyle from 'primevue/dynamicdialog/style';\n\nexport default {\n    name: 'BaseDynamicDialog',\n    extends: BaseComponent,\n    props: {},\n    style: DynamicDialogStyle,\n    provide() {\n        return {\n            $pcDynamicDialog: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <template v-for=\"(instance, key) in instanceMap\" :key=\"key\">\n        <DDialog v-model:visible=\"instance.visible\" :_instance=\"instance\" v-bind=\"instance.options.props\" @hide=\"onDialogHide(instance)\" @after-hide=\"onDialogAfterHide\">\n            <template v-if=\"instance.options.templates && instance.options.templates.header\" #header>\n                <component v-for=\"(header, index) in getTemplateItems(instance.options.templates.header)\" :is=\"header\" :key=\"index + '_header'\" v-bind=\"instance.options.emits\"></component>\n            </template>\n            <component :is=\"instance.content\" v-bind=\"instance.options.emits\"></component>\n            <template v-if=\"instance.options.templates && instance.options.templates.footer\" #footer>\n                <component v-for=\"(footer, index) in getTemplateItems(instance.options.templates.footer)\" :is=\"footer\" :key=\"index + '_footer'\" v-bind=\"instance.options.emits\"></component>\n            </template>\n        </DDialog>\n    </template>\n</template>\n\n<script>\nimport { UniqueComponentId } from '@primevue/core/utils';\nimport Dialog from 'primevue/dialog';\nimport DynamicDialogEventBus from 'primevue/dynamicdialogeventbus';\nimport BaseDynamicDialog from './BaseDynamicDialog.vue';\n\nexport default {\n    name: 'DynamicDialog',\n    extends: BaseDynamicDialog,\n    inheritAttrs: false,\n    data() {\n        return {\n            instanceMap: {}\n        };\n    },\n    openListener: null,\n    closeListener: null,\n    currentInstance: null,\n    mounted() {\n        this.openListener = ({ instance }) => {\n            const key = UniqueComponentId() + '_dynamic_dialog';\n\n            instance.visible = true;\n            instance.key = key;\n            this.instanceMap[key] = instance;\n        };\n\n        this.closeListener = ({ instance, params }) => {\n            const key = instance.key;\n            const currentInstance = this.instanceMap[key];\n\n            if (currentInstance) {\n                currentInstance.visible = false;\n                currentInstance.options.onClose && currentInstance.options.onClose({ data: params, type: 'config-close' });\n\n                this.currentInstance = currentInstance;\n            }\n        };\n\n        DynamicDialogEventBus.on('open', this.openListener);\n        DynamicDialogEventBus.on('close', this.closeListener);\n    },\n    beforeUnmount() {\n        DynamicDialogEventBus.off('open', this.openListener);\n        DynamicDialogEventBus.off('close', this.closeListener);\n    },\n    methods: {\n        onDialogHide(instance) {\n            !this.currentInstance && instance.options.onClose && instance.options.onClose({ type: 'dialog-close' });\n        },\n        onDialogAfterHide() {\n            this.currentInstance && delete this.currentInstance;\n            this.currentInstance = null;\n        },\n        getTemplateItems(template) {\n            return Array.isArray(template) ? template : [template];\n        }\n    },\n    components: {\n        DDialog: Dialog\n    }\n};\n</script>\n", "<template>\n    <template v-for=\"(instance, key) in instanceMap\" :key=\"key\">\n        <DDialog v-model:visible=\"instance.visible\" :_instance=\"instance\" v-bind=\"instance.options.props\" @hide=\"onDialogHide(instance)\" @after-hide=\"onDialogAfterHide\">\n            <template v-if=\"instance.options.templates && instance.options.templates.header\" #header>\n                <component v-for=\"(header, index) in getTemplateItems(instance.options.templates.header)\" :is=\"header\" :key=\"index + '_header'\" v-bind=\"instance.options.emits\"></component>\n            </template>\n            <component :is=\"instance.content\" v-bind=\"instance.options.emits\"></component>\n            <template v-if=\"instance.options.templates && instance.options.templates.footer\" #footer>\n                <component v-for=\"(footer, index) in getTemplateItems(instance.options.templates.footer)\" :is=\"footer\" :key=\"index + '_footer'\" v-bind=\"instance.options.emits\"></component>\n            </template>\n        </DDialog>\n    </template>\n</template>\n\n<script>\nimport { UniqueComponentId } from '@primevue/core/utils';\nimport Dialog from 'primevue/dialog';\nimport DynamicDialogEventBus from 'primevue/dynamicdialogeventbus';\nimport BaseDynamicDialog from './BaseDynamicDialog.vue';\n\nexport default {\n    name: 'DynamicDialog',\n    extends: BaseDynamicDialog,\n    inheritAttrs: false,\n    data() {\n        return {\n            instanceMap: {}\n        };\n    },\n    openListener: null,\n    closeListener: null,\n    currentInstance: null,\n    mounted() {\n        this.openListener = ({ instance }) => {\n            const key = UniqueComponentId() + '_dynamic_dialog';\n\n            instance.visible = true;\n            instance.key = key;\n            this.instanceMap[key] = instance;\n        };\n\n        this.closeListener = ({ instance, params }) => {\n            const key = instance.key;\n            const currentInstance = this.instanceMap[key];\n\n            if (currentInstance) {\n                currentInstance.visible = false;\n                currentInstance.options.onClose && currentInstance.options.onClose({ data: params, type: 'config-close' });\n\n                this.currentInstance = currentInstance;\n            }\n        };\n\n        DynamicDialogEventBus.on('open', this.openListener);\n        DynamicDialogEventBus.on('close', this.closeListener);\n    },\n    beforeUnmount() {\n        DynamicDialogEventBus.off('open', this.openListener);\n        DynamicDialogEventBus.off('close', this.closeListener);\n    },\n    methods: {\n        onDialogHide(instance) {\n            !this.currentInstance && instance.options.onClose && instance.options.onClose({ type: 'dialog-close' });\n        },\n        onDialogAfterHide() {\n            this.currentInstance && delete this.currentInstance;\n            this.currentInstance = null;\n        },\n        getTemplateItems(template) {\n            return Array.isArray(template) ? template : [template];\n        }\n    },\n    components: {\n        DDialog: Dialog\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["BaseStyle", "extend", "name", "name", "BaseComponent", "props", "style", "DynamicDialogStyle", "provide", "$pcDynamicDialog", "$parentInstance", "script", "BaseDynamicDialog", "inheritAttrs", "data", "instanceMap", "openListener", "closeListener", "currentInstance", "mounted", "_this", "_ref", "instance", "key", "UniqueComponentId", "visible", "_ref2", "params", "options", "onClose", "type", "DynamicDialogEventBus", "on", "beforeUnmount", "off", "methods", "onDialogHide", "onDialogAfterHide", "getTemplateItems", "template", "Array", "isArray", "components", "DDialog", "Dialog", "_openBlock", "_createElementBlock", "_Fragment", "_renderList", "$data", "_createBlock", "_component_DDialog", "_mergeProps", "onUpdateVisible", "$event", "_instance", "onHide", "$options", "onAfterHide", "_resolveDynamicComponent", "content", "ref_for", "emits", "templates", "header", "index", "footer"]
}
