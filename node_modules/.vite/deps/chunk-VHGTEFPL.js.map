{
  "version": 3,
  "sources": ["../../src/tree/style/TreeStyle.js", "../../src/tree/BaseTree.vue", "../../src/tree/TreeNode.vue", "../../src/tree/TreeNode.vue?vue&type=template&id=309bdf20&lang.js", "../../src/tree/Tree.vue", "../../src/tree/Tree.vue?vue&type=template&id=e9d5f886&lang.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nconst theme = ({ dt }) => `\n.p-tree {\n    background: ${dt('tree.background')};\n    color: ${dt('tree.color')};\n    padding: ${dt('tree.padding')};\n}\n\n.p-tree-root-children,\n.p-tree-node-children {\n    display: flex;\n    list-style-type: none;\n    flex-direction: column;\n    margin: 0;\n    gap: ${dt('tree.gap')};\n}\n\n.p-tree-root-children {\n    padding: ${dt('tree.gap')} 0 0 0;\n}\n\n.p-tree-node-children {\n    padding: ${dt('tree.gap')} 0 0 ${dt('tree.indent')};\n}\n\n.p-tree-node {\n    padding: 0;\n    outline: 0 none;\n}\n\n.p-tree-node-content {\n    border-radius: ${dt('tree.node.border.radius')};\n    padding: ${dt('tree.node.padding')};\n    display: flex;\n    align-items: center;\n    outline-color: transparent;\n    color: ${dt('tree.node.color')};\n    gap: ${dt('tree.node.gap')};\n    transition: background ${dt('tree.transition.duration')}, color ${dt('tree.transition.duration')}, outline-color ${dt('tree.transition.duration')}, box-shadow ${dt('tree.transition.duration')};\n}\n\n.p-tree-node:focus-visible > .p-tree-node-content {\n    box-shadow: ${dt('tree.node.focus.ring.shadow')};\n    outline: ${dt('tree.node.focus.ring.width')} ${dt('tree.node.focus.ring.style')} ${dt('tree.node.focus.ring.color')};\n    outline-offset: ${dt('tree.node.focus.ring.offset')};\n}\n\n.p-tree-node-content.p-tree-node-selectable:not(.p-tree-node-selected):hover {\n    background: ${dt('tree.node.hover.background')};\n    color: ${dt('tree.node.hover.color')};\n}\n\n.p-tree-node-content.p-tree-node-selectable:not(.p-tree-node-selected):hover .p-tree-node-icon {\n    color: ${dt('tree.node.icon.hover.color')};\n}\n\n.p-tree-node-content.p-tree-node-selected {\n    background: ${dt('tree.node.selected.background')};\n    color: ${dt('tree.node.selected.color')};\n}\n\n.p-tree-node-content.p-tree-node-selected .p-tree-node-toggle-button {\n    color: inherit;\n}\n\n.p-tree-node-toggle-button {\n    cursor: pointer;\n    user-select: none;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    overflow: hidden;\n    position: relative;\n    flex-shrink: 0;\n    width: ${dt('tree.node.toggle.button.size')};\n    height: ${dt('tree.node.toggle.button.size')};\n    color: ${dt('tree.node.toggle.button.color')};\n    border: 0 none;\n    background: transparent;\n    border-radius: ${dt('tree.node.toggle.button.border.radius')};\n    transition: background ${dt('tree.transition.duration')}, color ${dt('tree.transition.duration')}, border-color ${dt('tree.transition.duration')}, outline-color ${dt('tree.transition.duration')}, box-shadow ${dt('tree.transition.duration')};\n    outline-color: transparent;\n    padding: 0;\n}\n\n.p-tree-node-toggle-button:enabled:hover {\n    background: ${dt('tree.node.toggle.button.hover.background')};\n    color: ${dt('tree.node.toggle.button.hover.color')};\n}\n\n.p-tree-node-content.p-tree-node-selected .p-tree-node-toggle-button:hover {\n    background: ${dt('tree.node.toggle.button.selected.hover.background')};\n    color: ${dt('tree.node.toggle.button.selected.hover.color')};\n}\n\n.p-tree-root {\n    overflow: auto;\n}\n\n.p-tree-node-selectable {\n    cursor: pointer;\n    user-select: none;\n}\n\n.p-tree-node-leaf > .p-tree-node-content .p-tree-node-toggle-button {\n    visibility: hidden;\n}\n\n.p-tree-node-icon {\n    color: ${dt('tree.node.icon.color')};\n    transition: color ${dt('tree.transition.duration')};\n}\n\n.p-tree-node-content.p-tree-node-selected .p-tree-node-icon {\n    color: ${dt('tree.node.icon.selected.color')};\n}\n\n.p-tree-filter-input {\n    width: 100%;\n}\n\n.p-tree-loading {\n    position: relative;\n    height: 100%;\n}\n\n.p-tree-loading-icon {\n    font-size: ${dt('tree.loading.icon.size')};\n    width: ${dt('tree.loading.icon.size')};\n    height: ${dt('tree.loading.icon.size')};\n}\n\n.p-tree .p-tree-mask {\n    position: absolute;\n    z-index: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.p-tree-flex-scrollable {\n    display: flex;\n    flex: 1;\n    height: 100%;\n    flex-direction: column;\n}\n\n.p-tree-flex-scrollable .p-tree-root {\n    flex: 1;\n}\n`;\n\nconst classes = {\n    root: ({ props }) => [\n        'p-tree p-component',\n        {\n            'p-tree-selectable': props.selectionMode != null,\n            'p-tree-loading': props.loading,\n            'p-tree-flex-scrollable': props.scrollHeight === 'flex'\n        }\n    ],\n    mask: 'p-tree-mask p-overlay-mask',\n    loadingIcon: 'p-tree-loading-icon',\n    pcFilterInput: 'p-tree-filter-input',\n    wrapper: 'p-tree-root', //TODO: discuss\n    rootChildren: 'p-tree-root-children',\n    node: ({ instance }) => ['p-tree-node', { 'p-tree-node-leaf': instance.leaf }],\n    nodeContent: ({ instance }) => [\n        'p-tree-node-content',\n        instance.node.styleClass,\n        {\n            'p-tree-node-selectable': instance.selectable,\n            'p-tree-node-selected': instance.checkboxMode && instance.$parentInstance.highlightOnSelect ? instance.checked : instance.selected\n        }\n    ],\n    nodeToggleButton: 'p-tree-node-toggle-button',\n    nodeToggleIcon: 'p-tree-node-toggle-icon',\n    nodeCheckbox: 'p-tree-node-checkbox',\n    nodeIcon: 'p-tree-node-icon',\n    nodeLabel: 'p-tree-node-label',\n    nodeChildren: 'p-tree-node-children'\n};\n\nexport default BaseStyle.extend({\n    name: 'tree',\n    theme,\n    classes\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TreeStyle from 'primevue/tree/style';\n\nexport default {\n    name: 'BaseTree',\n    extends: BaseComponent,\n    props: {\n        value: {\n            type: null,\n            default: null\n        },\n        expandedKeys: {\n            type: null,\n            default: null\n        },\n        selectionKeys: {\n            type: null,\n            default: null\n        },\n        selectionMode: {\n            type: String,\n            default: null\n        },\n        metaKeySelection: {\n            type: Boolean,\n            default: false\n        },\n        loading: {\n            type: Boolean,\n            default: false\n        },\n        loadingIcon: {\n            type: String,\n            default: undefined\n        },\n        loadingMode: {\n            type: String,\n            default: 'mask'\n        },\n        filter: {\n            type: Boolean,\n            default: false\n        },\n        filterBy: {\n            type: String,\n            default: 'label'\n        },\n        filterMode: {\n            type: String,\n            default: 'lenient'\n        },\n        filterPlaceholder: {\n            type: String,\n            default: null\n        },\n        filterLocale: {\n            type: String,\n            default: undefined\n        },\n        highlightOnSelect: {\n            type: Boolean,\n            default: false\n        },\n        scrollHeight: {\n            type: String,\n            default: null\n        },\n        level: {\n            type: Number,\n            default: 0\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        }\n    },\n    style: TreeStyle,\n    provide() {\n        return {\n            $pcTree: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <li\n        ref=\"currentNode\"\n        :class=\"cx('node')\"\n        role=\"treeitem\"\n        :aria-label=\"label(node)\"\n        :aria-selected=\"ariaSelected\"\n        :aria-expanded=\"expanded\"\n        :aria-setsize=\"node.children ? node.children.length : 0\"\n        :aria-posinset=\"index + 1\"\n        :aria-level=\"level\"\n        :aria-checked=\"ariaChecked\"\n        :tabindex=\"index === 0 ? 0 : -1\"\n        @keydown=\"onKeyDown\"\n        v-bind=\"level === 1 ? getPTOptions('node') : ptm('nodeChildren')\"\n    >\n        <div :class=\"cx('nodeContent')\" @click=\"onClick\" @touchend=\"onTouchEnd\" :style=\"node.style\" v-bind=\"getPTOptions('nodeContent')\" :data-p-selected=\"checkboxMode ? checked : selected\" :data-p-selectable=\"selectable\">\n            <button v-ripple type=\"button\" :class=\"cx('nodeToggleButton')\" @click=\"toggle\" tabindex=\"-1\" aria-hidden=\"true\" v-bind=\"getPTOptions('nodeToggleButton')\">\n                <template v-if=\"node.loading && loadingMode === 'icon'\">\n                    <!-- TODO: nodetogglericon deprecated since v4.0-->\n                    <component v-if=\"templates['nodetoggleicon'] || templates['nodetogglericon']\" :is=\"templates['nodetoggleicon'] || templates['nodetogglericon']\" :class=\"cx('nodeToggleIcon')\" />\n                    <SpinnerIcon v-else spin :class=\"cx('nodetogglericon')\" v-bind=\"ptm('nodeToggleIcon')\" />\n                </template>\n                <template v-else>\n                    <!-- TODO: togglericon deprecated since v4.0-->\n                    <component v-if=\"templates['nodetoggleicon'] || templates['togglericon']\" :is=\"templates['nodetoggleicon'] || templates['togglericon']\" :node=\"node\" :expanded=\"expanded\" :class=\"cx('nodeToggleIcon')\" />\n                    <component v-else-if=\"expanded\" :is=\"node.expandedIcon ? 'span' : 'ChevronDownIcon'\" :class=\"cx('nodeToggleIcon')\" v-bind=\"getPTOptions('nodeToggleIcon')\" />\n                    <component v-else :is=\"node.collapsedIcon ? 'span' : 'ChevronRightIcon'\" :class=\"cx('nodeToggleIcon')\" v-bind=\"getPTOptions('nodeToggleIcon')\" />\n                </template>\n            </button>\n            <Checkbox v-if=\"checkboxMode\" :modelValue=\"checked\" :binary=\"true\" :indeterminate=\"partialChecked\" :class=\"cx('nodeCheckbox')\" :tabindex=\"-1\" :unstyled=\"unstyled\" :pt=\"getPTOptions('nodeCheckbox')\" :data-p-partialchecked=\"partialChecked\">\n                <template #icon=\"slotProps\">\n                    <component v-if=\"templates['checkboxicon']\" :is=\"templates['checkboxicon']\" :checked=\"slotProps.checked\" :partialChecked=\"partialChecked\" :class=\"slotProps.class\" />\n                </template>\n            </Checkbox>\n            <component v-if=\"templates['nodeicon']\" :is=\"templates['nodeicon']\" :node=\"node\" :class=\"[cx('nodeIcon')]\" v-bind=\"getPTOptions('nodeIcon')\"></component>\n            <span v-else :class=\"[cx('nodeIcon'), node.icon]\" v-bind=\"getPTOptions('nodeIcon')\"></span>\n            <span :class=\"cx('nodeLabel')\" v-bind=\"getPTOptions('nodeLabel')\" @keydown.stop>\n                <component v-if=\"templates[node.type] || templates['default']\" :is=\"templates[node.type] || templates['default']\" :node=\"node\" :selected=\"checkboxMode ? checked : selected\" />\n                <template v-else>{{ label(node) }}</template>\n            </span>\n        </div>\n        <ul v-if=\"hasChildren && expanded\" :class=\"cx('nodeChildren')\" role=\"group\" v-bind=\"ptm('nodeChildren')\">\n            <TreeNode\n                v-for=\"childNode of node.children\"\n                :key=\"childNode.key\"\n                :node=\"childNode\"\n                :templates=\"templates\"\n                :level=\"level + 1\"\n                :loadingMode=\"loadingMode\"\n                :expandedKeys=\"expandedKeys\"\n                @node-toggle=\"onChildNodeToggle\"\n                @node-click=\"onChildNodeClick\"\n                :selectionMode=\"selectionMode\"\n                :selectionKeys=\"selectionKeys\"\n                @checkbox-change=\"propagateUp\"\n                :unstyled=\"unstyled\"\n                :pt=\"pt\"\n            />\n        </ul>\n    </li>\n</template>\n\n<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { getAttribute, findSingle, find } from '@primeuix/utils/dom';\nimport CheckIcon from '@primevue/icons/check';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport MinusIcon from '@primevue/icons/minus';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Checkbox from 'primevue/checkbox';\nimport Ripple from 'primevue/ripple';\n\nexport default {\n    name: 'TreeNode',\n    hostName: 'Tree',\n    extends: BaseComponent,\n    emits: ['node-toggle', 'node-click', 'checkbox-change'],\n    props: {\n        node: {\n            type: null,\n            default: null\n        },\n        expandedKeys: {\n            type: null,\n            default: null\n        },\n        loadingMode: {\n            type: String,\n            default: 'mask'\n        },\n        selectionKeys: {\n            type: null,\n            default: null\n        },\n        selectionMode: {\n            type: String,\n            default: null\n        },\n        templates: {\n            type: null,\n            default: null\n        },\n        level: {\n            type: Number,\n            default: null\n        },\n        index: null\n    },\n    nodeTouched: false,\n    toggleClicked: false,\n    mounted() {\n        this.setAllNodesTabIndexes();\n    },\n    methods: {\n        toggle() {\n            this.$emit('node-toggle', this.node);\n            this.toggleClicked = true;\n        },\n        label(node) {\n            return typeof node.label === 'function' ? node.label() : node.label;\n        },\n        onChildNodeToggle(node) {\n            this.$emit('node-toggle', node);\n        },\n        getPTOptions(key) {\n            return this.ptm(key, {\n                context: {\n                    index: this.index,\n                    expanded: this.expanded,\n                    selected: this.selected,\n                    checked: this.checked,\n                    leaf: this.leaf\n                }\n            });\n        },\n        onClick(event) {\n            if (this.toggleClicked || getAttribute(event.target, '[data-pc-section=\"nodetogglebutton\"]') || getAttribute(event.target.parentElement, '[data-pc-section=\"nodetogglebutton\"]')) {\n                this.toggleClicked = false;\n\n                return;\n            }\n\n            if (this.isCheckboxSelectionMode()) {\n                this.toggleCheckbox();\n            } else {\n                this.$emit('node-click', {\n                    originalEvent: event,\n                    nodeTouched: this.nodeTouched,\n                    node: this.node\n                });\n            }\n\n            this.nodeTouched = false;\n        },\n        onChildNodeClick(event) {\n            this.$emit('node-click', event);\n        },\n        onTouchEnd() {\n            this.nodeTouched = true;\n        },\n        onKeyDown(event) {\n            if (!this.isSameNode(event)) return;\n\n            switch (event.code) {\n                case 'Tab':\n                    this.onTabKey(event);\n\n                    break;\n\n                case 'ArrowDown':\n                    this.onArrowDown(event);\n\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUp(event);\n\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRight(event);\n\n                    break;\n\n                case 'ArrowLeft':\n                    this.onArrowLeft(event);\n\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    this.onEnterKey(event);\n\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDown(event) {\n            const nodeElement = event.target.getAttribute('data-pc-section') === 'nodetogglebutton' ? event.target.closest('[role=\"treeitem\"]') : event.target;\n            const listElement = nodeElement.children[1];\n\n            if (listElement) {\n                this.focusRowChange(nodeElement, listElement.children[0]);\n            } else {\n                if (nodeElement.nextElementSibling) {\n                    this.focusRowChange(nodeElement, nodeElement.nextElementSibling);\n                } else {\n                    let nextSiblingAncestor = this.findNextSiblingOfAncestor(nodeElement);\n\n                    if (nextSiblingAncestor) {\n                        this.focusRowChange(nodeElement, nextSiblingAncestor);\n                    }\n                }\n            }\n\n            event.preventDefault();\n        },\n        onArrowUp(event) {\n            const nodeElement = event.target;\n\n            if (nodeElement.previousElementSibling) {\n                this.focusRowChange(nodeElement, nodeElement.previousElementSibling, this.findLastVisibleDescendant(nodeElement.previousElementSibling));\n            } else {\n                let parentNodeElement = this.getParentNodeElement(nodeElement);\n\n                if (parentNodeElement) {\n                    this.focusRowChange(nodeElement, parentNodeElement);\n                }\n            }\n\n            event.preventDefault();\n        },\n        onArrowRight(event) {\n            if (this.leaf || this.expanded) return;\n\n            event.currentTarget.tabIndex = -1;\n\n            this.$emit('node-toggle', this.node);\n            this.$nextTick(() => {\n                this.onArrowDown(event);\n            });\n        },\n        onArrowLeft(event) {\n            const togglerElement = findSingle(event.currentTarget, '[data-pc-section=\"nodetogglebutton\"]');\n\n            if (this.level === 0 && !this.expanded) {\n                return false;\n            }\n\n            if (this.expanded && !this.leaf) {\n                togglerElement.click();\n\n                return false;\n            }\n\n            const target = this.findBeforeClickableNode(event.currentTarget);\n\n            if (target) {\n                this.focusRowChange(event.currentTarget, target);\n            }\n        },\n        onEnterKey(event) {\n            this.setTabIndexForSelectionMode(event, this.nodeTouched);\n            this.onClick(event);\n\n            event.preventDefault();\n        },\n        onTabKey() {\n            this.setAllNodesTabIndexes();\n        },\n        setAllNodesTabIndexes() {\n            const nodes = find(this.$refs.currentNode.closest('[data-pc-section=\"rootchildren\"]'), '[role=\"treeitem\"]');\n\n            const hasSelectedNode = [...nodes].some((node) => node.getAttribute('aria-selected') === 'true' || node.getAttribute('aria-checked') === 'true');\n\n            [...nodes].forEach((node) => {\n                node.tabIndex = -1;\n            });\n\n            if (hasSelectedNode) {\n                const selectedNodes = [...nodes].filter((node) => node.getAttribute('aria-selected') === 'true' || node.getAttribute('aria-checked') === 'true');\n\n                selectedNodes[0].tabIndex = 0;\n\n                return;\n            }\n\n            [...nodes][0].tabIndex = 0;\n        },\n        setTabIndexForSelectionMode(event, nodeTouched) {\n            if (this.selectionMode !== null) {\n                const elements = [...find(this.$refs.currentNode.parentElement, '[role=\"treeitem\"]')];\n\n                event.currentTarget.tabIndex = nodeTouched === false ? -1 : 0;\n\n                if (elements.every((element) => element.tabIndex === -1)) {\n                    elements[0].tabIndex = 0;\n                }\n            }\n        },\n        focusRowChange(firstFocusableRow, currentFocusedRow, lastVisibleDescendant) {\n            firstFocusableRow.tabIndex = '-1';\n            currentFocusedRow.tabIndex = '0';\n\n            this.focusNode(lastVisibleDescendant || currentFocusedRow);\n        },\n        findBeforeClickableNode(node) {\n            const parentListElement = node.closest('ul').closest('li');\n\n            if (parentListElement) {\n                const prevNodeButton = findSingle(parentListElement, 'button');\n\n                if (prevNodeButton && prevNodeButton.style.visibility !== 'hidden') {\n                    return parentListElement;\n                }\n\n                return this.findBeforeClickableNode(node.previousElementSibling);\n            }\n\n            return null;\n        },\n        toggleCheckbox() {\n            let _selectionKeys = this.selectionKeys ? { ...this.selectionKeys } : {};\n            const _check = !this.checked;\n\n            this.propagateDown(this.node, _check, _selectionKeys);\n\n            this.$emit('checkbox-change', {\n                node: this.node,\n                check: _check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        propagateDown(node, check, selectionKeys) {\n            if (check) selectionKeys[node.key] = { checked: true, partialChecked: false };\n            else delete selectionKeys[node.key];\n\n            if (node.children && node.children.length) {\n                for (let child of node.children) {\n                    this.propagateDown(child, check, selectionKeys);\n                }\n            }\n        },\n        propagateUp(event) {\n            let check = event.check;\n            let _selectionKeys = { ...event.selectionKeys };\n            let checkedChildCount = 0;\n            let childPartialSelected = false;\n\n            for (let child of this.node.children) {\n                if (_selectionKeys[child.key] && _selectionKeys[child.key].checked) checkedChildCount++;\n                else if (_selectionKeys[child.key] && _selectionKeys[child.key].partialChecked) childPartialSelected = true;\n            }\n\n            if (check && checkedChildCount === this.node.children.length) {\n                _selectionKeys[this.node.key] = { checked: true, partialChecked: false };\n            } else {\n                if (!check) {\n                    delete _selectionKeys[this.node.key];\n                }\n\n                if (childPartialSelected || (checkedChildCount > 0 && checkedChildCount !== this.node.children.length)) _selectionKeys[this.node.key] = { checked: false, partialChecked: true };\n                else delete _selectionKeys[this.node.key];\n            }\n\n            this.$emit('checkbox-change', {\n                node: event.node,\n                check: event.check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        onChildCheckboxChange(event) {\n            this.$emit('checkbox-change', event);\n        },\n        findNextSiblingOfAncestor(nodeElement) {\n            let parentNodeElement = this.getParentNodeElement(nodeElement);\n\n            if (parentNodeElement) {\n                if (parentNodeElement.nextElementSibling) return parentNodeElement.nextElementSibling;\n                else return this.findNextSiblingOfAncestor(parentNodeElement);\n            } else {\n                return null;\n            }\n        },\n        findLastVisibleDescendant(nodeElement) {\n            const childrenListElement = nodeElement.children[1];\n\n            if (childrenListElement) {\n                const lastChildElement = childrenListElement.children[childrenListElement.children.length - 1];\n\n                return this.findLastVisibleDescendant(lastChildElement);\n            } else {\n                return nodeElement;\n            }\n        },\n        getParentNodeElement(nodeElement) {\n            const parentNodeElement = nodeElement.parentElement.parentElement;\n\n            return getAttribute(parentNodeElement, 'role') === 'treeitem' ? parentNodeElement : null;\n        },\n        focusNode(element) {\n            element.focus();\n        },\n        isCheckboxSelectionMode() {\n            return this.selectionMode === 'checkbox';\n        },\n        isSameNode(event) {\n            return event.currentTarget && (event.currentTarget.isSameNode(event.target) || event.currentTarget.isSameNode(event.target.closest('[role=\"treeitem\"]')));\n        }\n    },\n    computed: {\n        hasChildren() {\n            return this.node.children && this.node.children.length > 0;\n        },\n        expanded() {\n            return this.expandedKeys && this.expandedKeys[this.node.key] === true;\n        },\n        leaf() {\n            return this.node.leaf === false ? false : !(this.node.children && this.node.children.length);\n        },\n        selectable() {\n            return this.node.selectable === false ? false : this.selectionMode != null;\n        },\n        selected() {\n            return this.selectionMode && this.selectionKeys ? this.selectionKeys[this.node.key] === true : false;\n        },\n        checkboxMode() {\n            return this.selectionMode === 'checkbox' && this.node.selectable !== false;\n        },\n        checked() {\n            return this.selectionKeys ? this.selectionKeys[this.node.key] && this.selectionKeys[this.node.key].checked : false;\n        },\n        partialChecked() {\n            return this.selectionKeys ? this.selectionKeys[this.node.key] && this.selectionKeys[this.node.key].partialChecked : false;\n        },\n        ariaChecked() {\n            return this.selectionMode === 'single' || this.selectionMode === 'multiple' ? this.selected : undefined;\n        },\n        ariaSelected() {\n            return this.checkboxMode ? this.checked : undefined;\n        }\n    },\n    components: {\n        Checkbox,\n        ChevronDownIcon,\n        ChevronRightIcon,\n        CheckIcon,\n        MinusIcon,\n        SpinnerIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n", "<template>\n    <li\n        ref=\"currentNode\"\n        :class=\"cx('node')\"\n        role=\"treeitem\"\n        :aria-label=\"label(node)\"\n        :aria-selected=\"ariaSelected\"\n        :aria-expanded=\"expanded\"\n        :aria-setsize=\"node.children ? node.children.length : 0\"\n        :aria-posinset=\"index + 1\"\n        :aria-level=\"level\"\n        :aria-checked=\"ariaChecked\"\n        :tabindex=\"index === 0 ? 0 : -1\"\n        @keydown=\"onKeyDown\"\n        v-bind=\"level === 1 ? getPTOptions('node') : ptm('nodeChildren')\"\n    >\n        <div :class=\"cx('nodeContent')\" @click=\"onClick\" @touchend=\"onTouchEnd\" :style=\"node.style\" v-bind=\"getPTOptions('nodeContent')\" :data-p-selected=\"checkboxMode ? checked : selected\" :data-p-selectable=\"selectable\">\n            <button v-ripple type=\"button\" :class=\"cx('nodeToggleButton')\" @click=\"toggle\" tabindex=\"-1\" aria-hidden=\"true\" v-bind=\"getPTOptions('nodeToggleButton')\">\n                <template v-if=\"node.loading && loadingMode === 'icon'\">\n                    <!-- TODO: nodetogglericon deprecated since v4.0-->\n                    <component v-if=\"templates['nodetoggleicon'] || templates['nodetogglericon']\" :is=\"templates['nodetoggleicon'] || templates['nodetogglericon']\" :class=\"cx('nodeToggleIcon')\" />\n                    <SpinnerIcon v-else spin :class=\"cx('nodetogglericon')\" v-bind=\"ptm('nodeToggleIcon')\" />\n                </template>\n                <template v-else>\n                    <!-- TODO: togglericon deprecated since v4.0-->\n                    <component v-if=\"templates['nodetoggleicon'] || templates['togglericon']\" :is=\"templates['nodetoggleicon'] || templates['togglericon']\" :node=\"node\" :expanded=\"expanded\" :class=\"cx('nodeToggleIcon')\" />\n                    <component v-else-if=\"expanded\" :is=\"node.expandedIcon ? 'span' : 'ChevronDownIcon'\" :class=\"cx('nodeToggleIcon')\" v-bind=\"getPTOptions('nodeToggleIcon')\" />\n                    <component v-else :is=\"node.collapsedIcon ? 'span' : 'ChevronRightIcon'\" :class=\"cx('nodeToggleIcon')\" v-bind=\"getPTOptions('nodeToggleIcon')\" />\n                </template>\n            </button>\n            <Checkbox v-if=\"checkboxMode\" :modelValue=\"checked\" :binary=\"true\" :indeterminate=\"partialChecked\" :class=\"cx('nodeCheckbox')\" :tabindex=\"-1\" :unstyled=\"unstyled\" :pt=\"getPTOptions('nodeCheckbox')\" :data-p-partialchecked=\"partialChecked\">\n                <template #icon=\"slotProps\">\n                    <component v-if=\"templates['checkboxicon']\" :is=\"templates['checkboxicon']\" :checked=\"slotProps.checked\" :partialChecked=\"partialChecked\" :class=\"slotProps.class\" />\n                </template>\n            </Checkbox>\n            <component v-if=\"templates['nodeicon']\" :is=\"templates['nodeicon']\" :node=\"node\" :class=\"[cx('nodeIcon')]\" v-bind=\"getPTOptions('nodeIcon')\"></component>\n            <span v-else :class=\"[cx('nodeIcon'), node.icon]\" v-bind=\"getPTOptions('nodeIcon')\"></span>\n            <span :class=\"cx('nodeLabel')\" v-bind=\"getPTOptions('nodeLabel')\" @keydown.stop>\n                <component v-if=\"templates[node.type] || templates['default']\" :is=\"templates[node.type] || templates['default']\" :node=\"node\" :selected=\"checkboxMode ? checked : selected\" />\n                <template v-else>{{ label(node) }}</template>\n            </span>\n        </div>\n        <ul v-if=\"hasChildren && expanded\" :class=\"cx('nodeChildren')\" role=\"group\" v-bind=\"ptm('nodeChildren')\">\n            <TreeNode\n                v-for=\"childNode of node.children\"\n                :key=\"childNode.key\"\n                :node=\"childNode\"\n                :templates=\"templates\"\n                :level=\"level + 1\"\n                :loadingMode=\"loadingMode\"\n                :expandedKeys=\"expandedKeys\"\n                @node-toggle=\"onChildNodeToggle\"\n                @node-click=\"onChildNodeClick\"\n                :selectionMode=\"selectionMode\"\n                :selectionKeys=\"selectionKeys\"\n                @checkbox-change=\"propagateUp\"\n                :unstyled=\"unstyled\"\n                :pt=\"pt\"\n            />\n        </ul>\n    </li>\n</template>\n\n<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { getAttribute, findSingle, find } from '@primeuix/utils/dom';\nimport CheckIcon from '@primevue/icons/check';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport MinusIcon from '@primevue/icons/minus';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Checkbox from 'primevue/checkbox';\nimport Ripple from 'primevue/ripple';\n\nexport default {\n    name: 'TreeNode',\n    hostName: 'Tree',\n    extends: BaseComponent,\n    emits: ['node-toggle', 'node-click', 'checkbox-change'],\n    props: {\n        node: {\n            type: null,\n            default: null\n        },\n        expandedKeys: {\n            type: null,\n            default: null\n        },\n        loadingMode: {\n            type: String,\n            default: 'mask'\n        },\n        selectionKeys: {\n            type: null,\n            default: null\n        },\n        selectionMode: {\n            type: String,\n            default: null\n        },\n        templates: {\n            type: null,\n            default: null\n        },\n        level: {\n            type: Number,\n            default: null\n        },\n        index: null\n    },\n    nodeTouched: false,\n    toggleClicked: false,\n    mounted() {\n        this.setAllNodesTabIndexes();\n    },\n    methods: {\n        toggle() {\n            this.$emit('node-toggle', this.node);\n            this.toggleClicked = true;\n        },\n        label(node) {\n            return typeof node.label === 'function' ? node.label() : node.label;\n        },\n        onChildNodeToggle(node) {\n            this.$emit('node-toggle', node);\n        },\n        getPTOptions(key) {\n            return this.ptm(key, {\n                context: {\n                    index: this.index,\n                    expanded: this.expanded,\n                    selected: this.selected,\n                    checked: this.checked,\n                    leaf: this.leaf\n                }\n            });\n        },\n        onClick(event) {\n            if (this.toggleClicked || getAttribute(event.target, '[data-pc-section=\"nodetogglebutton\"]') || getAttribute(event.target.parentElement, '[data-pc-section=\"nodetogglebutton\"]')) {\n                this.toggleClicked = false;\n\n                return;\n            }\n\n            if (this.isCheckboxSelectionMode()) {\n                this.toggleCheckbox();\n            } else {\n                this.$emit('node-click', {\n                    originalEvent: event,\n                    nodeTouched: this.nodeTouched,\n                    node: this.node\n                });\n            }\n\n            this.nodeTouched = false;\n        },\n        onChildNodeClick(event) {\n            this.$emit('node-click', event);\n        },\n        onTouchEnd() {\n            this.nodeTouched = true;\n        },\n        onKeyDown(event) {\n            if (!this.isSameNode(event)) return;\n\n            switch (event.code) {\n                case 'Tab':\n                    this.onTabKey(event);\n\n                    break;\n\n                case 'ArrowDown':\n                    this.onArrowDown(event);\n\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUp(event);\n\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRight(event);\n\n                    break;\n\n                case 'ArrowLeft':\n                    this.onArrowLeft(event);\n\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    this.onEnterKey(event);\n\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDown(event) {\n            const nodeElement = event.target.getAttribute('data-pc-section') === 'nodetogglebutton' ? event.target.closest('[role=\"treeitem\"]') : event.target;\n            const listElement = nodeElement.children[1];\n\n            if (listElement) {\n                this.focusRowChange(nodeElement, listElement.children[0]);\n            } else {\n                if (nodeElement.nextElementSibling) {\n                    this.focusRowChange(nodeElement, nodeElement.nextElementSibling);\n                } else {\n                    let nextSiblingAncestor = this.findNextSiblingOfAncestor(nodeElement);\n\n                    if (nextSiblingAncestor) {\n                        this.focusRowChange(nodeElement, nextSiblingAncestor);\n                    }\n                }\n            }\n\n            event.preventDefault();\n        },\n        onArrowUp(event) {\n            const nodeElement = event.target;\n\n            if (nodeElement.previousElementSibling) {\n                this.focusRowChange(nodeElement, nodeElement.previousElementSibling, this.findLastVisibleDescendant(nodeElement.previousElementSibling));\n            } else {\n                let parentNodeElement = this.getParentNodeElement(nodeElement);\n\n                if (parentNodeElement) {\n                    this.focusRowChange(nodeElement, parentNodeElement);\n                }\n            }\n\n            event.preventDefault();\n        },\n        onArrowRight(event) {\n            if (this.leaf || this.expanded) return;\n\n            event.currentTarget.tabIndex = -1;\n\n            this.$emit('node-toggle', this.node);\n            this.$nextTick(() => {\n                this.onArrowDown(event);\n            });\n        },\n        onArrowLeft(event) {\n            const togglerElement = findSingle(event.currentTarget, '[data-pc-section=\"nodetogglebutton\"]');\n\n            if (this.level === 0 && !this.expanded) {\n                return false;\n            }\n\n            if (this.expanded && !this.leaf) {\n                togglerElement.click();\n\n                return false;\n            }\n\n            const target = this.findBeforeClickableNode(event.currentTarget);\n\n            if (target) {\n                this.focusRowChange(event.currentTarget, target);\n            }\n        },\n        onEnterKey(event) {\n            this.setTabIndexForSelectionMode(event, this.nodeTouched);\n            this.onClick(event);\n\n            event.preventDefault();\n        },\n        onTabKey() {\n            this.setAllNodesTabIndexes();\n        },\n        setAllNodesTabIndexes() {\n            const nodes = find(this.$refs.currentNode.closest('[data-pc-section=\"rootchildren\"]'), '[role=\"treeitem\"]');\n\n            const hasSelectedNode = [...nodes].some((node) => node.getAttribute('aria-selected') === 'true' || node.getAttribute('aria-checked') === 'true');\n\n            [...nodes].forEach((node) => {\n                node.tabIndex = -1;\n            });\n\n            if (hasSelectedNode) {\n                const selectedNodes = [...nodes].filter((node) => node.getAttribute('aria-selected') === 'true' || node.getAttribute('aria-checked') === 'true');\n\n                selectedNodes[0].tabIndex = 0;\n\n                return;\n            }\n\n            [...nodes][0].tabIndex = 0;\n        },\n        setTabIndexForSelectionMode(event, nodeTouched) {\n            if (this.selectionMode !== null) {\n                const elements = [...find(this.$refs.currentNode.parentElement, '[role=\"treeitem\"]')];\n\n                event.currentTarget.tabIndex = nodeTouched === false ? -1 : 0;\n\n                if (elements.every((element) => element.tabIndex === -1)) {\n                    elements[0].tabIndex = 0;\n                }\n            }\n        },\n        focusRowChange(firstFocusableRow, currentFocusedRow, lastVisibleDescendant) {\n            firstFocusableRow.tabIndex = '-1';\n            currentFocusedRow.tabIndex = '0';\n\n            this.focusNode(lastVisibleDescendant || currentFocusedRow);\n        },\n        findBeforeClickableNode(node) {\n            const parentListElement = node.closest('ul').closest('li');\n\n            if (parentListElement) {\n                const prevNodeButton = findSingle(parentListElement, 'button');\n\n                if (prevNodeButton && prevNodeButton.style.visibility !== 'hidden') {\n                    return parentListElement;\n                }\n\n                return this.findBeforeClickableNode(node.previousElementSibling);\n            }\n\n            return null;\n        },\n        toggleCheckbox() {\n            let _selectionKeys = this.selectionKeys ? { ...this.selectionKeys } : {};\n            const _check = !this.checked;\n\n            this.propagateDown(this.node, _check, _selectionKeys);\n\n            this.$emit('checkbox-change', {\n                node: this.node,\n                check: _check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        propagateDown(node, check, selectionKeys) {\n            if (check) selectionKeys[node.key] = { checked: true, partialChecked: false };\n            else delete selectionKeys[node.key];\n\n            if (node.children && node.children.length) {\n                for (let child of node.children) {\n                    this.propagateDown(child, check, selectionKeys);\n                }\n            }\n        },\n        propagateUp(event) {\n            let check = event.check;\n            let _selectionKeys = { ...event.selectionKeys };\n            let checkedChildCount = 0;\n            let childPartialSelected = false;\n\n            for (let child of this.node.children) {\n                if (_selectionKeys[child.key] && _selectionKeys[child.key].checked) checkedChildCount++;\n                else if (_selectionKeys[child.key] && _selectionKeys[child.key].partialChecked) childPartialSelected = true;\n            }\n\n            if (check && checkedChildCount === this.node.children.length) {\n                _selectionKeys[this.node.key] = { checked: true, partialChecked: false };\n            } else {\n                if (!check) {\n                    delete _selectionKeys[this.node.key];\n                }\n\n                if (childPartialSelected || (checkedChildCount > 0 && checkedChildCount !== this.node.children.length)) _selectionKeys[this.node.key] = { checked: false, partialChecked: true };\n                else delete _selectionKeys[this.node.key];\n            }\n\n            this.$emit('checkbox-change', {\n                node: event.node,\n                check: event.check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        onChildCheckboxChange(event) {\n            this.$emit('checkbox-change', event);\n        },\n        findNextSiblingOfAncestor(nodeElement) {\n            let parentNodeElement = this.getParentNodeElement(nodeElement);\n\n            if (parentNodeElement) {\n                if (parentNodeElement.nextElementSibling) return parentNodeElement.nextElementSibling;\n                else return this.findNextSiblingOfAncestor(parentNodeElement);\n            } else {\n                return null;\n            }\n        },\n        findLastVisibleDescendant(nodeElement) {\n            const childrenListElement = nodeElement.children[1];\n\n            if (childrenListElement) {\n                const lastChildElement = childrenListElement.children[childrenListElement.children.length - 1];\n\n                return this.findLastVisibleDescendant(lastChildElement);\n            } else {\n                return nodeElement;\n            }\n        },\n        getParentNodeElement(nodeElement) {\n            const parentNodeElement = nodeElement.parentElement.parentElement;\n\n            return getAttribute(parentNodeElement, 'role') === 'treeitem' ? parentNodeElement : null;\n        },\n        focusNode(element) {\n            element.focus();\n        },\n        isCheckboxSelectionMode() {\n            return this.selectionMode === 'checkbox';\n        },\n        isSameNode(event) {\n            return event.currentTarget && (event.currentTarget.isSameNode(event.target) || event.currentTarget.isSameNode(event.target.closest('[role=\"treeitem\"]')));\n        }\n    },\n    computed: {\n        hasChildren() {\n            return this.node.children && this.node.children.length > 0;\n        },\n        expanded() {\n            return this.expandedKeys && this.expandedKeys[this.node.key] === true;\n        },\n        leaf() {\n            return this.node.leaf === false ? false : !(this.node.children && this.node.children.length);\n        },\n        selectable() {\n            return this.node.selectable === false ? false : this.selectionMode != null;\n        },\n        selected() {\n            return this.selectionMode && this.selectionKeys ? this.selectionKeys[this.node.key] === true : false;\n        },\n        checkboxMode() {\n            return this.selectionMode === 'checkbox' && this.node.selectable !== false;\n        },\n        checked() {\n            return this.selectionKeys ? this.selectionKeys[this.node.key] && this.selectionKeys[this.node.key].checked : false;\n        },\n        partialChecked() {\n            return this.selectionKeys ? this.selectionKeys[this.node.key] && this.selectionKeys[this.node.key].partialChecked : false;\n        },\n        ariaChecked() {\n            return this.selectionMode === 'single' || this.selectionMode === 'multiple' ? this.selected : undefined;\n        },\n        ariaSelected() {\n            return this.checkboxMode ? this.checked : undefined;\n        }\n    },\n    components: {\n        Checkbox,\n        ChevronDownIcon,\n        ChevronRightIcon,\n        CheckIcon,\n        MinusIcon,\n        SpinnerIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <template v-if=\"loading && loadingMode === 'mask'\">\n            <div :class=\"cx('mask')\" v-bind=\"ptm('mask')\">\n                <slot name=\"loadingicon\" :class=\"cx('loadingIcon')\">\n                    <i v-if=\"loadingIcon\" :class=\"[cx('loadingIcon'), 'pi-spin', loadingIcon]\" v-bind=\"ptm('loadingIcon')\" />\n                    <SpinnerIcon v-else spin :class=\"cx('loadingIcon')\" v-bind=\"ptm('loadingIcon')\" />\n                </slot>\n            </div>\n        </template>\n        <IconField v-if=\"filter\" :unstyled=\"unstyled\" v-bind=\"ptm('pcFilterContainer')\">\n            <InputText v-model=\"filterValue\" autocomplete=\"off\" :class=\"cx('pcFilterInput')\" :placeholder=\"filterPlaceholder\" :unstyled=\"unstyled\" @keydown=\"onFilterKeydown\" v-bind=\"ptm('pcFilterInput')\" />\n            <InputIcon :unstyled=\"unstyled\" v-bind=\"ptm('pcFilterIconContainer')\">\n                <!--TODO: searchicon deprecated since v4.0-->\n                <slot :name=\"$slots.filtericon ? 'filtericon' : 'searchicon'\" :class=\"cx('filterIcon')\">\n                    <SearchIcon :class=\"cx('filterIcon')\" v-bind=\"ptm('filterIcon')\" />\n                </slot>\n            </InputIcon>\n        </IconField>\n        <div :class=\"cx('wrapper')\" :style=\"{ maxHeight: scrollHeight }\" v-bind=\"ptm('wrapper')\">\n            <ul :class=\"cx('rootChildren')\" role=\"tree\" :aria-labelledby=\"ariaLabelledby\" :aria-label=\"ariaLabel\" v-bind=\"ptm('rootChildren')\">\n                <TreeNode\n                    v-for=\"(node, index) of valueToRender\"\n                    :key=\"node.key\"\n                    :node=\"node\"\n                    :templates=\"$slots\"\n                    :level=\"level + 1\"\n                    :index=\"index\"\n                    :expandedKeys=\"d_expandedKeys\"\n                    @node-toggle=\"onNodeToggle\"\n                    @node-click=\"onNodeClick\"\n                    :selectionMode=\"selectionMode\"\n                    :selectionKeys=\"selectionKeys\"\n                    @checkbox-change=\"onCheckboxChange\"\n                    :loadingMode=\"loadingMode\"\n                    :unstyled=\"unstyled\"\n                    :pt=\"pt\"\n                ></TreeNode>\n            </ul>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { resolveFieldData } from '@primeuix/utils/object';\nimport SearchIcon from '@primevue/icons/search';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport IconField from 'primevue/iconfield';\nimport InputIcon from 'primevue/inputicon';\nimport InputText from 'primevue/inputtext';\nimport BaseTree from './BaseTree.vue';\nimport TreeNode from './TreeNode.vue';\n\nexport default {\n    name: 'Tree',\n    extends: BaseTree,\n    inheritAttrs: false,\n    emits: ['node-expand', 'node-collapse', 'update:expandedKeys', 'update:selectionKeys', 'node-select', 'node-unselect', 'filter'],\n    data() {\n        return {\n            d_expandedKeys: this.expandedKeys || {},\n            filterValue: null\n        };\n    },\n    watch: {\n        expandedKeys(newValue) {\n            this.d_expandedKeys = newValue;\n        }\n    },\n    methods: {\n        onNodeToggle(node) {\n            const key = node.key;\n\n            if (this.d_expandedKeys[key]) {\n                delete this.d_expandedKeys[key];\n                this.$emit('node-collapse', node);\n            } else {\n                this.d_expandedKeys[key] = true;\n                this.$emit('node-expand', node);\n            }\n\n            this.d_expandedKeys = { ...this.d_expandedKeys };\n            this.$emit('update:expandedKeys', this.d_expandedKeys);\n        },\n        onNodeClick(event) {\n            if (this.selectionMode != null && event.node.selectable !== false) {\n                const metaSelection = event.nodeTouched ? false : this.metaKeySelection;\n                const _selectionKeys = metaSelection ? this.handleSelectionWithMetaKey(event) : this.handleSelectionWithoutMetaKey(event);\n\n                this.$emit('update:selectionKeys', _selectionKeys);\n            }\n        },\n        onCheckboxChange(event) {\n            this.$emit('update:selectionKeys', event.selectionKeys);\n\n            if (event.check) this.$emit('node-select', event.node);\n            else this.$emit('node-unselect', event.node);\n        },\n        handleSelectionWithMetaKey(event) {\n            const originalEvent = event.originalEvent;\n            const node = event.node;\n            const metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            const selected = this.isNodeSelected(node);\n            let _selectionKeys;\n\n            if (selected && metaKey) {\n                if (this.isSingleSelectionMode()) {\n                    _selectionKeys = {};\n                } else {\n                    _selectionKeys = { ...this.selectionKeys };\n                    delete _selectionKeys[node.key];\n                }\n\n                this.$emit('node-unselect', node);\n            } else {\n                if (this.isSingleSelectionMode()) {\n                    _selectionKeys = {};\n                } else if (this.isMultipleSelectionMode()) {\n                    _selectionKeys = !metaKey ? {} : this.selectionKeys ? { ...this.selectionKeys } : {};\n                }\n\n                _selectionKeys[node.key] = true;\n                this.$emit('node-select', node);\n            }\n\n            return _selectionKeys;\n        },\n        handleSelectionWithoutMetaKey(event) {\n            const node = event.node;\n            const selected = this.isNodeSelected(node);\n            let _selectionKeys;\n\n            if (this.isSingleSelectionMode()) {\n                if (selected) {\n                    _selectionKeys = {};\n                    this.$emit('node-unselect', node);\n                } else {\n                    _selectionKeys = {};\n                    _selectionKeys[node.key] = true;\n                    this.$emit('node-select', node);\n                }\n            } else {\n                if (selected) {\n                    _selectionKeys = { ...this.selectionKeys };\n                    delete _selectionKeys[node.key];\n\n                    this.$emit('node-unselect', node);\n                } else {\n                    _selectionKeys = this.selectionKeys ? { ...this.selectionKeys } : {};\n                    _selectionKeys[node.key] = true;\n\n                    this.$emit('node-select', node);\n                }\n            }\n\n            return _selectionKeys;\n        },\n        isSingleSelectionMode() {\n            return this.selectionMode === 'single';\n        },\n        isMultipleSelectionMode() {\n            return this.selectionMode === 'multiple';\n        },\n        isNodeSelected(node) {\n            return this.selectionMode && this.selectionKeys ? this.selectionKeys[node.key] === true : false;\n        },\n        isChecked(node) {\n            return this.selectionKeys ? this.selectionKeys[node.key] && this.selectionKeys[node.key].checked : false;\n        },\n        isNodeLeaf(node) {\n            return node.leaf === false ? false : !(node.children && node.children.length);\n        },\n        onFilterKeydown(event) {\n            if (event.code === 'Enter' || event.code === 'NumpadEnter') {\n                event.preventDefault();\n            }\n\n            this.$emit('filter', { originalEvent: event, value: event.target.value });\n        },\n        findFilteredNodes(node, paramsWithoutNode) {\n            if (node) {\n                let matched = false;\n\n                if (node.children) {\n                    let childNodes = [...node.children];\n\n                    node.children = [];\n\n                    for (let childNode of childNodes) {\n                        let copyChildNode = { ...childNode };\n\n                        if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                            matched = true;\n                            node.children.push(copyChildNode);\n                        }\n                    }\n                }\n\n                if (matched) {\n                    return true;\n                }\n            }\n        },\n        isFilterMatched(node, { searchFields, filterText, strict }) {\n            let matched = false;\n\n            for (let field of searchFields) {\n                let fieldValue = String(resolveFieldData(node, field)).toLocaleLowerCase(this.filterLocale);\n\n                if (fieldValue.indexOf(filterText) > -1) {\n                    matched = true;\n                }\n            }\n\n            if (!matched || (strict && !this.isNodeLeaf(node))) {\n                matched = this.findFilteredNodes(node, { searchFields, filterText, strict }) || matched;\n            }\n\n            return matched;\n        }\n    },\n    computed: {\n        filteredValue() {\n            let filteredNodes = [];\n            const searchFields = this.filterBy.split(',');\n            const filterText = this.filterValue.trim().toLocaleLowerCase(this.filterLocale);\n            const strict = this.filterMode === 'strict';\n\n            for (let node of this.value) {\n                let _node = { ...node };\n                let paramsWithoutNode = { searchFields, filterText, strict };\n\n                if (\n                    (strict && (this.findFilteredNodes(_node, paramsWithoutNode) || this.isFilterMatched(_node, paramsWithoutNode))) ||\n                    (!strict && (this.isFilterMatched(_node, paramsWithoutNode) || this.findFilteredNodes(_node, paramsWithoutNode)))\n                ) {\n                    filteredNodes.push(_node);\n                }\n            }\n\n            return filteredNodes;\n        },\n        valueToRender() {\n            if (this.filterValue && this.filterValue.trim().length > 0) return this.filteredValue;\n            else return this.value;\n        }\n    },\n    components: {\n        TreeNode,\n        InputText,\n        InputIcon,\n        IconField,\n        SearchIcon,\n        SpinnerIcon\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <template v-if=\"loading && loadingMode === 'mask'\">\n            <div :class=\"cx('mask')\" v-bind=\"ptm('mask')\">\n                <slot name=\"loadingicon\" :class=\"cx('loadingIcon')\">\n                    <i v-if=\"loadingIcon\" :class=\"[cx('loadingIcon'), 'pi-spin', loadingIcon]\" v-bind=\"ptm('loadingIcon')\" />\n                    <SpinnerIcon v-else spin :class=\"cx('loadingIcon')\" v-bind=\"ptm('loadingIcon')\" />\n                </slot>\n            </div>\n        </template>\n        <IconField v-if=\"filter\" :unstyled=\"unstyled\" v-bind=\"ptm('pcFilterContainer')\">\n            <InputText v-model=\"filterValue\" autocomplete=\"off\" :class=\"cx('pcFilterInput')\" :placeholder=\"filterPlaceholder\" :unstyled=\"unstyled\" @keydown=\"onFilterKeydown\" v-bind=\"ptm('pcFilterInput')\" />\n            <InputIcon :unstyled=\"unstyled\" v-bind=\"ptm('pcFilterIconContainer')\">\n                <!--TODO: searchicon deprecated since v4.0-->\n                <slot :name=\"$slots.filtericon ? 'filtericon' : 'searchicon'\" :class=\"cx('filterIcon')\">\n                    <SearchIcon :class=\"cx('filterIcon')\" v-bind=\"ptm('filterIcon')\" />\n                </slot>\n            </InputIcon>\n        </IconField>\n        <div :class=\"cx('wrapper')\" :style=\"{ maxHeight: scrollHeight }\" v-bind=\"ptm('wrapper')\">\n            <ul :class=\"cx('rootChildren')\" role=\"tree\" :aria-labelledby=\"ariaLabelledby\" :aria-label=\"ariaLabel\" v-bind=\"ptm('rootChildren')\">\n                <TreeNode\n                    v-for=\"(node, index) of valueToRender\"\n                    :key=\"node.key\"\n                    :node=\"node\"\n                    :templates=\"$slots\"\n                    :level=\"level + 1\"\n                    :index=\"index\"\n                    :expandedKeys=\"d_expandedKeys\"\n                    @node-toggle=\"onNodeToggle\"\n                    @node-click=\"onNodeClick\"\n                    :selectionMode=\"selectionMode\"\n                    :selectionKeys=\"selectionKeys\"\n                    @checkbox-change=\"onCheckboxChange\"\n                    :loadingMode=\"loadingMode\"\n                    :unstyled=\"unstyled\"\n                    :pt=\"pt\"\n                ></TreeNode>\n            </ul>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { resolveFieldData } from '@primeuix/utils/object';\nimport SearchIcon from '@primevue/icons/search';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport IconField from 'primevue/iconfield';\nimport InputIcon from 'primevue/inputicon';\nimport InputText from 'primevue/inputtext';\nimport BaseTree from './BaseTree.vue';\nimport TreeNode from './TreeNode.vue';\n\nexport default {\n    name: 'Tree',\n    extends: BaseTree,\n    inheritAttrs: false,\n    emits: ['node-expand', 'node-collapse', 'update:expandedKeys', 'update:selectionKeys', 'node-select', 'node-unselect', 'filter'],\n    data() {\n        return {\n            d_expandedKeys: this.expandedKeys || {},\n            filterValue: null\n        };\n    },\n    watch: {\n        expandedKeys(newValue) {\n            this.d_expandedKeys = newValue;\n        }\n    },\n    methods: {\n        onNodeToggle(node) {\n            const key = node.key;\n\n            if (this.d_expandedKeys[key]) {\n                delete this.d_expandedKeys[key];\n                this.$emit('node-collapse', node);\n            } else {\n                this.d_expandedKeys[key] = true;\n                this.$emit('node-expand', node);\n            }\n\n            this.d_expandedKeys = { ...this.d_expandedKeys };\n            this.$emit('update:expandedKeys', this.d_expandedKeys);\n        },\n        onNodeClick(event) {\n            if (this.selectionMode != null && event.node.selectable !== false) {\n                const metaSelection = event.nodeTouched ? false : this.metaKeySelection;\n                const _selectionKeys = metaSelection ? this.handleSelectionWithMetaKey(event) : this.handleSelectionWithoutMetaKey(event);\n\n                this.$emit('update:selectionKeys', _selectionKeys);\n            }\n        },\n        onCheckboxChange(event) {\n            this.$emit('update:selectionKeys', event.selectionKeys);\n\n            if (event.check) this.$emit('node-select', event.node);\n            else this.$emit('node-unselect', event.node);\n        },\n        handleSelectionWithMetaKey(event) {\n            const originalEvent = event.originalEvent;\n            const node = event.node;\n            const metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            const selected = this.isNodeSelected(node);\n            let _selectionKeys;\n\n            if (selected && metaKey) {\n                if (this.isSingleSelectionMode()) {\n                    _selectionKeys = {};\n                } else {\n                    _selectionKeys = { ...this.selectionKeys };\n                    delete _selectionKeys[node.key];\n                }\n\n                this.$emit('node-unselect', node);\n            } else {\n                if (this.isSingleSelectionMode()) {\n                    _selectionKeys = {};\n                } else if (this.isMultipleSelectionMode()) {\n                    _selectionKeys = !metaKey ? {} : this.selectionKeys ? { ...this.selectionKeys } : {};\n                }\n\n                _selectionKeys[node.key] = true;\n                this.$emit('node-select', node);\n            }\n\n            return _selectionKeys;\n        },\n        handleSelectionWithoutMetaKey(event) {\n            const node = event.node;\n            const selected = this.isNodeSelected(node);\n            let _selectionKeys;\n\n            if (this.isSingleSelectionMode()) {\n                if (selected) {\n                    _selectionKeys = {};\n                    this.$emit('node-unselect', node);\n                } else {\n                    _selectionKeys = {};\n                    _selectionKeys[node.key] = true;\n                    this.$emit('node-select', node);\n                }\n            } else {\n                if (selected) {\n                    _selectionKeys = { ...this.selectionKeys };\n                    delete _selectionKeys[node.key];\n\n                    this.$emit('node-unselect', node);\n                } else {\n                    _selectionKeys = this.selectionKeys ? { ...this.selectionKeys } : {};\n                    _selectionKeys[node.key] = true;\n\n                    this.$emit('node-select', node);\n                }\n            }\n\n            return _selectionKeys;\n        },\n        isSingleSelectionMode() {\n            return this.selectionMode === 'single';\n        },\n        isMultipleSelectionMode() {\n            return this.selectionMode === 'multiple';\n        },\n        isNodeSelected(node) {\n            return this.selectionMode && this.selectionKeys ? this.selectionKeys[node.key] === true : false;\n        },\n        isChecked(node) {\n            return this.selectionKeys ? this.selectionKeys[node.key] && this.selectionKeys[node.key].checked : false;\n        },\n        isNodeLeaf(node) {\n            return node.leaf === false ? false : !(node.children && node.children.length);\n        },\n        onFilterKeydown(event) {\n            if (event.code === 'Enter' || event.code === 'NumpadEnter') {\n                event.preventDefault();\n            }\n\n            this.$emit('filter', { originalEvent: event, value: event.target.value });\n        },\n        findFilteredNodes(node, paramsWithoutNode) {\n            if (node) {\n                let matched = false;\n\n                if (node.children) {\n                    let childNodes = [...node.children];\n\n                    node.children = [];\n\n                    for (let childNode of childNodes) {\n                        let copyChildNode = { ...childNode };\n\n                        if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                            matched = true;\n                            node.children.push(copyChildNode);\n                        }\n                    }\n                }\n\n                if (matched) {\n                    return true;\n                }\n            }\n        },\n        isFilterMatched(node, { searchFields, filterText, strict }) {\n            let matched = false;\n\n            for (let field of searchFields) {\n                let fieldValue = String(resolveFieldData(node, field)).toLocaleLowerCase(this.filterLocale);\n\n                if (fieldValue.indexOf(filterText) > -1) {\n                    matched = true;\n                }\n            }\n\n            if (!matched || (strict && !this.isNodeLeaf(node))) {\n                matched = this.findFilteredNodes(node, { searchFields, filterText, strict }) || matched;\n            }\n\n            return matched;\n        }\n    },\n    computed: {\n        filteredValue() {\n            let filteredNodes = [];\n            const searchFields = this.filterBy.split(',');\n            const filterText = this.filterValue.trim().toLocaleLowerCase(this.filterLocale);\n            const strict = this.filterMode === 'strict';\n\n            for (let node of this.value) {\n                let _node = { ...node };\n                let paramsWithoutNode = { searchFields, filterText, strict };\n\n                if (\n                    (strict && (this.findFilteredNodes(_node, paramsWithoutNode) || this.isFilterMatched(_node, paramsWithoutNode))) ||\n                    (!strict && (this.isFilterMatched(_node, paramsWithoutNode) || this.findFilteredNodes(_node, paramsWithoutNode)))\n                ) {\n                    filteredNodes.push(_node);\n                }\n            }\n\n            return filteredNodes;\n        },\n        valueToRender() {\n            if (this.filterValue && this.filterValue.trim().length > 0) return this.filteredValue;\n            else return this.value;\n        }\n    },\n    components: {\n        TreeNode,\n        InputText,\n        InputIcon,\n        IconField,\n        SearchIcon,\n        SpinnerIcon\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["theme", "_ref", "dt", "concat", "classes", "root", "_ref2", "props", "selectionMode", "loading", "scrollHeight", "mask", "loadingIcon", "pcFilterInput", "wrapper", "rootChildren", "node", "_ref3", "instance", "leaf", "nodeContent", "_ref4", "styleClass", "selectable", "checkboxMode", "$parentInstance", "highlightOnSelect", "checked", "selected", "nodeToggleButton", "nodeToggleIcon", "nodeCheckbox", "nodeIcon", "nodeLabel", "nodeChildren", "BaseStyle", "extend", "name", "name", "BaseComponent", "props", "value", "type", "expandedKeys", "selectionKeys", "selectionMode", "String", "metaKeySelection", "Boolean", "loading", "loadingIcon", "undefined", "loadingMode", "filter", "filterBy", "filterMode", "filterPlaceholder", "filterLocale", "highlightOnSelect", "scrollHeight", "level", "Number", "ariaLabelledby", "ariaLabel", "style", "TreeStyle", "provide", "$pcTree", "$parentInstance", "hostName", "emits", "node", "templates", "index", "nodeTouched", "toggleClicked", "mounted", "setAllNodesTabIndexes", "methods", "toggle", "$emit", "label", "onChildNodeToggle", "getPTOptions", "key", "ptm", "context", "expanded", "selected", "checked", "leaf", "onClick", "event", "getAttribute", "target", "parentElement", "isCheckboxSelectionMode", "toggleCheckbox", "originalEvent", "onChildNodeClick", "onTouchEnd", "onKeyDown", "isSameNode", "code", "onTabKey", "onArrowDown", "onArrowUp", "onArrowRight", "onArrowLeft", "onEnterKey", "nodeElement", "closest", "listElement", "children", "focusRowChange", "nextElementSibling", "nextSiblingAncestor", "findNextSiblingOfAncestor", "preventDefault", "previousElementSibling", "findLastVisibleDescendant", "parentNodeElement", "getParentNodeElement", "_this", "currentTarget", "tabIndex", "$nextTick", "togglerElement", "findSingle", "click", "findBeforeClickableNode", "setTabIndexForSelectionMode", "nodes", "find", "$refs", "currentNode", "hasSelectedNode", "_toConsumableArray", "some", "forEach", "selectedNodes", "elements", "every", "element", "firstFocusableRow", "currentFocusedRow", "lastVisibleDescendant", "focusNode", "parentListElement", "prevNodeButton", "visibility", "_selectionKeys", "_objectSpread", "_check", "propagateDown", "check", "partialChecked", "length", "_iterator", "_createForOfIteratorHelper", "_step", "s", "n", "done", "child", "err", "e", "f", "propagateUp", "checkedChildCount", "childPartialSelected", "_iterator2", "_step2", "onChildCheckboxChange", "childrenListElement", "lastChildElement", "focus", "computed", "hasChildren", "selectable", "checkboxMode", "ariaChecked", "ariaSelected", "components", "Checkbox", "ChevronDownIcon", "ChevronRightIcon", "CheckIcon", "MinusIcon", "SpinnerIcon", "directives", "ripple", "Ripple", "_openBlock", "_createElementBlock", "_mergeProps", "ref", "_ctx", "cx", "role", "$options", "$props", "tabindex", "onKeydown", "apply", "arguments", "_createElementVNode", "onTouchend", "_withDirectives", "_Fragment", "_createBlock", "_resolveDynamicComponent", "_component_SpinnerIcon", "spin", "expandedIcon", "collapsedIcon", "_component_Checkbox", "modelValue", "binary", "indeterminate", "unstyled", "pt", "icon", "_withCtx", "slotProps", "_normalizeClass", "_createTextVNode", "_toDisplayString", "_renderList", "childNode", "_component_TreeNode", "onNodeToggle", "onNodeClick", "onCheckboxChange", "script", "BaseTree", "inheritAttrs", "data", "d_expandedKeys", "filterValue", "watch", "newValue", "metaSelection", "handleSelectionWithMetaKey", "handleSelectionWithoutMetaKey", "metaKey", "ctrlKey", "isNodeSelected", "isSingleSelectionMode", "isMultipleSelectionMode", "isChecked", "isNodeLeaf", "onFilterKeydown", "findFilteredNodes", "paramsWithoutNode", "matched", "childNodes", "copyChildNode", "isFilterMatched", "push", "_ref", "searchFields", "filterText", "strict", "field", "fieldValue", "resolveFieldData", "toLocaleLowerCase", "indexOf", "filteredValue", "filteredNodes", "split", "trim", "_iterator3", "_step3", "_node", "valueToRender", "TreeNode", "InputText", "InputIcon", "IconField", "SearchIcon", "ptmi", "_renderSlot", "$slots", "_component_IconField", "_createVNode", "_component_InputText", "$data", "$event", "autocomplete", "placeholder", "_component_InputIcon", "filtericon", "_component_SearchIcon"]
}
