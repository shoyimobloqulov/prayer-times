{
  "version": 3,
  "sources": ["../../src/panel/style/PanelStyle.js", "../../src/panel/BasePanel.vue", "../../src/panel/Panel.vue", "../../src/panel/Panel.vue?vue&type=template&id=13108902&lang.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nconst theme = ({ dt }) => `\n.p-panel {\n    border: 1px solid ${dt('panel.border.color')};\n    border-radius: ${dt('panel.border.radius')};\n    background: ${dt('panel.background')};\n    color: ${dt('panel.color')};\n}\n\n.p-panel-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: ${dt('panel.header.padding')};\n    background: ${dt('panel.header.background')};\n    color: ${dt('panel.header.color')};\n    border-style: solid;\n    border-width: ${dt('panel.header.border.width')};\n    border-color: ${dt('panel.header.border.color')};\n    border-radius: ${dt('panel.header.border.radius')};\n}\n\n.p-panel-toggleable .p-panel-header {\n    padding: ${dt('panel.toggleable.header.padding')};\n}\n\n.p-panel-title {\n    line-height: 1;\n    font-weight: ${dt('panel.title.font.weight')};\n}\n\n.p-panel-content {\n    padding: ${dt('panel.content.padding')};\n}\n\n.p-panel-footer {\n    padding: ${dt('panel.footer.padding')};\n}\n`;\n\nconst classes = {\n    root: ({ props }) => [\n        'p-panel p-component',\n        {\n            'p-panel-toggleable': props.toggleable\n        }\n    ],\n    header: 'p-panel-header',\n    title: 'p-panel-title',\n    headerActions: 'p-panel-header-actions',\n    pcToggleButton: 'p-panel-toggle-button',\n    contentContainer: 'p-panel-content-container',\n    content: 'p-panel-content',\n    footer: 'p-panel-footer'\n};\n\nexport default BaseStyle.extend({\n    name: 'panel',\n    theme,\n    classes\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport PanelStyle from 'primevue/panel/style';\n\nexport default {\n    name: 'BasePanel',\n    extends: BaseComponent,\n    props: {\n        header: String,\n        toggleable: Boolean,\n        collapsed: Boolean,\n        toggleButtonProps: {\n            type: Object,\n            default: () => {\n                return {\n                    severity: 'secondary',\n                    text: true,\n                    rounded: true\n                };\n            }\n        }\n    },\n    style: PanelStyle,\n    provide() {\n        return {\n            $pcPanel: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <div :class=\"cx('header')\" v-bind=\"ptm('header')\">\n            <slot :id=\"id + '_header'\" name=\"header\" :class=\"cx('title')\">\n                <span v-if=\"header\" :id=\"id + '_header'\" :class=\"cx('title')\" v-bind=\"ptm('title')\">{{ header }}</span>\n            </slot>\n            <div :class=\"cx('headerActions')\" v-bind=\"ptm('headerActions')\">\n                <slot name=\"icons\"></slot>\n                <Button\n                    v-if=\"toggleable\"\n                    :id=\"id + '_header'\"\n                    :class=\"cx('pcToggleButton')\"\n                    :aria-label=\"buttonAriaLabel\"\n                    :aria-controls=\"id + '_content'\"\n                    :aria-expanded=\"!d_collapsed\"\n                    :unstyled=\"unstyled\"\n                    @click=\"toggle\"\n                    @keydown=\"onKeyDown\"\n                    v-bind=\"toggleButtonProps\"\n                    :pt=\"ptm('pcToggleButton')\"\n                >\n                    <template #icon=\"slotProps\">\n                        <!--TODO: togglericon deprecated since v4.0-->\n                        <slot :name=\"$slots.toggleicon ? 'toggleicon' : 'togglericon'\" :collapsed=\"d_collapsed\">\n                            <component :is=\"d_collapsed ? 'PlusIcon' : 'MinusIcon'\" :class=\"slotProps.class\" v-bind=\"ptm('pcToggleButton')['icon']\" />\n                        </slot>\n                    </template>\n                </Button>\n            </div>\n        </div>\n        <transition name=\"p-toggleable-content\" v-bind=\"ptm('transition')\">\n            <div v-show=\"!d_collapsed\" :id=\"id + '_content'\" :class=\"cx('contentContainer')\" role=\"region\" :aria-labelledby=\"id + '_header'\" v-bind=\"ptm('contentContainer')\">\n                <div :class=\"cx('content')\" v-bind=\"ptm('content')\">\n                    <slot></slot>\n                </div>\n                <div v-if=\"$slots.footer\" :class=\"cx('footer')\" v-bind=\"ptm('footer')\">\n                    <slot name=\"footer\"></slot>\n                </div>\n            </div>\n        </transition>\n    </div>\n</template>\n\n<script>\nimport { UniqueComponentId } from '@primevue/core/utils';\nimport MinusIcon from '@primevue/icons/minus';\nimport PlusIcon from '@primevue/icons/plus';\nimport Button from 'primevue/button';\nimport Ripple from 'primevue/ripple';\nimport BasePanel from './BasePanel.vue';\n\nexport default {\n    name: 'Panel',\n    extends: BasePanel,\n    inheritAttrs: false,\n    emits: ['update:collapsed', 'toggle'],\n    data() {\n        return {\n            id: this.$attrs.id,\n            d_collapsed: this.collapsed\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        collapsed(newValue) {\n            this.d_collapsed = newValue;\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n    },\n    methods: {\n        toggle(event) {\n            this.d_collapsed = !this.d_collapsed;\n            this.$emit('update:collapsed', this.d_collapsed);\n            this.$emit('toggle', {\n                originalEvent: event,\n                value: this.d_collapsed\n            });\n        },\n        onKeyDown(event) {\n            if (event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') {\n                this.toggle(event);\n                event.preventDefault();\n            }\n        }\n    },\n    computed: {\n        buttonAriaLabel() {\n            return this.toggleButtonProps && this.toggleButtonProps.ariaLabel ? this.toggleButtonProps.ariaLabel : this.header;\n        }\n    },\n    components: {\n        PlusIcon,\n        MinusIcon,\n        Button\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <div :class=\"cx('header')\" v-bind=\"ptm('header')\">\n            <slot :id=\"id + '_header'\" name=\"header\" :class=\"cx('title')\">\n                <span v-if=\"header\" :id=\"id + '_header'\" :class=\"cx('title')\" v-bind=\"ptm('title')\">{{ header }}</span>\n            </slot>\n            <div :class=\"cx('headerActions')\" v-bind=\"ptm('headerActions')\">\n                <slot name=\"icons\"></slot>\n                <Button\n                    v-if=\"toggleable\"\n                    :id=\"id + '_header'\"\n                    :class=\"cx('pcToggleButton')\"\n                    :aria-label=\"buttonAriaLabel\"\n                    :aria-controls=\"id + '_content'\"\n                    :aria-expanded=\"!d_collapsed\"\n                    :unstyled=\"unstyled\"\n                    @click=\"toggle\"\n                    @keydown=\"onKeyDown\"\n                    v-bind=\"toggleButtonProps\"\n                    :pt=\"ptm('pcToggleButton')\"\n                >\n                    <template #icon=\"slotProps\">\n                        <!--TODO: togglericon deprecated since v4.0-->\n                        <slot :name=\"$slots.toggleicon ? 'toggleicon' : 'togglericon'\" :collapsed=\"d_collapsed\">\n                            <component :is=\"d_collapsed ? 'PlusIcon' : 'MinusIcon'\" :class=\"slotProps.class\" v-bind=\"ptm('pcToggleButton')['icon']\" />\n                        </slot>\n                    </template>\n                </Button>\n            </div>\n        </div>\n        <transition name=\"p-toggleable-content\" v-bind=\"ptm('transition')\">\n            <div v-show=\"!d_collapsed\" :id=\"id + '_content'\" :class=\"cx('contentContainer')\" role=\"region\" :aria-labelledby=\"id + '_header'\" v-bind=\"ptm('contentContainer')\">\n                <div :class=\"cx('content')\" v-bind=\"ptm('content')\">\n                    <slot></slot>\n                </div>\n                <div v-if=\"$slots.footer\" :class=\"cx('footer')\" v-bind=\"ptm('footer')\">\n                    <slot name=\"footer\"></slot>\n                </div>\n            </div>\n        </transition>\n    </div>\n</template>\n\n<script>\nimport { UniqueComponentId } from '@primevue/core/utils';\nimport MinusIcon from '@primevue/icons/minus';\nimport PlusIcon from '@primevue/icons/plus';\nimport Button from 'primevue/button';\nimport Ripple from 'primevue/ripple';\nimport BasePanel from './BasePanel.vue';\n\nexport default {\n    name: 'Panel',\n    extends: BasePanel,\n    inheritAttrs: false,\n    emits: ['update:collapsed', 'toggle'],\n    data() {\n        return {\n            id: this.$attrs.id,\n            d_collapsed: this.collapsed\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        collapsed(newValue) {\n            this.d_collapsed = newValue;\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n    },\n    methods: {\n        toggle(event) {\n            this.d_collapsed = !this.d_collapsed;\n            this.$emit('update:collapsed', this.d_collapsed);\n            this.$emit('toggle', {\n                originalEvent: event,\n                value: this.d_collapsed\n            });\n        },\n        onKeyDown(event) {\n            if (event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') {\n                this.toggle(event);\n                event.preventDefault();\n            }\n        }\n    },\n    computed: {\n        buttonAriaLabel() {\n            return this.toggleButtonProps && this.toggleButtonProps.ariaLabel ? this.toggleButtonProps.ariaLabel : this.header;\n        }\n    },\n    components: {\n        PlusIcon,\n        MinusIcon,\n        Button\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["theme", "_ref", "dt", "concat", "classes", "root", "_ref2", "props", "toggleable", "header", "title", "headerActions", "pcToggleButton", "contentContainer", "content", "footer", "BaseStyle", "extend", "name", "name", "BaseComponent", "props", "header", "String", "toggleable", "Boolean", "collapsed", "toggleButtonProps", "type", "Object", "_default", "severity", "text", "rounded", "style", "PanelStyle", "provide", "$pcPanel", "$parentInstance", "script", "BasePanel", "inheritAttrs", "emits", "data", "id", "$attrs", "d_collapsed", "watch", "$attrsId", "newValue", "UniqueComponentId", "mounted", "methods", "toggle", "event", "$emit", "originalEvent", "value", "onKeyDown", "code", "preventDefault", "computed", "buttonAriaLabel", "ariaLabel", "components", "PlusIcon", "MinusIcon", "Button", "directives", "ripple", "Ripple", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "ptmi", "_createElementVNode", "ptm", "_renderSlot", "$slots", "$data", "_hoisted_1", "_createBlock", "_component_Button", "$options", "unstyled", "onClick", "onKeydown", "pt", "icon", "_withCtx", "slotProps", "toggleicon", "_resolveDynamicComponent", "_createVNode", "_Transition", "_withDirectives", "role", "footer"]
}
