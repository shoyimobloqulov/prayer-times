{
  "version": 3,
  "sources": ["../../src/autocomplete/style/AutoCompleteStyle.js", "../../src/autocomplete/BaseAutoComplete.vue", "../../src/autocomplete/AutoComplete.vue", "../../src/autocomplete/AutoComplete.vue?vue&type=template&id=3109221f&lang.js"],
  "sourcesContent": ["import { isNotEmpty } from '@primeuix/utils/object';\nimport BaseStyle from '@primevue/core/base/style';\n\nconst theme = ({ dt }) => `\n.p-autocomplete {\n    display: inline-flex;\n}\n\n.p-autocomplete-loader {\n    position: absolute;\n    top: 50%;\n    margin-top: -0.5rem;\n    right: ${dt('autocomplete.padding.x')};\n}\n\n.p-autocomplete:has(.p-autocomplete-dropdown) .p-autocomplete-loader {\n    right: calc(${dt('autocomplete.dropdown.width')} + ${dt('autocomplete.padding.x')});\n}\n\n.p-autocomplete:has(.p-autocomplete-dropdown) .p-autocomplete-input {\n    flex: 1 1 auto;\n    width: 1%;\n}\n\n.p-autocomplete:has(.p-autocomplete-dropdown) .p-autocomplete-input,\n.p-autocomplete:has(.p-autocomplete-dropdown) .p-autocomplete-input-multiple {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n}\n\n.p-autocomplete-dropdown {\n    cursor: pointer;\n    display: inline-flex;\n    cursor: pointer;\n    user-select: none;\n    align-items: center;\n    justify-content: center;\n    overflow: hidden;\n    position: relative;\n    width: ${dt('autocomplete.dropdown.width')};\n    border-top-right-radius: ${dt('autocomplete.dropdown.border.radius')};\n    border-bottom-right-radius: ${dt('autocomplete.dropdown.border.radius')};\n    background: ${dt('autocomplete.dropdown.background')};\n    border: 1px solid ${dt('autocomplete.dropdown.border.color')};\n    border-left: 0 none;\n    color: ${dt('autocomplete.dropdown.color')};\n    transition: background ${dt('autocomplete.transition.duration')}, color ${dt('autocomplete.transition.duration')}, border-color ${dt('autocomplete.transition.duration')}, outline-color ${dt('autocomplete.transition.duration')}, box-shadow ${dt(\n    'autocomplete.transition.duration'\n)};\n    outline-color: transparent;\n}\n\n.p-autocomplete-dropdown:not(:disabled):hover {\n    background: ${dt('autocomplete.dropdown.hover.background')};\n    border-color: ${dt('autocomplete.dropdown.hover.border.color')};\n    color: ${dt('autocomplete.dropdown.hover.color')};\n}\n\n.p-autocomplete-dropdown:not(:disabled):active {\n    background: ${dt('autocomplete.dropdown.active.background')};\n    border-color: ${dt('autocomplete.dropdown.active.border.color')};\n    color: ${dt('autocomplete.dropdown.active.color')};\n}\n\n.p-autocomplete-dropdown:focus-visible {\n    box-shadow: ${dt('autocomplete.dropdown.focus.ring.shadow')};\n    outline: ${dt('autocomplete.dropdown.focus.ring.width')} ${dt('autocomplete.dropdown.focus.ring.style')} ${dt('autocomplete.dropdown.focus.ring.color')};\n    outline-offset: ${dt('autocomplete.dropdown.focus.ring.offset')};\n}\n\n.p-autocomplete .p-autocomplete-overlay {\n    min-width: 100%;\n}\n\n.p-autocomplete-overlay {\n    position: absolute;\n    overflow: auto;\n    top: 0;\n    left: 0;\n    background: ${dt('autocomplete.overlay.background')};\n    color: ${dt('autocomplete.overlay.color')};\n    border: 1px solid ${dt('autocomplete.overlay.border.color')};\n    border-radius: ${dt('autocomplete.overlay.border.radius')};\n    box-shadow: ${dt('autocomplete.overlay.shadow')};\n}\n\n.p-autocomplete-list {\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n    display: flex;\n    flex-direction: column;\n    gap: ${dt('autocomplete.list.gap')};\n    padding: ${dt('autocomplete.list.padding')};\n}\n\n.p-autocomplete-option {\n    cursor: pointer;\n    white-space: nowrap;\n    position: relative;\n    overflow: hidden;\n    display: flex;\n    align-items: center;\n    padding: ${dt('autocomplete.option.padding')};\n    border: 0 none;\n    color: ${dt('autocomplete.option.color')};\n    background: transparent;\n    transition: background ${dt('autocomplete.transition.duration')}, color ${dt('autocomplete.transition.duration')}, border-color ${dt('autocomplete.transition.duration')};\n    border-radius: ${dt('autocomplete.option.border.radius')};\n}\n\n.p-autocomplete-option:not(.p-autocomplete-option-selected):not(.p-disabled).p-focus {\n    background: ${dt('autocomplete.option.focus.background')};\n    color: ${dt('autocomplete.option.focus.color')};\n}\n\n.p-autocomplete-option-selected {\n    background: ${dt('autocomplete.option.selected.background')};\n    color: ${dt('autocomplete.option.selected.color')};\n}\n\n.p-autocomplete-option-selected.p-focus {\n    background: ${dt('autocomplete.option.selected.focus.background')};\n    color: ${dt('autocomplete.option.selected.focus.color')};\n}\n\n.p-autocomplete-option-group {\n    margin: 0;\n    padding: ${dt('autocomplete.option.group.padding')};\n    color: ${dt('autocomplete.option.group.color')};\n    background: ${dt('autocomplete.option.group.background')};\n    font-weight: ${dt('autocomplete.option.group.font.weight')};\n}\n\n.p-autocomplete-input-multiple {\n    margin: 0;\n    list-style-type: none;\n    cursor: text;\n    overflow: hidden;\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap;\n    padding: calc(${dt('autocomplete.padding.y')} / 2) ${dt('autocomplete.padding.x')};\n    gap: calc(${dt('autocomplete.padding.y')} / 2);\n    color: ${dt('autocomplete.color')};\n    background: ${dt('autocomplete.background')};\n    border: 1px solid ${dt('autocomplete.border.color')};\n    border-radius: ${dt('autocomplete.border.radius')};\n    width: 100%;\n    transition: background ${dt('autocomplete.transition.duration')}, color ${dt('autocomplete.transition.duration')}, border-color ${dt('autocomplete.transition.duration')}, outline-color ${dt('autocomplete.transition.duration')}, box-shadow ${dt(\n    'autocomplete.transition.duration'\n)};\n    outline-color: transparent;\n    box-shadow: ${dt('autocomplete.shadow')};\n}\n\n.p-autocomplete:not(.p-disabled):hover .p-autocomplete-input-multiple {\n    border-color: ${dt('autocomplete.hover.border.color')};\n}\n\n.p-autocomplete:not(.p-disabled).p-focus .p-autocomplete-input-multiple {\n    border-color: ${dt('autocomplete.focus.border.color')};\n    box-shadow: ${dt('autocomplete.focus.ring.shadow')};\n    outline: ${dt('autocomplete.focus.ring.width')} ${dt('autocomplete.focus.ring.style')} ${dt('autocomplete.focus.ring.color')};\n    outline-offset: ${dt('autocomplete.focus.ring.offset')};\n}\n\n.p-autocomplete.p-invalid .p-autocomplete-input-multiple {\n    border-color: ${dt('autocomplete.invalid.border.color')};\n}\n\n.p-variant-filled.p-autocomplete-input-multiple {\n    background: ${dt('autocomplete.filled.background')};\n}\n\n.p-autocomplete:not(.p-disabled).p-focus .p-variant-filled.p-autocomplete-input-multiple  {\n    background: ${dt('autocomplete.filled.focus.background')};\n}\n\n.p-autocomplete.p-disabled .p-autocomplete-input-multiple {\n    opacity: 1;\n    background: ${dt('autocomplete.disabled.background')};\n    color: ${dt('autocomplete.disabled.color')};\n}\n\n.p-autocomplete-chip.p-chip {\n    padding-top: calc(${dt('autocomplete.padding.y')} / 2);\n    padding-bottom: calc(${dt('autocomplete.padding.y')} / 2);\n    border-radius: ${dt('autocomplete.chip.border.radius')};\n}\n\n.p-autocomplete-input-multiple:has(.p-autocomplete-chip) {\n    padding-left: calc(${dt('autocomplete.padding.y')} / 2);\n    padding-right: calc(${dt('autocomplete.padding.y')} / 2);\n}\n\n.p-autocomplete-chip-item.p-focus .p-autocomplete-chip {\n    background: ${dt('inputchips.chip.focus.background')};\n    color: ${dt('inputchips.chip.focus.color')};\n}\n\n.p-autocomplete-input-chip {\n    flex: 1 1 auto;\n    display: inline-flex;\n    padding-top: calc(${dt('autocomplete.padding.y')} / 2);\n    padding-bottom: calc(${dt('autocomplete.padding.y')} / 2);\n}\n\n.p-autocomplete-input-chip input {\n    border: 0 none;\n    outline: 0 none;\n    background: transparent;\n    margin: 0;\n    padding: 0;\n    box-shadow: none;\n    border-radius: 0;\n    width: 100%;\n    font-family: inherit;\n    font-feature-settings: inherit;\n    font-size: 1rem;\n    color: inherit;\n}\n\n.p-autocomplete-input-chip input::placeholder {\n    color: ${dt('autocomplete.placeholder.color')};\n}\n\n.p-autocomplete-empty-message {\n    padding: ${dt('autocomplete.empty.message.padding')};\n}\n\n.p-autocomplete-fluid {\n    display: flex;\n}\n\n.p-autocomplete-fluid:has(.p-autocomplete-dropdown) .p-autocomplete-input {\n    width: 1%;\n}\n`;\n\nconst inlineStyles = {\n    root: { position: 'relative' }\n};\n\nconst classes = {\n    root: ({ instance, props }) => [\n        'p-autocomplete p-component p-inputwrapper',\n        {\n            'p-disabled': props.disabled,\n            'p-invalid': props.invalid,\n            'p-focus': instance.focused,\n            'p-inputwrapper-filled': props.modelValue || isNotEmpty(instance.inputValue),\n            'p-inputwrapper-focus': instance.focused,\n            'p-autocomplete-open': instance.overlayVisible,\n            'p-autocomplete-fluid': props.fluid\n        }\n    ],\n    pcInput: 'p-autocomplete-input',\n    inputMultiple: ({ props, instance }) => [\n        'p-autocomplete-input-multiple',\n        {\n            'p-variant-filled': props.variant ? props.variant === 'filled' : instance.$primevue.config.inputStyle === 'filled' || instance.$primevue.config.inputVariant === 'filled'\n        }\n    ],\n    chipItem: ({ instance, i }) => [\n        'p-autocomplete-chip-item',\n        {\n            'p-focus': instance.focusedMultipleOptionIndex === i\n        }\n    ],\n    pcChip: 'p-autocomplete-chip',\n    chipIcon: 'p-autocomplete-chip-icon',\n    inputChip: 'p-autocomplete-input-chip',\n    loader: 'p-autocomplete-loader',\n    dropdown: 'p-autocomplete-dropdown',\n    overlay: 'p-autocomplete-overlay p-component',\n    list: 'p-autocomplete-list',\n    optionGroup: 'p-autocomplete-option-group',\n    option: ({ instance, option, i, getItemOptions }) => [\n        'p-autocomplete-option',\n        {\n            'p-autocomplete-option-selected': instance.isSelected(option),\n            'p-focus': instance.focusedOptionIndex === instance.getOptionIndex(i, getItemOptions),\n            'p-disabled': instance.isOptionDisabled(option)\n        }\n    ],\n    emptyMessage: 'p-autocomplete-empty-message'\n};\n\nexport default BaseStyle.extend({\n    name: 'autocomplete',\n    theme,\n    classes,\n    inlineStyles\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport AutoCompleteStyle from 'primevue/autocomplete/style';\n\nexport default {\n    name: 'BaseAutoComplete',\n    extends: BaseComponent,\n    props: {\n        modelValue: null,\n        suggestions: {\n            type: Array,\n            default: null\n        },\n        optionLabel: null,\n        optionDisabled: null,\n        optionGroupLabel: null,\n        optionGroupChildren: null,\n        scrollHeight: {\n            type: String,\n            default: '14rem'\n        },\n        dropdown: {\n            type: Boolean,\n            default: false\n        },\n        dropdownMode: {\n            type: String,\n            default: 'blank'\n        },\n        multiple: {\n            type: Boolean,\n            default: false\n        },\n        loading: {\n            type: Boolean,\n            default: false\n        },\n        variant: {\n            type: String,\n            default: null\n        },\n        invalid: {\n            type: Boolean,\n            default: false\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        placeholder: {\n            type: String,\n            default: null\n        },\n        dataKey: {\n            type: String,\n            default: null\n        },\n        minLength: {\n            type: Number,\n            default: 1\n        },\n        delay: {\n            type: Number,\n            default: 300\n        },\n        appendTo: {\n            type: [String, Object],\n            default: 'body'\n        },\n        forceSelection: {\n            type: Boolean,\n            default: false\n        },\n        completeOnFocus: {\n            type: Boolean,\n            default: false\n        },\n        inputId: {\n            type: String,\n            default: null\n        },\n        inputStyle: {\n            type: Object,\n            default: null\n        },\n        inputClass: {\n            type: [String, Object],\n            default: null\n        },\n        panelStyle: {\n            type: Object,\n            default: null\n        },\n        panelClass: {\n            type: [String, Object],\n            default: null\n        },\n        overlayStyle: {\n            type: Object,\n            default: null\n        },\n        overlayClass: {\n            type: [String, Object],\n            default: null\n        },\n        dropdownIcon: {\n            type: String,\n            default: null\n        },\n        dropdownClass: {\n            type: [String, Object],\n            default: null\n        },\n        loader: {\n            type: String,\n            default: null\n        },\n        loadingIcon: {\n            type: String,\n            default: null\n        },\n        removeTokenIcon: {\n            type: String,\n            default: null\n        },\n        chipIcon: {\n            type: String,\n            default: null\n        },\n        virtualScrollerOptions: {\n            type: Object,\n            default: null\n        },\n        autoOptionFocus: {\n            type: Boolean,\n            default: false\n        },\n        selectOnFocus: {\n            type: Boolean,\n            default: false\n        },\n        focusOnHover: {\n            type: Boolean,\n            default: true\n        },\n        searchLocale: {\n            type: String,\n            default: undefined\n        },\n        searchMessage: {\n            type: String,\n            default: null\n        },\n        selectionMessage: {\n            type: String,\n            default: null\n        },\n        emptySelectionMessage: {\n            type: String,\n            default: null\n        },\n        emptySearchMessage: {\n            type: String,\n            default: null\n        },\n        tabindex: {\n            type: Number,\n            default: 0\n        },\n        typeahead: {\n            type: Boolean,\n            default: true\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        fluid: {\n            type: Boolean,\n            default: false\n        }\n    },\n    style: AutoCompleteStyle,\n    provide() {\n        return {\n            $pcAutoComplete: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div ref=\"container\" :class=\"cx('root')\" :style=\"sx('root')\" @click=\"onContainerClick\" v-bind=\"ptmi('root')\">\n        <InputText\n            v-if=\"!multiple\"\n            ref=\"focusInput\"\n            :id=\"inputId\"\n            type=\"text\"\n            :class=\"[cx('pcInput'), inputClass]\"\n            :style=\"inputStyle\"\n            :value=\"inputValue\"\n            :placeholder=\"placeholder\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            :disabled=\"disabled\"\n            :invalid=\"invalid\"\n            :variant=\"variant\"\n            autocomplete=\"off\"\n            role=\"combobox\"\n            :aria-label=\"ariaLabel\"\n            :aria-labelledby=\"ariaLabelledby\"\n            aria-haspopup=\"listbox\"\n            aria-autocomplete=\"list\"\n            :aria-expanded=\"overlayVisible\"\n            :aria-controls=\"panelId\"\n            :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n            @keydown=\"onKeyDown\"\n            @input=\"onInput\"\n            @change=\"onChange\"\n            :unstyled=\"unstyled\"\n            :pt=\"ptm('pcInput')\"\n        />\n        <ul\n            v-if=\"multiple\"\n            ref=\"multiContainer\"\n            :class=\"cx('inputMultiple')\"\n            tabindex=\"-1\"\n            role=\"listbox\"\n            aria-orientation=\"horizontal\"\n            :aria-activedescendant=\"focused ? focusedMultipleOptionId : undefined\"\n            @focus=\"onMultipleContainerFocus\"\n            @blur=\"onMultipleContainerBlur\"\n            @keydown=\"onMultipleContainerKeyDown\"\n            v-bind=\"ptm('inputMultiple')\"\n        >\n            <li\n                v-for=\"(option, i) of modelValue\"\n                :key=\"`${i}_${getOptionLabel(option)}`\"\n                :id=\"id + '_multiple_option_' + i\"\n                :class=\"cx('chipItem', { i })\"\n                role=\"option\"\n                :aria-label=\"getOptionLabel(option)\"\n                :aria-selected=\"true\"\n                :aria-setsize=\"modelValue.length\"\n                :aria-posinset=\"i + 1\"\n                v-bind=\"ptm('chipItem')\"\n            >\n                <slot name=\"chip\" :class=\"cx('pcChip')\" :value=\"option\" :index=\"i\" :removeCallback=\"(event) => removeOption(event, i)\" v-bind=\"ptm('pcChip')\">\n                    <!-- TODO: removetokenicon and removeTokenIcon  deprecated since v4.0. Use chipicon slot and chipIcon prop-->\n                    <Chip :class=\"cx('pcChip')\" :label=\"getOptionLabel(option)\" :removeIcon=\"chipIcon || removeTokenIcon\" removable :unstyled=\"unstyled\" @remove=\"removeOption($event, i)\" :pt=\"ptm('pcChip')\">\n                        <template #removeicon>\n                            <slot :name=\"$slots.chipicon ? 'chipicon' : 'removetokenicon'\" :class=\"cx('chipIcon')\" :index=\"i\" :removeCallback=\"(event) => removeOption(event, i)\" />\n                        </template>\n                    </Chip>\n                </slot>\n            </li>\n            <li :class=\"cx('inputChip')\" role=\"option\" v-bind=\"ptm('inputChip')\">\n                <input\n                    ref=\"focusInput\"\n                    :id=\"inputId\"\n                    type=\"text\"\n                    :style=\"inputStyle\"\n                    :class=\"inputClass\"\n                    :placeholder=\"placeholder\"\n                    :tabindex=\"!disabled ? tabindex : -1\"\n                    :disabled=\"disabled\"\n                    autocomplete=\"off\"\n                    role=\"combobox\"\n                    :aria-label=\"ariaLabel\"\n                    :aria-labelledby=\"ariaLabelledby\"\n                    aria-haspopup=\"listbox\"\n                    aria-autocomplete=\"list\"\n                    :aria-expanded=\"overlayVisible\"\n                    :aria-controls=\"id + '_list'\"\n                    :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n                    :aria-invalid=\"invalid || undefined\"\n                    @focus=\"onFocus\"\n                    @blur=\"onBlur\"\n                    @keydown=\"onKeyDown\"\n                    @input=\"onInput\"\n                    @change=\"onChange\"\n                    v-bind=\"ptm('input')\"\n                />\n            </li>\n        </ul>\n        <slot v-if=\"searching || loading\" :class=\"cx('loader')\" :name=\"$slots.loader ? 'loader' : 'loadingicon'\">\n            <i v-if=\"loader || loadingIcon\" :class=\"['pi-spin', cx('loader'), loader, loadingIcon]\" aria-hidden=\"true\" v-bind=\"ptm('loader')\" />\n            <SpinnerIcon v-else :class=\"cx('loader')\" spin aria-hidden=\"true\" v-bind=\"ptm('loader')\" />\n        </slot>\n        <slot :name=\"$slots.dropdown ? 'dropdown' : 'dropdownbutton'\" :toggleCallback=\"(event) => onDropdownClick(event)\">\n            <button\n                v-if=\"dropdown\"\n                ref=\"dropdownButton\"\n                type=\"button\"\n                :class=\"[cx('dropdown'), dropdownClass]\"\n                :disabled=\"disabled\"\n                aria-haspopup=\"listbox\"\n                :aria-expanded=\"overlayVisible\"\n                :aria-controls=\"panelId\"\n                @click=\"onDropdownClick\"\n                v-bind=\"ptm('dropdown')\"\n            >\n                <slot name=\"dropdownicon\" :class=\"dropdownIcon\">\n                    <component :is=\"dropdownIcon ? 'span' : 'ChevronDownIcon'\" :class=\"dropdownIcon\" v-bind=\"ptm('dropdownIcon')\" />\n                </slot>\n            </button>\n        </slot>\n        <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSearchResult')\" :data-p-hidden-accessible=\"true\">\n            {{ searchResultMessageText }}\n        </span>\n        <Portal :appendTo=\"appendTo\">\n            <transition name=\"p-connected-overlay\" @enter=\"onOverlayEnter\" @after-enter=\"onOverlayAfterEnter\" @leave=\"onOverlayLeave\" @after-leave=\"onOverlayAfterLeave\" v-bind=\"ptm('transition')\">\n                <div\n                    v-if=\"overlayVisible\"\n                    :ref=\"overlayRef\"\n                    :id=\"panelId\"\n                    :class=\"[cx('overlay'), panelClass, overlayClass]\"\n                    :style=\"{ ...panelStyle, ...overlayStyle, 'max-height': virtualScrollerDisabled ? scrollHeight : '' }\"\n                    @click=\"onOverlayClick\"\n                    @keydown=\"onOverlayKeyDown\"\n                    v-bind=\"ptm('overlay')\"\n                >\n                    <slot name=\"header\" :value=\"modelValue\" :suggestions=\"visibleOptions\"></slot>\n                    <VirtualScroller :ref=\"virtualScrollerRef\" v-bind=\"virtualScrollerOptions\" :style=\"{ height: scrollHeight }\" :items=\"visibleOptions\" :tabindex=\"-1\" :disabled=\"virtualScrollerDisabled\" :pt=\"ptm('virtualScroller')\">\n                        <template v-slot:content=\"{ styleClass, contentRef, items, getItemOptions, contentStyle, itemSize }\">\n                            <ul :ref=\"(el) => listRef(el, contentRef)\" :id=\"id + '_list'\" :class=\"[cx('list'), styleClass]\" :style=\"contentStyle\" role=\"listbox\" :aria-label=\"listAriaLabel\" v-bind=\"ptm('list')\">\n                                <template v-for=\"(option, i) of items\" :key=\"getOptionRenderKey(option, getOptionIndex(i, getItemOptions))\">\n                                    <li v-if=\"isOptionGroup(option)\" :id=\"id + '_' + getOptionIndex(i, getItemOptions)\" :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\" :class=\"cx('optionGroup')\" role=\"option\" v-bind=\"ptm('optionGroup')\">\n                                        <slot name=\"optiongroup\" :option=\"option.optionGroup\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionGroupLabel(option.optionGroup) }}</slot>\n                                    </li>\n                                    <li\n                                        v-else\n                                        :id=\"id + '_' + getOptionIndex(i, getItemOptions)\"\n                                        v-ripple\n                                        :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                        :class=\"cx('option', { option, i, getItemOptions })\"\n                                        role=\"option\"\n                                        :aria-label=\"getOptionLabel(option)\"\n                                        :aria-selected=\"isSelected(option)\"\n                                        :aria-disabled=\"isOptionDisabled(option)\"\n                                        :aria-setsize=\"ariaSetSize\"\n                                        :aria-posinset=\"getAriaPosInset(getOptionIndex(i, getItemOptions))\"\n                                        @click=\"onOptionSelect($event, option)\"\n                                        @mousemove=\"onOptionMouseMove($event, getOptionIndex(i, getItemOptions))\"\n                                        :data-p-selected=\"isSelected(option)\"\n                                        :data-p-focus=\"focusedOptionIndex === getOptionIndex(i, getItemOptions)\"\n                                        :data-p-disabled=\"isOptionDisabled(option)\"\n                                        v-bind=\"getPTOptions(option, getItemOptions, i, 'option')\"\n                                    >\n                                        <slot name=\"option\" :option=\"option\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionLabel(option) }}</slot>\n                                    </li>\n                                </template>\n                                <li v-if=\"!items || (items && items.length === 0)\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                                    <slot name=\"empty\">{{ searchResultMessageText }}</slot>\n                                </li>\n                            </ul>\n                        </template>\n                        <template v-if=\"$slots.loader\" v-slot:loader=\"{ options }\">\n                            <slot name=\"loader\" :options=\"options\"></slot>\n                        </template>\n                    </VirtualScroller>\n                    <slot name=\"footer\" :value=\"modelValue\" :suggestions=\"visibleOptions\"></slot>\n                    <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSelectedMessage')\" :data-p-hidden-accessible=\"true\">\n                        {{ selectedMessageText }}\n                    </span>\n                </div>\n            </transition>\n        </Portal>\n    </div>\n</template>\n\n<script>\nimport { ConnectedOverlayScrollHandler, UniqueComponentId } from '@primevue/core/utils';\nimport { focus, addStyle, relativePosition, getOuterWidth, absolutePosition, isTouchDevice, findSingle } from '@primeuix/utils/dom';\nimport { resolveFieldData, isEmpty, isNotEmpty, equals, findLastIndex } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Chip from 'primevue/chip';\nimport InputText from 'primevue/inputtext';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseAutoComplete from './BaseAutoComplete.vue';\n\nexport default {\n    name: 'AutoComplete',\n    extends: BaseAutoComplete,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'change', 'focus', 'blur', 'item-select', 'item-unselect', 'option-select', 'option-unselect', 'dropdown-click', 'clear', 'complete', 'before-show', 'before-hide', 'show', 'hide'],\n    outsideClickListener: null,\n    resizeListener: null,\n    scrollHandler: null,\n    overlay: null,\n    virtualScroller: null,\n    searchTimeout: null,\n    dirty: false,\n    data() {\n        return {\n            id: this.$attrs.id,\n            clicked: false,\n            focused: false,\n            focusedOptionIndex: -1,\n            focusedMultipleOptionIndex: -1,\n            overlayVisible: false,\n            searching: false\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        suggestions() {\n            if (this.searching) {\n                this.show();\n                this.focusedOptionIndex = this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n                this.searching = false;\n            }\n\n            this.autoUpdateModel();\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n        this.autoUpdateModel();\n    },\n    updated() {\n        if (this.overlayVisible) {\n            this.alignOverlay();\n        }\n    },\n    beforeUnmount() {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        if (this.overlay) {\n            ZIndex.clear(this.overlay);\n            this.overlay = null;\n        }\n    },\n    methods: {\n        getOptionIndex(index, fn) {\n            return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n        },\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return option; // TODO: The 'optionValue' properties can be added.\n        },\n        getOptionRenderKey(option, index) {\n            return (this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option)) + '_' + index;\n        },\n        getPTOptions(option, itemOptions, index, key) {\n            return this.ptm(key, {\n                context: {\n                    selected: this.isSelected(option),\n                    focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n                    disabled: this.isOptionDisabled(option)\n                }\n            });\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        isOptionGroup(option) {\n            return this.optionGroupLabel && option.optionGroup && option.group;\n        },\n        getOptionGroupLabel(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupChildren(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupChildren);\n        },\n        getAriaPosInset(index) {\n            return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter((option) => this.isOptionGroup(option)).length : index) + 1;\n        },\n        show(isFocus) {\n            this.$emit('before-show');\n            this.dirty = true;\n            this.overlayVisible = true;\n            this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n            isFocus && focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n        },\n        hide(isFocus) {\n            const _hide = () => {\n                this.$emit('before-hide');\n                this.dirty = isFocus;\n                this.overlayVisible = false;\n                this.clicked = false;\n                this.focusedOptionIndex = -1;\n\n                isFocus && focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n            };\n\n            setTimeout(() => {\n                _hide();\n            }, 0); // For ScreenReaders\n        },\n        onFocus(event) {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            if (!this.dirty && this.completeOnFocus) {\n                this.search(event, event.target.value, 'focus');\n            }\n\n            this.dirty = true;\n            this.focused = true;\n\n            if (this.overlayVisible) {\n                this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n                this.scrollInView(this.focusedOptionIndex);\n            }\n\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.dirty = false;\n            this.focused = false;\n            this.focusedOptionIndex = -1;\n            this.$emit('blur', event);\n        },\n        onKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'ArrowLeft':\n                    this.onArrowLeftKey(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'PageDown':\n                    this.onPageDownKey(event);\n                    break;\n\n                case 'PageUp':\n                    this.onPageUpKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKey(event);\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    //NOOP\n                    break;\n\n                default:\n                    break;\n            }\n\n            this.clicked = false;\n        },\n        onInput(event) {\n            if (this.typeahead) {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                let query = event.target.value;\n\n                if (!this.multiple) {\n                    this.updateModel(event, query);\n                }\n\n                if (query.length === 0) {\n                    this.hide();\n                    this.$emit('clear');\n                } else {\n                    if (query.length >= this.minLength) {\n                        this.focusedOptionIndex = -1;\n\n                        this.searchTimeout = setTimeout(() => {\n                            this.search(event, query, 'input');\n                        }, this.delay);\n                    } else {\n                        this.hide();\n                    }\n                }\n            }\n        },\n        onChange(event) {\n            if (this.forceSelection) {\n                let valid = false;\n\n                // when forceSelection is on, prevent called twice onOptionSelect()\n                if (this.visibleOptions && !this.multiple) {\n                    let value = this.multiple ? this.$refs.focusInput.value : this.$refs.focusInput.$el.value;\n                    const matchedValue = this.visibleOptions.find((option) => this.isOptionMatched(option, value || ''));\n\n                    if (matchedValue !== undefined) {\n                        valid = true;\n                        !this.isSelected(matchedValue) && this.onOptionSelect(event, matchedValue);\n                    }\n                }\n\n                if (!valid) {\n                    if (this.multiple) this.$refs.focusInput.value = '';\n                    else this.$refs.focusInput.$el.value = '';\n                    this.$emit('clear');\n                    !this.multiple && this.updateModel(event, null);\n                }\n            }\n        },\n        onMultipleContainerFocus() {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            this.focused = true;\n        },\n        onMultipleContainerBlur() {\n            this.focusedMultipleOptionIndex = -1;\n            this.focused = false;\n        },\n        onMultipleContainerKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            switch (event.code) {\n                case 'ArrowLeft':\n                    this.onArrowLeftKeyOnMultiple(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKeyOnMultiple(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKeyOnMultiple(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onContainerClick(event) {\n            this.clicked = true;\n\n            if (this.disabled || this.searching || this.loading || this.isInputClicked(event) || this.isDropdownClicked(event)) {\n                return;\n            }\n\n            if (!this.overlay || !this.overlay.contains(event.target)) {\n                focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n            }\n        },\n        onDropdownClick(event) {\n            let query = undefined;\n\n            if (this.overlayVisible) {\n                this.hide(true);\n            } else {\n                focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n                query = this.$refs.focusInput.$el.value;\n\n                if (this.dropdownMode === 'blank') this.search(event, '', 'dropdown');\n                else if (this.dropdownMode === 'current') this.search(event, query, 'dropdown');\n            }\n\n            this.$emit('dropdown-click', { originalEvent: event, query });\n        },\n        onOptionSelect(event, option, isHide = true) {\n            const value = this.getOptionValue(option);\n\n            if (this.multiple) {\n                this.$refs.focusInput.value = '';\n\n                if (!this.isSelected(option)) {\n                    this.updateModel(event, [...(this.modelValue || []), value]);\n                }\n            } else {\n                this.updateModel(event, value);\n            }\n\n            this.$emit('item-select', { originalEvent: event, value: option });\n            this.$emit('option-select', { originalEvent: event, value: option });\n\n            isHide && this.hide(true);\n        },\n        onOptionMouseMove(event, index) {\n            if (this.focusOnHover) {\n                this.changeFocusedOptionIndex(event, index);\n            }\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.$el\n            });\n        },\n        onOverlayKeyDown(event) {\n            switch (event.code) {\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            if (!this.overlayVisible) {\n                return;\n            }\n\n            const optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findFirstOptionIndex() : this.findFirstFocusedOptionIndex();\n\n            this.changeFocusedOptionIndex(event, optionIndex);\n\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            if (!this.overlayVisible) {\n                return;\n            }\n\n            if (event.altKey) {\n                if (this.focusedOptionIndex !== -1) {\n                    this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                }\n\n                this.overlayVisible && this.hide();\n                event.preventDefault();\n            } else {\n                const optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findLastOptionIndex() : this.findLastFocusedOptionIndex();\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                event.preventDefault();\n            }\n        },\n        onArrowLeftKey(event) {\n            const target = event.currentTarget;\n\n            this.focusedOptionIndex = -1;\n\n            if (this.multiple) {\n                if (isEmpty(target.value) && this.hasSelectedOption) {\n                    focus(this.$refs.multiContainer);\n                    this.focusedMultipleOptionIndex = this.modelValue.length;\n                } else {\n                    event.stopPropagation(); // To prevent onArrowLeftKeyOnMultiple method\n                }\n            }\n        },\n        onArrowRightKey(event) {\n            this.focusedOptionIndex = -1;\n\n            this.multiple && event.stopPropagation(); // To prevent onArrowRightKeyOnMultiple method\n        },\n        onHomeKey(event) {\n            const { currentTarget } = event;\n            const len = currentTarget.value.length;\n\n            currentTarget.setSelectionRange(0, event.shiftKey ? len : 0);\n            this.focusedOptionIndex = -1;\n\n            event.preventDefault();\n        },\n        onEndKey(event) {\n            const { currentTarget } = event;\n            const len = currentTarget.value.length;\n\n            currentTarget.setSelectionRange(event.shiftKey ? 0 : len, len);\n            this.focusedOptionIndex = -1;\n\n            event.preventDefault();\n        },\n        onPageUpKey(event) {\n            this.scrollInView(0);\n            event.preventDefault();\n        },\n        onPageDownKey(event) {\n            this.scrollInView(this.visibleOptions.length - 1);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (!this.typeahead) {\n                if (this.multiple) {\n                    this.updateModel(event, [...(this.modelValue || []), event.target.value]);\n                    this.$refs.focusInput.value = '';\n                }\n            } else {\n                if (!this.overlayVisible) {\n                    this.focusedOptionIndex = -1; // reset\n                    this.onArrowDownKey(event);\n                } else {\n                    if (this.focusedOptionIndex !== -1) {\n                        this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                    }\n\n                    this.hide();\n                }\n            }\n        },\n        onEscapeKey(event) {\n            this.overlayVisible && this.hide(true);\n            event.preventDefault();\n        },\n        onTabKey(event) {\n            if (this.focusedOptionIndex !== -1) {\n                this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n            }\n\n            this.overlayVisible && this.hide();\n        },\n        onBackspaceKey(event) {\n            if (this.multiple) {\n                if (isNotEmpty(this.modelValue) && !this.$refs.focusInput.value) {\n                    const removedValue = this.modelValue[this.modelValue.length - 1];\n                    const newValue = this.modelValue.slice(0, -1);\n\n                    this.$emit('update:modelValue', newValue);\n                    this.$emit('item-unselect', { originalEvent: event, value: removedValue });\n                    this.$emit('option-unselect', { originalEvent: event, value: removedValue });\n                }\n\n                event.stopPropagation(); // To prevent onBackspaceKeyOnMultiple method\n            }\n        },\n        onArrowLeftKeyOnMultiple() {\n            this.focusedMultipleOptionIndex = this.focusedMultipleOptionIndex < 1 ? 0 : this.focusedMultipleOptionIndex - 1;\n        },\n        onArrowRightKeyOnMultiple() {\n            this.focusedMultipleOptionIndex++;\n\n            if (this.focusedMultipleOptionIndex > this.modelValue.length - 1) {\n                this.focusedMultipleOptionIndex = -1;\n                focus(this.$refs.focusInput);\n            }\n        },\n        onBackspaceKeyOnMultiple(event) {\n            if (this.focusedMultipleOptionIndex !== -1) {\n                this.removeOption(event, this.focusedMultipleOptionIndex);\n            }\n        },\n        onOverlayEnter(el) {\n            ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n\n            addStyle(el, { position: 'absolute', top: '0', left: '0' });\n            this.alignOverlay();\n        },\n        onOverlayAfterEnter() {\n            this.bindOutsideClickListener();\n            this.bindScrollListener();\n            this.bindResizeListener();\n\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n\n            this.$emit('hide');\n            this.overlay = null;\n        },\n        onOverlayAfterLeave(el) {\n            ZIndex.clear(el);\n        },\n        alignOverlay() {\n            let target = this.multiple ? this.$refs.multiContainer : this.$refs.focusInput.$el;\n\n            if (this.appendTo === 'self') {\n                relativePosition(this.overlay, target);\n            } else {\n                this.overlay.style.minWidth = getOuterWidth(target) + 'px';\n                absolutePosition(this.overlay, target);\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && this.overlay && this.isOutsideClicked(event)) {\n                        this.hide();\n                    }\n                };\n\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !isTouchDevice()) {\n                        this.hide();\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isOutsideClicked(event) {\n            return !this.overlay.contains(event.target) && !this.isInputClicked(event) && !this.isDropdownClicked(event);\n        },\n        isInputClicked(event) {\n            if (this.multiple) return event.target === this.$refs.multiContainer || this.$refs.multiContainer.contains(event.target);\n            else return event.target === this.$refs.focusInput.$el;\n        },\n        isDropdownClicked(event) {\n            return this.$refs.dropdownButton ? event.target === this.$refs.dropdownButton || this.$refs.dropdownButton.contains(event.target) : false;\n        },\n        isOptionMatched(option, value) {\n            return this.isValidOption(option) && this.getOptionLabel(option)?.toLocaleLowerCase(this.searchLocale) === value.toLocaleLowerCase(this.searchLocale);\n        },\n        isValidOption(option) {\n            return isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n        },\n        isValidSelectedOption(option) {\n            return this.isValidOption(option) && this.isSelected(option);\n        },\n        isEquals(value1, value2) {\n            return equals(value1, value2, this.equalityKey);\n        },\n        isSelected(option) {\n            const optionValue = this.getOptionValue(option);\n\n            return this.multiple ? (this.modelValue || []).some((value) => this.isEquals(value, optionValue)) : this.isEquals(this.modelValue, this.getOptionValue(option));\n        },\n        findFirstOptionIndex() {\n            return this.visibleOptions.findIndex((option) => this.isValidOption(option));\n        },\n        findLastOptionIndex() {\n            return findLastIndex(this.visibleOptions, (option) => this.isValidOption(option));\n        },\n        findNextOptionIndex(index) {\n            const matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n        },\n        findPrevOptionIndex(index) {\n            const matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findSelectedOptionIndex() {\n            return this.hasSelectedOption ? this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findFirstFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n        },\n        findLastFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n        },\n        search(event, query, source) {\n            //allow empty string but not undefined or null\n            if (query === undefined || query === null) {\n                return;\n            }\n\n            //do not search blank values on input change\n            if (source === 'input' && query.trim().length === 0) {\n                return;\n            }\n\n            this.searching = true;\n            this.$emit('complete', { originalEvent: event, query });\n        },\n        removeOption(event, index) {\n            const removedOption = this.modelValue[index];\n            const value = this.modelValue.filter((_, i) => i !== index).map((option) => this.getOptionValue(option));\n\n            this.updateModel(event, value);\n            this.$emit('item-unselect', { originalEvent: event, value: removedOption });\n            this.$emit('option-unselect', { originalEvent: event, value: removedOption });\n            this.dirty = true;\n            focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n        },\n        changeFocusedOptionIndex(event, index) {\n            if (this.focusedOptionIndex !== index) {\n                this.focusedOptionIndex = index;\n                this.scrollInView();\n\n                if (this.selectOnFocus) {\n                    this.onOptionSelect(event, this.visibleOptions[index], false);\n                }\n            }\n        },\n        scrollInView(index = -1) {\n            this.$nextTick(() => {\n                const id = index !== -1 ? `${this.id}_${index}` : this.focusedOptionId;\n                const element = findSingle(this.list, `li[id=\"${id}\"]`);\n\n                if (element) {\n                    element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'start' });\n                } else if (!this.virtualScrollerDisabled) {\n                    this.virtualScroller && this.virtualScroller.scrollToIndex(index !== -1 ? index : this.focusedOptionIndex);\n                }\n            });\n        },\n        autoUpdateModel() {\n            if (this.selectOnFocus && this.autoOptionFocus && !this.hasSelectedOption) {\n                this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n                this.onOptionSelect(null, this.visibleOptions[this.focusedOptionIndex], false);\n            }\n        },\n        updateModel(event, value) {\n            this.$emit('update:modelValue', value);\n            this.$emit('change', { originalEvent: event, value });\n        },\n        flatOptions(options) {\n            return (options || []).reduce((result, option, index) => {\n                result.push({ optionGroup: option, group: true, index });\n\n                const optionGroupChildren = this.getOptionGroupChildren(option);\n\n                optionGroupChildren && optionGroupChildren.forEach((o) => result.push(o));\n\n                return result;\n            }, []);\n        },\n        overlayRef(el) {\n            this.overlay = el;\n        },\n        listRef(el, contentRef) {\n            this.list = el;\n            contentRef && contentRef(el); // For VirtualScroller\n        },\n        virtualScrollerRef(el) {\n            this.virtualScroller = el;\n        }\n    },\n    computed: {\n        visibleOptions() {\n            return this.optionGroupLabel ? this.flatOptions(this.suggestions) : this.suggestions || [];\n        },\n        inputValue() {\n            if (isNotEmpty(this.modelValue)) {\n                if (typeof this.modelValue === 'object') {\n                    const label = this.getOptionLabel(this.modelValue);\n\n                    return label != null ? label : this.modelValue;\n                } else {\n                    return this.modelValue;\n                }\n            } else {\n                return '';\n            }\n        },\n        hasSelectedOption() {\n            return isNotEmpty(this.modelValue);\n        },\n        equalityKey() {\n            return this.dataKey; // TODO: The 'optionValue' properties can be added.\n        },\n        searchResultMessageText() {\n            return isNotEmpty(this.visibleOptions) && this.overlayVisible ? this.searchMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptySearchMessageText;\n        },\n        searchMessageText() {\n            return this.searchMessage || this.$primevue.config.locale.searchMessage || '';\n        },\n        emptySearchMessageText() {\n            return this.emptySearchMessage || this.$primevue.config.locale.emptySearchMessage || '';\n        },\n        selectionMessageText() {\n            return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n        },\n        emptySelectionMessageText() {\n            return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n        },\n        selectedMessageText() {\n            return this.hasSelectedOption ? this.selectionMessageText.replaceAll('{0}', this.multiple ? this.modelValue.length : '1') : this.emptySelectionMessageText;\n        },\n        listAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.listLabel : undefined;\n        },\n        focusedOptionId() {\n            return this.focusedOptionIndex !== -1 ? `${this.id}_${this.focusedOptionIndex}` : null;\n        },\n        focusedMultipleOptionId() {\n            return this.focusedMultipleOptionIndex !== -1 ? `${this.id}_multiple_option_${this.focusedMultipleOptionIndex}` : null;\n        },\n        ariaSetSize() {\n            return this.visibleOptions.filter((option) => !this.isOptionGroup(option)).length;\n        },\n        virtualScrollerDisabled() {\n            return !this.virtualScrollerOptions;\n        },\n        panelId() {\n            return this.id + '_panel';\n        }\n    },\n    components: {\n        InputText,\n        VirtualScroller,\n        Portal,\n        ChevronDownIcon,\n        SpinnerIcon,\n        Chip\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n", "<template>\n    <div ref=\"container\" :class=\"cx('root')\" :style=\"sx('root')\" @click=\"onContainerClick\" v-bind=\"ptmi('root')\">\n        <InputText\n            v-if=\"!multiple\"\n            ref=\"focusInput\"\n            :id=\"inputId\"\n            type=\"text\"\n            :class=\"[cx('pcInput'), inputClass]\"\n            :style=\"inputStyle\"\n            :value=\"inputValue\"\n            :placeholder=\"placeholder\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            :disabled=\"disabled\"\n            :invalid=\"invalid\"\n            :variant=\"variant\"\n            autocomplete=\"off\"\n            role=\"combobox\"\n            :aria-label=\"ariaLabel\"\n            :aria-labelledby=\"ariaLabelledby\"\n            aria-haspopup=\"listbox\"\n            aria-autocomplete=\"list\"\n            :aria-expanded=\"overlayVisible\"\n            :aria-controls=\"panelId\"\n            :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n            @keydown=\"onKeyDown\"\n            @input=\"onInput\"\n            @change=\"onChange\"\n            :unstyled=\"unstyled\"\n            :pt=\"ptm('pcInput')\"\n        />\n        <ul\n            v-if=\"multiple\"\n            ref=\"multiContainer\"\n            :class=\"cx('inputMultiple')\"\n            tabindex=\"-1\"\n            role=\"listbox\"\n            aria-orientation=\"horizontal\"\n            :aria-activedescendant=\"focused ? focusedMultipleOptionId : undefined\"\n            @focus=\"onMultipleContainerFocus\"\n            @blur=\"onMultipleContainerBlur\"\n            @keydown=\"onMultipleContainerKeyDown\"\n            v-bind=\"ptm('inputMultiple')\"\n        >\n            <li\n                v-for=\"(option, i) of modelValue\"\n                :key=\"`${i}_${getOptionLabel(option)}`\"\n                :id=\"id + '_multiple_option_' + i\"\n                :class=\"cx('chipItem', { i })\"\n                role=\"option\"\n                :aria-label=\"getOptionLabel(option)\"\n                :aria-selected=\"true\"\n                :aria-setsize=\"modelValue.length\"\n                :aria-posinset=\"i + 1\"\n                v-bind=\"ptm('chipItem')\"\n            >\n                <slot name=\"chip\" :class=\"cx('pcChip')\" :value=\"option\" :index=\"i\" :removeCallback=\"(event) => removeOption(event, i)\" v-bind=\"ptm('pcChip')\">\n                    <!-- TODO: removetokenicon and removeTokenIcon  deprecated since v4.0. Use chipicon slot and chipIcon prop-->\n                    <Chip :class=\"cx('pcChip')\" :label=\"getOptionLabel(option)\" :removeIcon=\"chipIcon || removeTokenIcon\" removable :unstyled=\"unstyled\" @remove=\"removeOption($event, i)\" :pt=\"ptm('pcChip')\">\n                        <template #removeicon>\n                            <slot :name=\"$slots.chipicon ? 'chipicon' : 'removetokenicon'\" :class=\"cx('chipIcon')\" :index=\"i\" :removeCallback=\"(event) => removeOption(event, i)\" />\n                        </template>\n                    </Chip>\n                </slot>\n            </li>\n            <li :class=\"cx('inputChip')\" role=\"option\" v-bind=\"ptm('inputChip')\">\n                <input\n                    ref=\"focusInput\"\n                    :id=\"inputId\"\n                    type=\"text\"\n                    :style=\"inputStyle\"\n                    :class=\"inputClass\"\n                    :placeholder=\"placeholder\"\n                    :tabindex=\"!disabled ? tabindex : -1\"\n                    :disabled=\"disabled\"\n                    autocomplete=\"off\"\n                    role=\"combobox\"\n                    :aria-label=\"ariaLabel\"\n                    :aria-labelledby=\"ariaLabelledby\"\n                    aria-haspopup=\"listbox\"\n                    aria-autocomplete=\"list\"\n                    :aria-expanded=\"overlayVisible\"\n                    :aria-controls=\"id + '_list'\"\n                    :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n                    :aria-invalid=\"invalid || undefined\"\n                    @focus=\"onFocus\"\n                    @blur=\"onBlur\"\n                    @keydown=\"onKeyDown\"\n                    @input=\"onInput\"\n                    @change=\"onChange\"\n                    v-bind=\"ptm('input')\"\n                />\n            </li>\n        </ul>\n        <slot v-if=\"searching || loading\" :class=\"cx('loader')\" :name=\"$slots.loader ? 'loader' : 'loadingicon'\">\n            <i v-if=\"loader || loadingIcon\" :class=\"['pi-spin', cx('loader'), loader, loadingIcon]\" aria-hidden=\"true\" v-bind=\"ptm('loader')\" />\n            <SpinnerIcon v-else :class=\"cx('loader')\" spin aria-hidden=\"true\" v-bind=\"ptm('loader')\" />\n        </slot>\n        <slot :name=\"$slots.dropdown ? 'dropdown' : 'dropdownbutton'\" :toggleCallback=\"(event) => onDropdownClick(event)\">\n            <button\n                v-if=\"dropdown\"\n                ref=\"dropdownButton\"\n                type=\"button\"\n                :class=\"[cx('dropdown'), dropdownClass]\"\n                :disabled=\"disabled\"\n                aria-haspopup=\"listbox\"\n                :aria-expanded=\"overlayVisible\"\n                :aria-controls=\"panelId\"\n                @click=\"onDropdownClick\"\n                v-bind=\"ptm('dropdown')\"\n            >\n                <slot name=\"dropdownicon\" :class=\"dropdownIcon\">\n                    <component :is=\"dropdownIcon ? 'span' : 'ChevronDownIcon'\" :class=\"dropdownIcon\" v-bind=\"ptm('dropdownIcon')\" />\n                </slot>\n            </button>\n        </slot>\n        <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSearchResult')\" :data-p-hidden-accessible=\"true\">\n            {{ searchResultMessageText }}\n        </span>\n        <Portal :appendTo=\"appendTo\">\n            <transition name=\"p-connected-overlay\" @enter=\"onOverlayEnter\" @after-enter=\"onOverlayAfterEnter\" @leave=\"onOverlayLeave\" @after-leave=\"onOverlayAfterLeave\" v-bind=\"ptm('transition')\">\n                <div\n                    v-if=\"overlayVisible\"\n                    :ref=\"overlayRef\"\n                    :id=\"panelId\"\n                    :class=\"[cx('overlay'), panelClass, overlayClass]\"\n                    :style=\"{ ...panelStyle, ...overlayStyle, 'max-height': virtualScrollerDisabled ? scrollHeight : '' }\"\n                    @click=\"onOverlayClick\"\n                    @keydown=\"onOverlayKeyDown\"\n                    v-bind=\"ptm('overlay')\"\n                >\n                    <slot name=\"header\" :value=\"modelValue\" :suggestions=\"visibleOptions\"></slot>\n                    <VirtualScroller :ref=\"virtualScrollerRef\" v-bind=\"virtualScrollerOptions\" :style=\"{ height: scrollHeight }\" :items=\"visibleOptions\" :tabindex=\"-1\" :disabled=\"virtualScrollerDisabled\" :pt=\"ptm('virtualScroller')\">\n                        <template v-slot:content=\"{ styleClass, contentRef, items, getItemOptions, contentStyle, itemSize }\">\n                            <ul :ref=\"(el) => listRef(el, contentRef)\" :id=\"id + '_list'\" :class=\"[cx('list'), styleClass]\" :style=\"contentStyle\" role=\"listbox\" :aria-label=\"listAriaLabel\" v-bind=\"ptm('list')\">\n                                <template v-for=\"(option, i) of items\" :key=\"getOptionRenderKey(option, getOptionIndex(i, getItemOptions))\">\n                                    <li v-if=\"isOptionGroup(option)\" :id=\"id + '_' + getOptionIndex(i, getItemOptions)\" :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\" :class=\"cx('optionGroup')\" role=\"option\" v-bind=\"ptm('optionGroup')\">\n                                        <slot name=\"optiongroup\" :option=\"option.optionGroup\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionGroupLabel(option.optionGroup) }}</slot>\n                                    </li>\n                                    <li\n                                        v-else\n                                        :id=\"id + '_' + getOptionIndex(i, getItemOptions)\"\n                                        v-ripple\n                                        :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                        :class=\"cx('option', { option, i, getItemOptions })\"\n                                        role=\"option\"\n                                        :aria-label=\"getOptionLabel(option)\"\n                                        :aria-selected=\"isSelected(option)\"\n                                        :aria-disabled=\"isOptionDisabled(option)\"\n                                        :aria-setsize=\"ariaSetSize\"\n                                        :aria-posinset=\"getAriaPosInset(getOptionIndex(i, getItemOptions))\"\n                                        @click=\"onOptionSelect($event, option)\"\n                                        @mousemove=\"onOptionMouseMove($event, getOptionIndex(i, getItemOptions))\"\n                                        :data-p-selected=\"isSelected(option)\"\n                                        :data-p-focus=\"focusedOptionIndex === getOptionIndex(i, getItemOptions)\"\n                                        :data-p-disabled=\"isOptionDisabled(option)\"\n                                        v-bind=\"getPTOptions(option, getItemOptions, i, 'option')\"\n                                    >\n                                        <slot name=\"option\" :option=\"option\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionLabel(option) }}</slot>\n                                    </li>\n                                </template>\n                                <li v-if=\"!items || (items && items.length === 0)\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                                    <slot name=\"empty\">{{ searchResultMessageText }}</slot>\n                                </li>\n                            </ul>\n                        </template>\n                        <template v-if=\"$slots.loader\" v-slot:loader=\"{ options }\">\n                            <slot name=\"loader\" :options=\"options\"></slot>\n                        </template>\n                    </VirtualScroller>\n                    <slot name=\"footer\" :value=\"modelValue\" :suggestions=\"visibleOptions\"></slot>\n                    <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSelectedMessage')\" :data-p-hidden-accessible=\"true\">\n                        {{ selectedMessageText }}\n                    </span>\n                </div>\n            </transition>\n        </Portal>\n    </div>\n</template>\n\n<script>\nimport { ConnectedOverlayScrollHandler, UniqueComponentId } from '@primevue/core/utils';\nimport { focus, addStyle, relativePosition, getOuterWidth, absolutePosition, isTouchDevice, findSingle } from '@primeuix/utils/dom';\nimport { resolveFieldData, isEmpty, isNotEmpty, equals, findLastIndex } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Chip from 'primevue/chip';\nimport InputText from 'primevue/inputtext';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseAutoComplete from './BaseAutoComplete.vue';\n\nexport default {\n    name: 'AutoComplete',\n    extends: BaseAutoComplete,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'change', 'focus', 'blur', 'item-select', 'item-unselect', 'option-select', 'option-unselect', 'dropdown-click', 'clear', 'complete', 'before-show', 'before-hide', 'show', 'hide'],\n    outsideClickListener: null,\n    resizeListener: null,\n    scrollHandler: null,\n    overlay: null,\n    virtualScroller: null,\n    searchTimeout: null,\n    dirty: false,\n    data() {\n        return {\n            id: this.$attrs.id,\n            clicked: false,\n            focused: false,\n            focusedOptionIndex: -1,\n            focusedMultipleOptionIndex: -1,\n            overlayVisible: false,\n            searching: false\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        suggestions() {\n            if (this.searching) {\n                this.show();\n                this.focusedOptionIndex = this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n                this.searching = false;\n            }\n\n            this.autoUpdateModel();\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n        this.autoUpdateModel();\n    },\n    updated() {\n        if (this.overlayVisible) {\n            this.alignOverlay();\n        }\n    },\n    beforeUnmount() {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        if (this.overlay) {\n            ZIndex.clear(this.overlay);\n            this.overlay = null;\n        }\n    },\n    methods: {\n        getOptionIndex(index, fn) {\n            return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n        },\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return option; // TODO: The 'optionValue' properties can be added.\n        },\n        getOptionRenderKey(option, index) {\n            return (this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option)) + '_' + index;\n        },\n        getPTOptions(option, itemOptions, index, key) {\n            return this.ptm(key, {\n                context: {\n                    selected: this.isSelected(option),\n                    focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n                    disabled: this.isOptionDisabled(option)\n                }\n            });\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        isOptionGroup(option) {\n            return this.optionGroupLabel && option.optionGroup && option.group;\n        },\n        getOptionGroupLabel(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupChildren(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupChildren);\n        },\n        getAriaPosInset(index) {\n            return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter((option) => this.isOptionGroup(option)).length : index) + 1;\n        },\n        show(isFocus) {\n            this.$emit('before-show');\n            this.dirty = true;\n            this.overlayVisible = true;\n            this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n            isFocus && focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n        },\n        hide(isFocus) {\n            const _hide = () => {\n                this.$emit('before-hide');\n                this.dirty = isFocus;\n                this.overlayVisible = false;\n                this.clicked = false;\n                this.focusedOptionIndex = -1;\n\n                isFocus && focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n            };\n\n            setTimeout(() => {\n                _hide();\n            }, 0); // For ScreenReaders\n        },\n        onFocus(event) {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            if (!this.dirty && this.completeOnFocus) {\n                this.search(event, event.target.value, 'focus');\n            }\n\n            this.dirty = true;\n            this.focused = true;\n\n            if (this.overlayVisible) {\n                this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.overlayVisible && this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : -1;\n                this.scrollInView(this.focusedOptionIndex);\n            }\n\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.dirty = false;\n            this.focused = false;\n            this.focusedOptionIndex = -1;\n            this.$emit('blur', event);\n        },\n        onKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'ArrowLeft':\n                    this.onArrowLeftKey(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'PageDown':\n                    this.onPageDownKey(event);\n                    break;\n\n                case 'PageUp':\n                    this.onPageUpKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKey(event);\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    //NOOP\n                    break;\n\n                default:\n                    break;\n            }\n\n            this.clicked = false;\n        },\n        onInput(event) {\n            if (this.typeahead) {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                let query = event.target.value;\n\n                if (!this.multiple) {\n                    this.updateModel(event, query);\n                }\n\n                if (query.length === 0) {\n                    this.hide();\n                    this.$emit('clear');\n                } else {\n                    if (query.length >= this.minLength) {\n                        this.focusedOptionIndex = -1;\n\n                        this.searchTimeout = setTimeout(() => {\n                            this.search(event, query, 'input');\n                        }, this.delay);\n                    } else {\n                        this.hide();\n                    }\n                }\n            }\n        },\n        onChange(event) {\n            if (this.forceSelection) {\n                let valid = false;\n\n                // when forceSelection is on, prevent called twice onOptionSelect()\n                if (this.visibleOptions && !this.multiple) {\n                    let value = this.multiple ? this.$refs.focusInput.value : this.$refs.focusInput.$el.value;\n                    const matchedValue = this.visibleOptions.find((option) => this.isOptionMatched(option, value || ''));\n\n                    if (matchedValue !== undefined) {\n                        valid = true;\n                        !this.isSelected(matchedValue) && this.onOptionSelect(event, matchedValue);\n                    }\n                }\n\n                if (!valid) {\n                    if (this.multiple) this.$refs.focusInput.value = '';\n                    else this.$refs.focusInput.$el.value = '';\n                    this.$emit('clear');\n                    !this.multiple && this.updateModel(event, null);\n                }\n            }\n        },\n        onMultipleContainerFocus() {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            this.focused = true;\n        },\n        onMultipleContainerBlur() {\n            this.focusedMultipleOptionIndex = -1;\n            this.focused = false;\n        },\n        onMultipleContainerKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            switch (event.code) {\n                case 'ArrowLeft':\n                    this.onArrowLeftKeyOnMultiple(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKeyOnMultiple(event);\n                    break;\n\n                case 'Backspace':\n                    this.onBackspaceKeyOnMultiple(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onContainerClick(event) {\n            this.clicked = true;\n\n            if (this.disabled || this.searching || this.loading || this.isInputClicked(event) || this.isDropdownClicked(event)) {\n                return;\n            }\n\n            if (!this.overlay || !this.overlay.contains(event.target)) {\n                focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n            }\n        },\n        onDropdownClick(event) {\n            let query = undefined;\n\n            if (this.overlayVisible) {\n                this.hide(true);\n            } else {\n                focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n                query = this.$refs.focusInput.$el.value;\n\n                if (this.dropdownMode === 'blank') this.search(event, '', 'dropdown');\n                else if (this.dropdownMode === 'current') this.search(event, query, 'dropdown');\n            }\n\n            this.$emit('dropdown-click', { originalEvent: event, query });\n        },\n        onOptionSelect(event, option, isHide = true) {\n            const value = this.getOptionValue(option);\n\n            if (this.multiple) {\n                this.$refs.focusInput.value = '';\n\n                if (!this.isSelected(option)) {\n                    this.updateModel(event, [...(this.modelValue || []), value]);\n                }\n            } else {\n                this.updateModel(event, value);\n            }\n\n            this.$emit('item-select', { originalEvent: event, value: option });\n            this.$emit('option-select', { originalEvent: event, value: option });\n\n            isHide && this.hide(true);\n        },\n        onOptionMouseMove(event, index) {\n            if (this.focusOnHover) {\n                this.changeFocusedOptionIndex(event, index);\n            }\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.$el\n            });\n        },\n        onOverlayKeyDown(event) {\n            switch (event.code) {\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            if (!this.overlayVisible) {\n                return;\n            }\n\n            const optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findFirstOptionIndex() : this.findFirstFocusedOptionIndex();\n\n            this.changeFocusedOptionIndex(event, optionIndex);\n\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            if (!this.overlayVisible) {\n                return;\n            }\n\n            if (event.altKey) {\n                if (this.focusedOptionIndex !== -1) {\n                    this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                }\n\n                this.overlayVisible && this.hide();\n                event.preventDefault();\n            } else {\n                const optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findLastOptionIndex() : this.findLastFocusedOptionIndex();\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                event.preventDefault();\n            }\n        },\n        onArrowLeftKey(event) {\n            const target = event.currentTarget;\n\n            this.focusedOptionIndex = -1;\n\n            if (this.multiple) {\n                if (isEmpty(target.value) && this.hasSelectedOption) {\n                    focus(this.$refs.multiContainer);\n                    this.focusedMultipleOptionIndex = this.modelValue.length;\n                } else {\n                    event.stopPropagation(); // To prevent onArrowLeftKeyOnMultiple method\n                }\n            }\n        },\n        onArrowRightKey(event) {\n            this.focusedOptionIndex = -1;\n\n            this.multiple && event.stopPropagation(); // To prevent onArrowRightKeyOnMultiple method\n        },\n        onHomeKey(event) {\n            const { currentTarget } = event;\n            const len = currentTarget.value.length;\n\n            currentTarget.setSelectionRange(0, event.shiftKey ? len : 0);\n            this.focusedOptionIndex = -1;\n\n            event.preventDefault();\n        },\n        onEndKey(event) {\n            const { currentTarget } = event;\n            const len = currentTarget.value.length;\n\n            currentTarget.setSelectionRange(event.shiftKey ? 0 : len, len);\n            this.focusedOptionIndex = -1;\n\n            event.preventDefault();\n        },\n        onPageUpKey(event) {\n            this.scrollInView(0);\n            event.preventDefault();\n        },\n        onPageDownKey(event) {\n            this.scrollInView(this.visibleOptions.length - 1);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (!this.typeahead) {\n                if (this.multiple) {\n                    this.updateModel(event, [...(this.modelValue || []), event.target.value]);\n                    this.$refs.focusInput.value = '';\n                }\n            } else {\n                if (!this.overlayVisible) {\n                    this.focusedOptionIndex = -1; // reset\n                    this.onArrowDownKey(event);\n                } else {\n                    if (this.focusedOptionIndex !== -1) {\n                        this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                    }\n\n                    this.hide();\n                }\n            }\n        },\n        onEscapeKey(event) {\n            this.overlayVisible && this.hide(true);\n            event.preventDefault();\n        },\n        onTabKey(event) {\n            if (this.focusedOptionIndex !== -1) {\n                this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n            }\n\n            this.overlayVisible && this.hide();\n        },\n        onBackspaceKey(event) {\n            if (this.multiple) {\n                if (isNotEmpty(this.modelValue) && !this.$refs.focusInput.value) {\n                    const removedValue = this.modelValue[this.modelValue.length - 1];\n                    const newValue = this.modelValue.slice(0, -1);\n\n                    this.$emit('update:modelValue', newValue);\n                    this.$emit('item-unselect', { originalEvent: event, value: removedValue });\n                    this.$emit('option-unselect', { originalEvent: event, value: removedValue });\n                }\n\n                event.stopPropagation(); // To prevent onBackspaceKeyOnMultiple method\n            }\n        },\n        onArrowLeftKeyOnMultiple() {\n            this.focusedMultipleOptionIndex = this.focusedMultipleOptionIndex < 1 ? 0 : this.focusedMultipleOptionIndex - 1;\n        },\n        onArrowRightKeyOnMultiple() {\n            this.focusedMultipleOptionIndex++;\n\n            if (this.focusedMultipleOptionIndex > this.modelValue.length - 1) {\n                this.focusedMultipleOptionIndex = -1;\n                focus(this.$refs.focusInput);\n            }\n        },\n        onBackspaceKeyOnMultiple(event) {\n            if (this.focusedMultipleOptionIndex !== -1) {\n                this.removeOption(event, this.focusedMultipleOptionIndex);\n            }\n        },\n        onOverlayEnter(el) {\n            ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n\n            addStyle(el, { position: 'absolute', top: '0', left: '0' });\n            this.alignOverlay();\n        },\n        onOverlayAfterEnter() {\n            this.bindOutsideClickListener();\n            this.bindScrollListener();\n            this.bindResizeListener();\n\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n\n            this.$emit('hide');\n            this.overlay = null;\n        },\n        onOverlayAfterLeave(el) {\n            ZIndex.clear(el);\n        },\n        alignOverlay() {\n            let target = this.multiple ? this.$refs.multiContainer : this.$refs.focusInput.$el;\n\n            if (this.appendTo === 'self') {\n                relativePosition(this.overlay, target);\n            } else {\n                this.overlay.style.minWidth = getOuterWidth(target) + 'px';\n                absolutePosition(this.overlay, target);\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && this.overlay && this.isOutsideClicked(event)) {\n                        this.hide();\n                    }\n                };\n\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !isTouchDevice()) {\n                        this.hide();\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isOutsideClicked(event) {\n            return !this.overlay.contains(event.target) && !this.isInputClicked(event) && !this.isDropdownClicked(event);\n        },\n        isInputClicked(event) {\n            if (this.multiple) return event.target === this.$refs.multiContainer || this.$refs.multiContainer.contains(event.target);\n            else return event.target === this.$refs.focusInput.$el;\n        },\n        isDropdownClicked(event) {\n            return this.$refs.dropdownButton ? event.target === this.$refs.dropdownButton || this.$refs.dropdownButton.contains(event.target) : false;\n        },\n        isOptionMatched(option, value) {\n            return this.isValidOption(option) && this.getOptionLabel(option)?.toLocaleLowerCase(this.searchLocale) === value.toLocaleLowerCase(this.searchLocale);\n        },\n        isValidOption(option) {\n            return isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n        },\n        isValidSelectedOption(option) {\n            return this.isValidOption(option) && this.isSelected(option);\n        },\n        isEquals(value1, value2) {\n            return equals(value1, value2, this.equalityKey);\n        },\n        isSelected(option) {\n            const optionValue = this.getOptionValue(option);\n\n            return this.multiple ? (this.modelValue || []).some((value) => this.isEquals(value, optionValue)) : this.isEquals(this.modelValue, this.getOptionValue(option));\n        },\n        findFirstOptionIndex() {\n            return this.visibleOptions.findIndex((option) => this.isValidOption(option));\n        },\n        findLastOptionIndex() {\n            return findLastIndex(this.visibleOptions, (option) => this.isValidOption(option));\n        },\n        findNextOptionIndex(index) {\n            const matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n        },\n        findPrevOptionIndex(index) {\n            const matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findSelectedOptionIndex() {\n            return this.hasSelectedOption ? this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findFirstFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n        },\n        findLastFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n        },\n        search(event, query, source) {\n            //allow empty string but not undefined or null\n            if (query === undefined || query === null) {\n                return;\n            }\n\n            //do not search blank values on input change\n            if (source === 'input' && query.trim().length === 0) {\n                return;\n            }\n\n            this.searching = true;\n            this.$emit('complete', { originalEvent: event, query });\n        },\n        removeOption(event, index) {\n            const removedOption = this.modelValue[index];\n            const value = this.modelValue.filter((_, i) => i !== index).map((option) => this.getOptionValue(option));\n\n            this.updateModel(event, value);\n            this.$emit('item-unselect', { originalEvent: event, value: removedOption });\n            this.$emit('option-unselect', { originalEvent: event, value: removedOption });\n            this.dirty = true;\n            focus(this.multiple ? this.$refs.focusInput : this.$refs.focusInput.$el);\n        },\n        changeFocusedOptionIndex(event, index) {\n            if (this.focusedOptionIndex !== index) {\n                this.focusedOptionIndex = index;\n                this.scrollInView();\n\n                if (this.selectOnFocus) {\n                    this.onOptionSelect(event, this.visibleOptions[index], false);\n                }\n            }\n        },\n        scrollInView(index = -1) {\n            this.$nextTick(() => {\n                const id = index !== -1 ? `${this.id}_${index}` : this.focusedOptionId;\n                const element = findSingle(this.list, `li[id=\"${id}\"]`);\n\n                if (element) {\n                    element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'start' });\n                } else if (!this.virtualScrollerDisabled) {\n                    this.virtualScroller && this.virtualScroller.scrollToIndex(index !== -1 ? index : this.focusedOptionIndex);\n                }\n            });\n        },\n        autoUpdateModel() {\n            if (this.selectOnFocus && this.autoOptionFocus && !this.hasSelectedOption) {\n                this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n                this.onOptionSelect(null, this.visibleOptions[this.focusedOptionIndex], false);\n            }\n        },\n        updateModel(event, value) {\n            this.$emit('update:modelValue', value);\n            this.$emit('change', { originalEvent: event, value });\n        },\n        flatOptions(options) {\n            return (options || []).reduce((result, option, index) => {\n                result.push({ optionGroup: option, group: true, index });\n\n                const optionGroupChildren = this.getOptionGroupChildren(option);\n\n                optionGroupChildren && optionGroupChildren.forEach((o) => result.push(o));\n\n                return result;\n            }, []);\n        },\n        overlayRef(el) {\n            this.overlay = el;\n        },\n        listRef(el, contentRef) {\n            this.list = el;\n            contentRef && contentRef(el); // For VirtualScroller\n        },\n        virtualScrollerRef(el) {\n            this.virtualScroller = el;\n        }\n    },\n    computed: {\n        visibleOptions() {\n            return this.optionGroupLabel ? this.flatOptions(this.suggestions) : this.suggestions || [];\n        },\n        inputValue() {\n            if (isNotEmpty(this.modelValue)) {\n                if (typeof this.modelValue === 'object') {\n                    const label = this.getOptionLabel(this.modelValue);\n\n                    return label != null ? label : this.modelValue;\n                } else {\n                    return this.modelValue;\n                }\n            } else {\n                return '';\n            }\n        },\n        hasSelectedOption() {\n            return isNotEmpty(this.modelValue);\n        },\n        equalityKey() {\n            return this.dataKey; // TODO: The 'optionValue' properties can be added.\n        },\n        searchResultMessageText() {\n            return isNotEmpty(this.visibleOptions) && this.overlayVisible ? this.searchMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptySearchMessageText;\n        },\n        searchMessageText() {\n            return this.searchMessage || this.$primevue.config.locale.searchMessage || '';\n        },\n        emptySearchMessageText() {\n            return this.emptySearchMessage || this.$primevue.config.locale.emptySearchMessage || '';\n        },\n        selectionMessageText() {\n            return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n        },\n        emptySelectionMessageText() {\n            return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n        },\n        selectedMessageText() {\n            return this.hasSelectedOption ? this.selectionMessageText.replaceAll('{0}', this.multiple ? this.modelValue.length : '1') : this.emptySelectionMessageText;\n        },\n        listAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.listLabel : undefined;\n        },\n        focusedOptionId() {\n            return this.focusedOptionIndex !== -1 ? `${this.id}_${this.focusedOptionIndex}` : null;\n        },\n        focusedMultipleOptionId() {\n            return this.focusedMultipleOptionIndex !== -1 ? `${this.id}_multiple_option_${this.focusedMultipleOptionIndex}` : null;\n        },\n        ariaSetSize() {\n            return this.visibleOptions.filter((option) => !this.isOptionGroup(option)).length;\n        },\n        virtualScrollerDisabled() {\n            return !this.virtualScrollerOptions;\n        },\n        panelId() {\n            return this.id + '_panel';\n        }\n    },\n    components: {\n        InputText,\n        VirtualScroller,\n        Portal,\n        ChevronDownIcon,\n        SpinnerIcon,\n        Chip\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["theme", "_ref", "dt", "concat", "inlineStyles", "root", "position", "classes", "_ref2", "instance", "props", "disabled", "invalid", "focused", "modelValue", "isNotEmpty", "inputValue", "overlayVisible", "fluid", "pcInput", "inputMultiple", "_ref3", "variant", "$primevue", "config", "inputStyle", "inputVariant", "chipItem", "_ref4", "i", "focusedMultipleOptionIndex", "pcChip", "chipIcon", "inputChip", "loader", "dropdown", "overlay", "list", "optionGroup", "option", "_ref5", "getItemOptions", "isSelected", "focusedOptionIndex", "getOptionIndex", "isOptionDisabled", "emptyMessage", "BaseStyle", "extend", "name", "name", "BaseComponent", "props", "modelValue", "suggestions", "type", "Array", "optionLabel", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "scrollHeight", "String", "dropdown", "Boolean", "dropdownMode", "multiple", "loading", "variant", "invalid", "disabled", "placeholder", "dataKey", "minLength", "Number", "delay", "appendTo", "Object", "forceSelection", "completeOnFocus", "inputId", "inputStyle", "inputClass", "panelStyle", "panelClass", "overlayStyle", "overlayClass", "dropdownIcon", "dropdownClass", "loader", "loadingIcon", "removeTokenIcon", "chipIcon", "virtualScrollerOptions", "autoOptionFocus", "selectOnFocus", "focusOnHover", "searchLocale", "undefined", "searchMessage", "selectionMessage", "emptySelectionMessage", "emptySearchMessage", "tabindex", "typeahead", "ariaLabel", "ariaLabelledby", "fluid", "style", "AutoCompleteStyle", "provide", "$pcAutoComplete", "$parentInstance", "script", "BaseAutoComplete", "inheritAttrs", "emits", "outsideClickListener", "resizeListener", "scrollHandler", "overlay", "virtualScroller", "searchTimeout", "dirty", "data", "id", "$attrs", "clicked", "focused", "focusedOptionIndex", "focusedMultipleOptionIndex", "overlayVisible", "searching", "watch", "$attrsId", "newValue", "UniqueComponentId", "show", "findFirstFocusedOptionIndex", "autoUpdateModel", "mounted", "updated", "alignOverlay", "beforeUnmount", "unbindOutsideClickListener", "unbindResizeListener", "destroy", "ZIndex", "clear", "methods", "getOptionIndex", "index", "fn", "virtualScrollerDisabled", "getOptionLabel", "option", "resolveFieldData", "getOptionValue", "getOptionRenderKey", "getPTOptions", "itemOptions", "key", "ptm", "context", "selected", "isSelected", "isOptionDisabled", "isOptionGroup", "optionGroup", "group", "getOptionGroupLabel", "getOptionGroupChildren", "getAriaPosInset", "_this", "visibleOptions", "slice", "filter", "length", "isFocus", "$emit", "focus", "$refs", "focusInput", "$el", "hide", "_this2", "_hide", "setTimeout", "onFocus", "event", "search", "target", "value", "scrollInView", "onBlur", "onKeyDown", "preventDefault", "code", "onArrowDownKey", "onArrowUpKey", "onArrowLeftKey", "onArrowRightKey", "onHomeKey", "onEndKey", "onPageDownKey", "onPageUpKey", "onEnterKey", "onEscapeKey", "onTabKey", "onBackspaceKey", "onInput", "_this3", "clearTimeout", "query", "updateModel", "onChange", "_this4", "valid", "matchedValue", "find", "isOptionMatched", "onOptionSelect", "onMultipleContainerFocus", "onMultipleContainerBlur", "onMultipleContainerKeyDown", "onArrowLeftKeyOnMultiple", "onArrowRightKeyOnMultiple", "onBackspaceKeyOnMultiple", "onContainerClick", "isInputClicked", "isDropdownClicked", "contains", "onDropdownClick", "originalEvent", "isHide", "arguments", "concat", "_toConsumableArray", "onOptionMouseMove", "changeFocusedOptionIndex", "onOverlayClick", "OverlayEventBus", "emit", "onOverlayKeyDown", "optionIndex", "findNextOptionIndex", "findFirstOptionIndex", "altKey", "findPrevOptionIndex", "findLastOptionIndex", "findLastFocusedOptionIndex", "currentTarget", "isEmpty", "hasSelectedOption", "multiContainer", "stopPropagation", "len", "setSelectionRange", "shiftKey", "isNotEmpty", "removedValue", "removeOption", "onOverlayEnter", "el", "set", "$primevue", "config", "zIndex", "addStyle", "position", "top", "left", "onOverlayAfterEnter", "bindOutsideClickListener", "bindScrollListener", "bindResizeListener", "onOverlayLeave", "unbindScrollListener", "onOverlayAfterLeave", "relativePosition", "minWidth", "getOuterWidth", "absolutePosition", "_this5", "isOutsideClicked", "document", "addEventListener", "removeEventListener", "_this6", "ConnectedOverlayScrollHandler", "container", "_this7", "isTouchDevice", "window", "dropdownButton", "_this$getOptionLabel", "isValidOption", "toLocaleLowerCase", "isValidSelectedOption", "isEquals", "value1", "value2", "equals", "equalityKey", "_this8", "optionValue", "some", "_this9", "findIndex", "_this10", "findLastIndex", "_this11", "matchedOptionIndex", "_this12", "findSelectedOptionIndex", "_this13", "selectedIndex", "source", "trim", "_this14", "removedOption", "_", "i", "map", "_this15", "$nextTick", "focusedOptionId", "element", "findSingle", "list", "scrollIntoView", "block", "inline", "scrollToIndex", "flatOptions", "options", "_this16", "reduce", "result", "push", "forEach", "o", "overlayRef", "listRef", "contentRef", "virtualScrollerRef", "computed", "inputValue", "_typeof", "label", "searchResultMessageText", "searchMessageText", "replaceAll", "emptySearchMessageText", "locale", "selectionMessageText", "emptySelectionMessageText", "selectedMessageText", "listAriaLabel", "aria", "listLabel", "focusedMultipleOptionId", "ariaSetSize", "_this17", "panelId", "components", "InputText", "VirtualScroller", "Portal", "ChevronDownIcon", "SpinnerIcon", "Chip", "directives", "ripple", "Ripple", "_openBlock", "_createElementBlock", "_mergeProps", "ref", "_ctx", "cx", "sx", "onClick", "$options", "apply", "ptmi", "_createBlock", "_component_InputText", "_normalizeClass", "autocomplete", "role", "$data", "onKeydown", "unstyled", "pt", "_Fragment", "_renderList", "_renderSlot", "removeCallback", "_createVNode", "_component_Chip", "removeIcon", "removable", "onRemove", "$event", "removeicon", "$slots", "chipicon", "_createElementVNode", "_hoisted_3", "_component_SpinnerIcon", "spin", "toggleCallback", "_resolveDynamicComponent", "_component_Portal", "_Transition", "onEnter", "onAfterEnter", "onLeave", "onAfterLeave", "_objectSpread", "_component_VirtualScroller", "items", "content", "_withCtx", "_ref", "styleClass", "getItemOptions", "contentStyle", "itemSize", "height", "_withDirectives", "onMousemove", "_createTextVNode", "_toDisplayString", "_ref2"]
}
