{
  "version": 3,
  "sources": ["../../src/inputotp/style/InputOtpStyle.js", "../../src/inputotp/BaseInputOtp.vue", "../../src/inputotp/InputOtp.vue", "../../src/inputotp/InputOtp.vue?vue&type=template&id=5555e307&lang.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nconst theme = ({ dt }) => `\n.p-inputotp {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.p-inputotp-input {\n    text-align: center;\n    width: 2.5rem;\n}\n`;\n\nconst classes = {\n    root: 'p-inputotp p-component',\n    pcInput: 'p-inputotp-input'\n};\n\nexport default BaseStyle.extend({\n    name: 'inputotp',\n    theme,\n    classes\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport InputOtpStyle from 'primevue/inputotp/style';\n\nexport default {\n    name: 'BaseInputOtp',\n    extends: BaseComponent,\n    props: {\n        modelValue: {\n            type: null,\n            default: false\n        },\n        invalid: {\n            type: Boolean,\n            default: false\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        variant: {\n            type: String,\n            default: null\n        },\n        tabindex: {\n            type: Number,\n            default: null\n        },\n        length: {\n            type: Number,\n            default: 4\n        },\n        mask: {\n            type: Boolean,\n            default: false\n        },\n        integerOnly: {\n            type: Boolean,\n            default: false\n        }\n    },\n    style: InputOtpStyle,\n    provide() {\n        return {\n            $pcInputOtp: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <template v-for=\"i in length\" :key=\"i\">\n            <slot :events=\"getTemplateEvents(i - 1)\" :attrs=\"getTemplateAttrs(i - 1)\" :index=\"i\">\n                <OtpInputText\n                    :value=\"tokens[i - 1]\"\n                    :type=\"inputType\"\n                    :class=\"cx('pcInput')\"\n                    :inputmode=\"inputMode\"\n                    :variant=\"variant\"\n                    :readonly=\"readonly\"\n                    :disabled=\"disabled\"\n                    :invalid=\"invalid\"\n                    :tabindex=\"tabindex\"\n                    :unstyled=\"unstyled\"\n                    @input=\"onInput($event, i - 1)\"\n                    @focus=\"onFocus($event)\"\n                    @blur=\"onBlur($event)\"\n                    @paste=\"onPaste($event)\"\n                    @keydown=\"onKeyDown($event)\"\n                    :pt=\"ptm('pcInput')\"\n                />\n            </slot>\n        </template>\n    </div>\n</template>\n\n<script>\nimport InputText from 'primevue/inputtext';\nimport BaseInputOtp from './BaseInputOtp.vue';\n\nexport default {\n    name: 'InputOtp',\n    extends: BaseInputOtp,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'change', 'focus', 'blur'],\n    data() {\n        return {\n            tokens: []\n        };\n    },\n    watch: {\n        modelValue: {\n            immediate: true,\n            handler(newValue) {\n                this.tokens = newValue ? newValue.split('') : new Array(this.length);\n            }\n        }\n    },\n    methods: {\n        getTemplateAttrs(index) {\n            return {\n                value: this.tokens[index]\n            };\n        },\n        getTemplateEvents(index) {\n            return {\n                input: (event) => this.onInput(event, index),\n                keydown: (event) => this.onKeyDown(event),\n                focus: (event) => this.onFocus(event),\n                blur: (event) => this.onBlur(event),\n                paste: (event) => this.onPaste(event)\n            };\n        },\n        getPTOptions(key) {\n            const _ptm = key === 'root' ? this.ptmi : this.ptm;\n\n            return _ptm(key, {\n                context: {\n                    checked: this.checked,\n                    disabled: this.disabled\n                }\n            });\n        },\n        onInput(event, index) {\n            this.tokens[index] = event.target.value;\n            this.updateModel(event);\n\n            if (event.inputType === 'deleteContentBackward') {\n                this.moveToPrev(event);\n            } else if (event.inputType === 'insertText' || event.inputType === 'deleteContentForward') {\n                this.moveToNext(event);\n            }\n        },\n        updateModel(event) {\n            const newValue = this.tokens.join('');\n\n            this.$emit('update:modelValue', newValue);\n            this.$emit('change', {\n                originalEvent: event,\n                value: newValue\n            });\n        },\n        moveToPrev(event) {\n            let prevInput = this.findPrevInput(event.target);\n\n            if (prevInput) {\n                prevInput.focus();\n                prevInput.select();\n            }\n        },\n        moveToNext(event) {\n            let nextInput = this.findNextInput(event.target);\n\n            if (nextInput) {\n                nextInput.focus();\n                nextInput.select();\n            }\n        },\n        findNextInput(element) {\n            let nextElement = element.nextElementSibling;\n\n            if (!nextElement) return;\n\n            return nextElement.nodeName === 'INPUT' ? nextElement : this.findNextInput(nextElement);\n        },\n        findPrevInput(element) {\n            let prevElement = element.previousElementSibling;\n\n            if (!prevElement) return;\n\n            return prevElement.nodeName === 'INPUT' ? prevElement : this.findPrevInput(prevElement);\n        },\n        onFocus(event) {\n            event.target.select();\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.$emit('blur', event);\n        },\n        onKeyDown(event) {\n            if (event.ctrlKey || event.metaKey) {\n                return;\n            }\n\n            switch (event.code) {\n                case 'ArrowLeft':\n                    this.moveToPrev(event);\n                    event.preventDefault();\n\n                    break;\n\n                case 'ArrowUp':\n                case 'ArrowDown':\n                    event.preventDefault();\n\n                    break;\n\n                case 'Backspace':\n                    if (event.target.value.length === 0) {\n                        this.moveToPrev(event);\n                        event.preventDefault();\n                    }\n\n                    break;\n\n                case 'ArrowRight':\n                    this.moveToNext(event);\n                    event.preventDefault();\n\n                    break;\n\n                default:\n                    if ((this.integerOnly && !(Number(event.key) >= 0 && Number(event.key) <= 9)) || (this.tokens.join('').length >= this.length && event.code !== 'Delete')) {\n                        event.preventDefault();\n                    }\n\n                    break;\n            }\n        },\n        onPaste(event) {\n            let paste = event.clipboardData.getData('text');\n\n            if (paste.length) {\n                let pastedCode = paste.substring(0, this.length + 1);\n\n                if (!this.integerOnly || !isNaN(pastedCode)) {\n                    this.tokens = pastedCode.split('');\n                    this.updateModel(event);\n                }\n            }\n\n            event.preventDefault();\n        }\n    },\n    computed: {\n        inputMode() {\n            return this.integerOnly ? 'numeric' : 'text';\n        },\n        inputType() {\n            return this.mask ? 'password' : 'text';\n        }\n    },\n    components: {\n        OtpInputText: InputText\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <template v-for=\"i in length\" :key=\"i\">\n            <slot :events=\"getTemplateEvents(i - 1)\" :attrs=\"getTemplateAttrs(i - 1)\" :index=\"i\">\n                <OtpInputText\n                    :value=\"tokens[i - 1]\"\n                    :type=\"inputType\"\n                    :class=\"cx('pcInput')\"\n                    :inputmode=\"inputMode\"\n                    :variant=\"variant\"\n                    :readonly=\"readonly\"\n                    :disabled=\"disabled\"\n                    :invalid=\"invalid\"\n                    :tabindex=\"tabindex\"\n                    :unstyled=\"unstyled\"\n                    @input=\"onInput($event, i - 1)\"\n                    @focus=\"onFocus($event)\"\n                    @blur=\"onBlur($event)\"\n                    @paste=\"onPaste($event)\"\n                    @keydown=\"onKeyDown($event)\"\n                    :pt=\"ptm('pcInput')\"\n                />\n            </slot>\n        </template>\n    </div>\n</template>\n\n<script>\nimport InputText from 'primevue/inputtext';\nimport BaseInputOtp from './BaseInputOtp.vue';\n\nexport default {\n    name: 'InputOtp',\n    extends: BaseInputOtp,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'change', 'focus', 'blur'],\n    data() {\n        return {\n            tokens: []\n        };\n    },\n    watch: {\n        modelValue: {\n            immediate: true,\n            handler(newValue) {\n                this.tokens = newValue ? newValue.split('') : new Array(this.length);\n            }\n        }\n    },\n    methods: {\n        getTemplateAttrs(index) {\n            return {\n                value: this.tokens[index]\n            };\n        },\n        getTemplateEvents(index) {\n            return {\n                input: (event) => this.onInput(event, index),\n                keydown: (event) => this.onKeyDown(event),\n                focus: (event) => this.onFocus(event),\n                blur: (event) => this.onBlur(event),\n                paste: (event) => this.onPaste(event)\n            };\n        },\n        getPTOptions(key) {\n            const _ptm = key === 'root' ? this.ptmi : this.ptm;\n\n            return _ptm(key, {\n                context: {\n                    checked: this.checked,\n                    disabled: this.disabled\n                }\n            });\n        },\n        onInput(event, index) {\n            this.tokens[index] = event.target.value;\n            this.updateModel(event);\n\n            if (event.inputType === 'deleteContentBackward') {\n                this.moveToPrev(event);\n            } else if (event.inputType === 'insertText' || event.inputType === 'deleteContentForward') {\n                this.moveToNext(event);\n            }\n        },\n        updateModel(event) {\n            const newValue = this.tokens.join('');\n\n            this.$emit('update:modelValue', newValue);\n            this.$emit('change', {\n                originalEvent: event,\n                value: newValue\n            });\n        },\n        moveToPrev(event) {\n            let prevInput = this.findPrevInput(event.target);\n\n            if (prevInput) {\n                prevInput.focus();\n                prevInput.select();\n            }\n        },\n        moveToNext(event) {\n            let nextInput = this.findNextInput(event.target);\n\n            if (nextInput) {\n                nextInput.focus();\n                nextInput.select();\n            }\n        },\n        findNextInput(element) {\n            let nextElement = element.nextElementSibling;\n\n            if (!nextElement) return;\n\n            return nextElement.nodeName === 'INPUT' ? nextElement : this.findNextInput(nextElement);\n        },\n        findPrevInput(element) {\n            let prevElement = element.previousElementSibling;\n\n            if (!prevElement) return;\n\n            return prevElement.nodeName === 'INPUT' ? prevElement : this.findPrevInput(prevElement);\n        },\n        onFocus(event) {\n            event.target.select();\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.$emit('blur', event);\n        },\n        onKeyDown(event) {\n            if (event.ctrlKey || event.metaKey) {\n                return;\n            }\n\n            switch (event.code) {\n                case 'ArrowLeft':\n                    this.moveToPrev(event);\n                    event.preventDefault();\n\n                    break;\n\n                case 'ArrowUp':\n                case 'ArrowDown':\n                    event.preventDefault();\n\n                    break;\n\n                case 'Backspace':\n                    if (event.target.value.length === 0) {\n                        this.moveToPrev(event);\n                        event.preventDefault();\n                    }\n\n                    break;\n\n                case 'ArrowRight':\n                    this.moveToNext(event);\n                    event.preventDefault();\n\n                    break;\n\n                default:\n                    if ((this.integerOnly && !(Number(event.key) >= 0 && Number(event.key) <= 9)) || (this.tokens.join('').length >= this.length && event.code !== 'Delete')) {\n                        event.preventDefault();\n                    }\n\n                    break;\n            }\n        },\n        onPaste(event) {\n            let paste = event.clipboardData.getData('text');\n\n            if (paste.length) {\n                let pastedCode = paste.substring(0, this.length + 1);\n\n                if (!this.integerOnly || !isNaN(pastedCode)) {\n                    this.tokens = pastedCode.split('');\n                    this.updateModel(event);\n                }\n            }\n\n            event.preventDefault();\n        }\n    },\n    computed: {\n        inputMode() {\n            return this.integerOnly ? 'numeric' : 'text';\n        },\n        inputType() {\n            return this.mask ? 'password' : 'text';\n        }\n    },\n    components: {\n        OtpInputText: InputText\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["theme", "_ref", "dt", "classes", "root", "pcInput", "BaseStyle", "extend", "name", "name", "BaseComponent", "props", "modelValue", "type", "invalid", "Boolean", "disabled", "readonly", "variant", "String", "tabindex", "Number", "length", "mask", "integerOnly", "style", "InputOtpStyle", "provide", "$pcInputOtp", "$parentInstance", "script", "BaseInputOtp", "inheritAttrs", "emits", "data", "tokens", "watch", "immediate", "handler", "newValue", "split", "Array", "methods", "getTemplateAttrs", "index", "value", "getTemplateEvents", "_this", "input", "event", "onInput", "keydown", "onKeyDown", "focus", "onFocus", "blur", "onBlur", "paste", "onPaste", "getPTOptions", "key", "_ptm", "ptmi", "ptm", "context", "checked", "target", "updateModel", "inputType", "moveToPrev", "moveToNext", "join", "$emit", "originalEvent", "prevInput", "findPrevInput", "select", "nextInput", "findNextInput", "element", "nextElement", "nextElementSibling", "nodeName", "prevElement", "previousElementSibling", "ctrlKey", "metaKey", "code", "preventDefault", "clipboardData", "getData", "pastedCode", "substring", "isNaN", "computed", "inputMode", "components", "OtpInputText", "InputText", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "_Fragment", "_renderList", "i", "_renderSlot", "$slots", "events", "$options", "attrs", "_createVNode", "_component_OtpInputText", "$data", "inputmode", "unstyled", "$event", "_cache", "onKeydown", "pt"]
}
